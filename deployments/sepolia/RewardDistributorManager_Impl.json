{
  "address": "0xd9a06F0f687b080c4B7adADb6Fd90eb55C1b71B4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "RewardDistributorManager__NotController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardDistributor",
          "type": "address"
        }
      ],
      "name": "RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributorManager_initialize__InvalidController",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardDistributor",
          "type": "address"
        }
      ],
      "name": "RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributorManager_updateEligibleBalance__InvalidEligibility",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newRewardDistributor",
          "type": "address"
        }
      ],
      "name": "AddRewardDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "eligibility",
          "type": "bool"
        }
      ],
      "name": "EligibilityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "EligibleTotalBorrowChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "EligibleTotalSupplyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldEligibilityManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEligibilityManager",
          "type": "address"
        }
      ],
      "name": "NewEligibilityManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "NewPendingOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldRewardDistributor",
          "type": "address"
        }
      ],
      "name": "RemoveRewardDistributor",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_acceptOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistributor",
          "type": "address"
        }
      ],
      "name": "_addRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardDistributors",
          "type": "address[]"
        }
      ],
      "name": "_addRewardDistributors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistributor",
          "type": "address"
        }
      ],
      "name": "_removeRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardDistributors",
          "type": "address[]"
        }
      ],
      "name": "_removeRewardDistributors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEligibilityManager",
          "name": "_newEligibilityManager",
          "type": "address"
        }
      ],
      "name": "_setEligibilityManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "_setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_borrowedAmount",
          "type": "uint256"
        }
      ],
      "name": "afterBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "afterFlashloan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "afterLiquidateBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintedAmount",
          "type": "uint256"
        }
      ],
      "name": "afterMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "afterRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_repayAmount",
          "type": "uint256"
        }
      ],
      "name": "afterRepayBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_seizedAmount",
          "type": "uint256"
        }
      ],
      "name": "afterSeize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "afterTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        }
      ],
      "name": "claimAllReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "claimBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_iTokens",
          "type": "address[]"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_suppliediTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_borrowediTokens",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityManager",
      "outputs": [
        {
          "internalType": "contract IEligibilityManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "eligibleBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_eligibleBorrow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "eligibleSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_eligibleSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eligibleTotalBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eligibleTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardDistributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardDistributorsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRewardDistributorManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isBorrow",
          "type": "bool"
        }
      ],
      "name": "updateDistributionState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "updateEligibleBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "updateEligibleBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isBorrow",
          "type": "bool"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x378664782b85c23f3b3480cff73f4b78ae3d9fdb541d8c3cbe1854ff3c7fa398",
  "receipt": {
    "to": null,
    "from": "0x6b29b8af9AF126170513AE6524395E09025b214E",
    "contractAddress": "0xd9a06F0f687b080c4B7adADb6Fd90eb55C1b71B4",
    "transactionIndex": 0,
    "gasUsed": "2459368",
    "logsBloom": "0x
    "blockHash": "0xcfd94465b88aa6d5e6d5438af6f19aa4f4c71b82c3b7afec9c9fe1c8ebd6f19b",
    "transactionHash": "0x378664782b85c23f3b3480cff73f4b78ae3d9fdb541d8c3cbe1854ff3c7fa398",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6835824,
        "transactionHash": "0x378664782b85c23f3b3480cff73f4b78ae3d9fdb541d8c3cbe1854ff3c7fa398",
        "address": "0xd9a06F0f687b080c4B7adADb6Fd90eb55C1b71B4",
        "topics": [
          "0x70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006b29b8af9af126170513ae6524395e09025b214e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcfd94465b88aa6d5e6d5438af6f19aa4f4c71b82c3b7afec9c9fe1c8ebd6f19b"
      }
    ],
    "blockNumber": 6835824,
    "cumulativeGasUsed": "2459368",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1cD0b4aFA81568F967c769d48607796A6A2E8B71"
  ],
  "numDeployments": 1,
  "solcInputHash": "c9c05e969f4365cae4f6ddfababd0d12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RewardDistributorManager__NotController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardDistributor\",\"type\":\"address\"}],\"name\":\"RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorManager_initialize__InvalidController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardDistributor\",\"type\":\"address\"}],\"name\":\"RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorManager_updateEligibleBalance__InvalidEligibility\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRewardDistributor\",\"type\":\"address\"}],\"name\":\"AddRewardDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"eligibility\",\"type\":\"bool\"}],\"name\":\"EligibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"EligibleTotalBorrowChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"EligibleTotalSupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEligibilityManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEligibilityManager\",\"type\":\"address\"}],\"name\":\"NewEligibilityManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldRewardDistributor\",\"type\":\"address\"}],\"name\":\"RemoveRewardDistributor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"}],\"name\":\"_addRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardDistributors\",\"type\":\"address[]\"}],\"name\":\"_addRewardDistributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"}],\"name\":\"_removeRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardDistributors\",\"type\":\"address[]\"}],\"name\":\"_removeRewardDistributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEligibilityManager\",\"name\":\"_newEligibilityManager\",\"type\":\"address\"}],\"name\":\"_setEligibilityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowedAmount\",\"type\":\"uint256\"}],\"name\":\"afterBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afterFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afterLiquidateBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"afterMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afterRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"afterRepayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seizedAmount\",\"type\":\"uint256\"}],\"name\":\"afterSeize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"afterTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"claimBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_iTokens\",\"type\":\"address[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_suppliediTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_borrowediTokens\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityManager\",\"outputs\":[{\"internalType\":\"contract IEligibilityManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"eligibleBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_eligibleBorrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"eligibleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_eligibleSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibleTotalBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibleTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDistributorsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRewardDistributorManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBorrow\",\"type\":\"bool\"}],\"name\":\"updateDistributionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updateEligibleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"updateEligibleBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBorrow\",\"type\":\"bool\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_acceptOwner()\":{\"details\":\"Accepts the admin rights, but only for pendingOwenr.\"},\"_setEligibilityManager(address)\":{\"details\":\"Admin function, only owner can call this\",\"params\":{\"_newEligibilityManager\":\"the address of treasury\"}},\"_setPendingOwner(address)\":{\"details\":\"Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\",\"params\":{\"newPendingOwner\":\"New pending owner.\"}},\"afterBorrow(address,address,uint256)\":{\"params\":{\"_borrowedAmount\":\"The amount of underlying being borrowed\",\"_borrower\":\"The account which borrowed iToken\",\"_iToken\":\"The iToken being borrewd\"}},\"afterMint(address,address,uint256,uint256)\":{\"params\":{\"_iToken\":\"The iToken being minted\",\"_mintedAmount\":\"The amount of iToken being minted\",\"_minter\":\"The account which would get the minted tokens\"}},\"afterRedeem(address,address,uint256,uint256)\":{\"params\":{\"_iToken\":\"The iToken being redeemed\",\"_redeemAmount\":\"The amount of iToken being redeemed\",\"_redeemer\":\"The account which redeemed iToken\"}},\"afterRepayBorrow(address,address,address,uint256)\":{\"params\":{\"_borrower\":\"The account which has borrowed\",\"_iToken\":\"The iToken being repaid #param _payer The account which would repay\",\"_repayAmount\":\"The amount of underlying being repaied\"}},\"afterSeize(address,address,address,address,uint256)\":{\"params\":{\"_borrower\":\"The account which has borrowed\",\"_iTokenCollateral\":\"The collateral iToken to be seized #param _iTokenBorrowed The iToken was borrowed\",\"_liquidator\":\"The account which has repaid and seized\",\"_seizedAmount\":\"The amount of collateral being seized\"}},\"afterTransfer(address,address,address,uint256)\":{\"params\":{\"_amount\":\"The amount was transfered\",\"_from\":\"The account was transfer from\",\"_iToken\":\"The iToken was transfered\",\"_to\":\"The account was transfer to\"}},\"claimAllReward(address[])\":{\"params\":{\"_holders\":\"The account to claim for\"}},\"claimRewards(address[],address[],address[])\":{\"params\":{\"_borrowediTokens\":\"The _borrowediTokens to claim from\",\"_holders\":\"The account to claim for\",\"_suppliediTokens\":\"The _suppliediTokens to claim from\"}}},\"version\":1},\"userdoc\":{\"events\":{\"EligibilityChanged(address,bool)\":{\"notice\":\"Emitted Eligibility is changed\"},\"EligibleTotalBorrowChanged(address,int256)\":{\"notice\":\"Emitted Eligible Total Borrow changed\"},\"EligibleTotalSupplyChanged(address,int256)\":{\"notice\":\"Emitted Eligible Total Supply changed\"},\"NewEligibilityManager(address,address)\":{\"notice\":\"Emitted Eligibility Manager address is changed by admin\"}},\"kind\":\"user\",\"methods\":{\"_setEligibilityManager(address)\":{\"notice\":\"set new eligibility manager address\"},\"_setPendingOwner(address)\":{\"notice\":\"Base on the inputing parameter `newPendingOwner` to check the exact error reason.\"},\"afterBorrow(address,address,uint256)\":{\"notice\":\"Hook function after iToken `borrow()` Will `revert()` if any operation fails\"},\"afterFlashloan(address,address,uint256)\":{\"notice\":\"Hook function after iToken `flashloan()` Will `revert()` if any operation fails #param _iToken The iToken was flashloaned #param _to The account flashloan transfer to #param _amount  The amount was flashloaned\"},\"afterLiquidateBorrow(address,address,address,address,uint256,uint256)\":{\"notice\":\"Hook function after iToken `liquidateBorrow()` Will `revert()` if any operation fails #param _iTokenBorrowed The iToken was borrowed #param _iTokenCollateral The collateral iToken to be seized #param _liquidator The account which would repay and seize #param _borrower The account which has borrowed #param _repaidAmount  The amount of underlying being repaied #param _seizedAmount  The amount of collateral being seized\"},\"afterMint(address,address,uint256,uint256)\":{\"notice\":\"Hook function after iToken `mint()` Will `revert()` if any operation fails\"},\"afterRedeem(address,address,uint256,uint256)\":{\"notice\":\"Hook function after iToken `redeem()` Will `revert()` if any operation fails\"},\"afterRepayBorrow(address,address,address,uint256)\":{\"notice\":\"Hook function after iToken `repayBorrow()` Will `revert()` if any operation fails\"},\"afterSeize(address,address,address,address,uint256)\":{\"notice\":\"Hook function after iToken `seize()` Will `revert()` if any operation fails\"},\"afterTransfer(address,address,address,uint256)\":{\"notice\":\"Hook function after iToken `transfer()` Will `revert()` if any operation fails\"},\"claimAllReward(address[])\":{\"notice\":\"Claim reward accrued in all iTokens by the holders\"},\"claimRewards(address[],address[],address[])\":{\"notice\":\"Claim reward accrued in iTokens by the holders\"},\"eligibilityManager()\":{\"notice\":\"the Eligibility Manager address where to query the eligibility of accounts\"},\"eligibleTotalBorrow(address)\":{\"notice\":\"the Eligible Total Borrow Balance of each iToken\"},\"eligibleTotalSupply(address)\":{\"notice\":\"the Eligible Total Supply of each iToken\"},\"isEligible(address)\":{\"notice\":\"the Elibility of each accounts\"},\"isRewardDistributorManager()\":{\"notice\":\"Ensure this is a RewardDistributorManager contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RewardDistributorManager.sol\":\"RewardDistributorManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"src/Interfaces/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress();\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist();\\nerror BaseStakingPool_initialize__StakingTokenIsZeroAddress();\\nerror BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist();\\nerror BaseStakingPool_stake__StakeAmountIsZero();\\nerror BaseStakingPool_withdraw__WithdrawAmountIsZero();\\n\\nerror BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager();\\n\\nerror BLPReward_initialize__StakingTokenIsZeroAddress();\\nerror BLPReward_initialize__RewardTokenIsZeroAddress();\\nerror BLPReward_initialize__TreasuryIsZeroAddress();\\nerror BLPReward_setTreasury__TreasuryIsZeroAddress();\\nerror BLPReward_setTreasury__SameTreasuryAddress();\\n\\nerror EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\\n    address stakingPool\\n);\\nerror EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\\n    address stakingPool\\n);\\nerror EligibilityManager_addValidSupplyInternal__InvalidSupply(address iToken);\\nerror EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\\n    address iToken\\n);\\nerror EligibilityManager_initialize__InvalidController();\\nerror EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\\n    address iToken\\n);\\nerror EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\\n    address stakingPool\\n);\\n\\n// Modifier error\\nerror RewardDistributorManager__NotController();\\n// Function errors\\nerror RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\\nerror RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_initialize__InvalidController();\\nerror RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\\nerror RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\\n\\nerror RewardDistributor__CallerIsNotRewardManager();\\nerror RewardDistributor__ContractPaused();\\nerror RewardDistributor_initialize__InvalidController();\\nerror RewardDistributor_initialize__InvalidRewardDistributorManager();\\nerror RewardDistributor_rescueTokens__CallerIsNotTreasury();\\nerror RewardDistributor_setRewardToken__InvalidRewardToken();\\nerror RewardDistributor_setTreasury__InvalidTreasury();\\nerror RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateDistributionState__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateReward__TokenHasNotBeenListed(address iToken);\\nerror RewardDistributor_updateReward__AccountIsZeroAddress();\\nerror RewardDistributor_setBountyRatio__RatioTooHigh();\\n\",\"keccak256\":\"0x8e9a4bbbbc196ddceeb4bd00f3500040bf513e2a32009c358e9103989267842f\",\"license\":\"MIT\"},\"src/Interfaces/IController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface IController {\\n    /**\\n     * @notice Security checks when updating the comptroller of a market, always expect to return true.\\n     */\\n    function isController() external view returns (bool);\\n\\n    /**\\n     * @notice Return all of the iTokens\\n     * @return The list of iToken addresses\\n     */\\n    function getAlliTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Check whether a iToken is listed in controller\\n     * @param _iToken The iToken to check for\\n     * @return true if the iToken is listed otherwise false\\n     */\\n    function hasiToken(address _iToken) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n    function rewardDistributor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb64207ac0bc4ef315135c790887897f38eadca384d32e21a480e8e273187a96b\",\"license\":\"MIT\"},\"src/Interfaces/IEligibilityManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IEligibilityManager {\\n    function isEligibilityManager() external pure returns (bool);\\n    function isEligible(address _account) external returns (bool, bool);\\n    function hasBLPStakingPool(address _stakingPool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x299d78a109590773f810702595259a2282551ade58f2eec53bbf69c05408c30e\",\"license\":\"MIT\"},\"src/Interfaces/IRewardDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IController.sol\\\";\\n\\ninterface IRewardDistributor {\\n    function isRewardDistributor() external view returns (bool);\\n\\n    function controller() external view returns (IController);\\n\\n    function rewardToken() external returns (address);\\n\\n    function _setRewardToken(address newRewardToken) external;\\n\\n    /// @notice Emitted reward token address is changed by admin\\n    event NewRewardToken(address oldRewardToken, address newRewardToken);\\n\\n    function treasury() external returns (address);\\n\\n    function _setTreasury(address newTreasury) external;\\n\\n    /// @notice Emitted treasury address is changed by admin\\n    event NewTreasury(address oldTreasury, address newTreasury);\\n\\n    function _addRecipient(\\n        address _iToken,\\n        uint256 _distributionFactor\\n    ) external;\\n\\n    event NewRecipient(address iToken, uint256 distributionFactor);\\n\\n    /// @notice Emitted when mint is paused/unpaused by admin\\n    event PausedChanged(bool paused, uint256 timestamp);\\n\\n    function _pause() external;\\n\\n    function _unpause(\\n        address[] calldata _borrowiTokens,\\n        uint256[] calldata _borrowSpeeds,\\n        address[] calldata _supplyiTokens,\\n        uint256[] calldata _supplySpeeds\\n    ) external;\\n\\n    /// @notice Emitted when Global Distribution speed for both supply and borrow are updated\\n    event GlobalDistributionSpeedsChanged(\\n        uint256 borrowSpeed,\\n        uint256 supplySpeed,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Emitted when iToken's Distribution borrow speed is updated\\n    event DistributionBorrowSpeedChanged(\\n        address iToken,\\n        uint256 borrowSpeed,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Emitted when iToken's Distribution supply speed is updated\\n    event DistributionSupplySpeedChanged(\\n        address iToken,\\n        uint256 supplySpeed,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Emitted when iToken's Distribution factor is changed by admin\\n    event NewDistributionFactor(\\n        address iToken,\\n        uint256 oldDistributionFactorMantissa,\\n        uint256 newDistributionFactorMantissa\\n    );\\n\\n    /// @notice Emitted when bounty ratio is changed by admin\\n    event NewBountyRatio(uint256 oldBountyRatio, uint256 newBountyRatio);\\n\\n    function updateDistributionState(address _iToken, bool _isBorrow) external;\\n\\n    function updateReward(\\n        address _iToken,\\n        address _account,\\n        bool _isBorrow\\n    ) external;\\n\\n    function updateRewardBatch(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) external;\\n\\n    function claimReward(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) external;\\n\\n    function claimAllReward(address[] memory _holders) external;\\n\\n    function claimRewards(\\n        address[] memory _holders,\\n        address[] memory _suppliediTokens,\\n        address[] memory _borrowediTokens\\n    ) external;\\n\\n    /// @notice Emitted when reward of amount is distributed into account\\n    event RewardDistributed(\\n        address iToken,\\n        address account,\\n        uint256 amount,\\n        uint256 accountIndex\\n    );\\n\\n    function claimBounty(address _account, address _hunter) external;\\n\\n    /// @notice Emitted when bounty is claimed by a hunter\\n    event BountyClaimed(\\n        address rewardToken,\\n        address hunter,\\n        address account,\\n        uint256 bounty,\\n        uint256 reward\\n    );\\n}\\n\",\"keccak256\":\"0xfe6a638b069bf4e36a3b58c1831ab9a0c209cffdaeb68252abcf1704f7c832b2\",\"license\":\"MIT\"},\"src/Interfaces/IiToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IiToken {\\n    function name() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function isiToken() external returns (bool);\\n\\n    function borrowBalanceStored(address _user) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function balanceOfUnderlying(address _account) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function borrowSnapshot(\\n        address _account\\n    ) external view returns (uint256, uint256);\\n\\n    function mint(\\n        address _to,\\n        uint256 _amount,\\n        bool _refreshEligibility\\n    ) external;\\n\\n    function redeem(\\n        address _from,\\n        uint256 _redeemiToken,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function redeemUnderlying(\\n        address _from,\\n        uint256 _redeemiToken,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function borrow(uint256 _borrowAmount, bool refreshEligibility) external;\\n\\n    function repayBorrow(\\n        uint256 _repayAmount,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function repayBorrowBehalf(\\n        address _borrower,\\n        uint256 _repayAmount,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function liquidateBorrow(\\n        address _borrower,\\n        uint256 _repayAmount,\\n        address _assetCollateral,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function mintForSelfAndEnterMarket(\\n        uint256 _mintAmount,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function redeemFromSelfAndExitMarket(\\n        uint256 _redeemiToken,\\n        bool refreshEligibility\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd371f7bfb53f7453e217c9c869a502d7dc5f519c967f60a4062c77bbd15e39d5\",\"license\":\"MIT\"},\"src/Libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        _;\\n\\n        _initialized = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcbc7147c62a7be5a7bf4f195ad3dc07ca07f2b1de52b3e010b45ebdf17e9cc50\",\"license\":\"MIT\"},\"src/Libraries/Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\n */\\ncontract Ownable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    address payable public owner;\\n\\n    /**\\n     * @dev Returns the address of the current pending owner.\\n     */\\n    address payable public pendingOwner;\\n\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\n    event NewPendingOwner(\\n        address indexed oldPendingOwner,\\n        address indexed newPendingOwner\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal {\\n        owner = payable(msg.sender);\\n        emit NewOwner(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\n     * @param newPendingOwner New pending owner.\\n     */\\n    function _setPendingOwner(\\n        address payable newPendingOwner\\n    ) external onlyOwner {\\n        require(\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\n        );\\n\\n        // Gets current owner.\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Sets new pending owner.\\n        pendingOwner = newPendingOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n    }\\n\\n    /**\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\n     */\\n    function _acceptOwner() external {\\n        require(\\n            msg.sender == pendingOwner,\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\n        );\\n\\n        // Gets current values for events.\\n        address oldOwner = owner;\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Set the new contract owner.\\n        owner = pendingOwner;\\n\\n        // Clear the pendingOwner.\\n        pendingOwner = payable(address(0));\\n\\n        emit NewOwner(oldOwner, owner);\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x558d48351f76c1d19134d3a686b7ebca79ec9bb4b900f6aa8eaecd951885ca4c\",\"license\":\"MIT\"},\"src/Libraries/RatioMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary RatioMath {\\n    uint256 private constant BASE = 10 ** 18;\\n    uint256 private constant DOUBLE = 10 ** 36;\\n\\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x + (y - 1)) / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * y) / BASE;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * BASE) / y;\\n    }\\n\\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * (BASE) + (y - 1)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x5f2fee3fede7ea0fd09da82256284211cf6431cc40ad4be4055b0792955ac3b3\",\"license\":\"MIT\"},\"src/RewardDistributorManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./Libraries/RatioMath.sol\\\";\\n\\nimport \\\"./Libraries/Ownable.sol\\\";\\nimport \\\"./Libraries/Initializable.sol\\\";\\nimport \\\"./Interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./Interfaces/IController.sol\\\";\\nimport \\\"./Interfaces/IEligibilityManager.sol\\\";\\nimport \\\"./Interfaces/IiToken.sol\\\";\\nimport \\\"./Interfaces/Errors.sol\\\";\\n\\ncontract RewardDistributorManager is Initializable, Ownable {\\n    using RatioMath for uint256;\\n    using SafeCast for uint256;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    EnumerableSetUpgradeable.AddressSet internal rewardDistributors;\\n    IController public controller;\\n\\n    /// @notice the Eligibility Manager address where to query the eligibility of accounts\\n    IEligibilityManager public eligibilityManager;\\n\\n    /// @notice the Elibility of each accounts\\n    mapping(address => bool) public isEligible;\\n\\n    /// @notice the Eligible Total Supply of each iToken\\n    mapping(address => uint256) public eligibleTotalSupply;\\n\\n    /// @notice the Eligible Total Borrow Balance of each iToken\\n    mapping(address => uint256) public eligibleTotalBorrow;\\n\\n    /// @notice Emitted Eligible Total Supply changed\\n    event EligibleTotalSupplyChanged(address indexed iToken, int256 amount);\\n    /// @notice Emitted Eligible Total Borrow changed\\n    event EligibleTotalBorrowChanged(address indexed iToken, int256 amount);\\n\\n    /// @notice Emitted Eligibility Manager address is changed by admin\\n    event NewEligibilityManager(\\n        address oldEligibilityManager,\\n        address newEligibilityManager\\n    );\\n\\n    event AddRewardDistributor(address indexed _newRewardDistributor);\\n    event RemoveRewardDistributor(address indexed _oldRewardDistributor);\\n\\n    /// @notice Emitted Eligibility is changed\\n    event EligibilityChanged(address indexed account, bool eligibility);\\n\\n    constructor(IController _controller) {\\n        initialize(_controller);\\n    }\\n\\n    function initialize(IController _controller) public initializer {\\n        __Ownable_init();\\n\\n        if (!_controller.isController()) {\\n            revert RewardDistributorManager_initialize__InvalidController();\\n        }\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the controller.\\n     */\\n    modifier onlyController() {\\n        if (msg.sender != address(controller)) {\\n            revert RewardDistributorManager__NotController();\\n        }\\n        _;\\n    }\\n\\n    /*********************************/\\n    /******** Security Check *********/\\n    /*********************************/\\n\\n    /**\\n     * @notice Ensure this is a RewardDistributorManager contract.\\n     */\\n    function isRewardDistributorManager() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice set new eligibility manager address\\n     * @dev Admin function, only owner can call this\\n     * @param _newEligibilityManager the address of treasury\\n     */\\n    function _setEligibilityManager(\\n        IEligibilityManager _newEligibilityManager\\n    ) external onlyOwner {\\n        address _oldEligibilityManager = address(eligibilityManager);\\n        if (\\n            !IEligibilityManager(_newEligibilityManager)\\n                .isEligibilityManager() ||\\n            address(_newEligibilityManager) == _oldEligibilityManager\\n        ) {\\n            revert RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\\n        }\\n\\n        eligibilityManager = IEligibilityManager(_newEligibilityManager);\\n        emit NewEligibilityManager(\\n            _oldEligibilityManager,\\n            address(_newEligibilityManager)\\n        );\\n    }\\n\\n    function _addRewardDistributorInternal(\\n        address _rewardDistributor\\n    ) internal {\\n        if (!IRewardDistributor(_rewardDistributor).isRewardDistributor()) {\\n            revert RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\\n        }\\n\\n        if (rewardDistributors.add(_rewardDistributor)) {\\n            emit AddRewardDistributor(_rewardDistributor);\\n        } else {\\n            revert RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\\n                _rewardDistributor\\n            );\\n        }\\n    }\\n\\n    function _addRewardDistributor(\\n        address _rewardDistributor\\n    ) external onlyOwner {\\n        _addRewardDistributorInternal(_rewardDistributor);\\n    }\\n\\n    function _addRewardDistributors(\\n        address[] calldata _rewardDistributors\\n    ) external onlyOwner {\\n        uint256 _length = _rewardDistributors.length;\\n        for (uint256 _i; _i < _length; ) {\\n            _addRewardDistributorInternal(_rewardDistributors[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function _removeRewardDistributorInternal(\\n        address _rewardDistributor\\n    ) internal {\\n        if (rewardDistributors.remove(_rewardDistributor)) {\\n            emit RemoveRewardDistributor(_rewardDistributor);\\n        } else {\\n            revert RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\\n                _rewardDistributor\\n            );\\n        }\\n    }\\n\\n    function _removeRewardDistributor(\\n        address _rewardDistributor\\n    ) external onlyOwner {\\n        _removeRewardDistributorInternal(_rewardDistributor);\\n    }\\n\\n    function _removeRewardDistributors(\\n        address[] calldata _rewardDistributors\\n    ) external onlyOwner {\\n        uint256 _length = _rewardDistributors.length;\\n        for (uint256 _i; _i < _length; ) {\\n            _removeRewardDistributorInternal(_rewardDistributors[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function getRewardDistributors() external view returns (address[] memory) {\\n        return rewardDistributors.values();\\n    }\\n\\n    function getRewardDistributorsLength() external view returns (uint256) {\\n        return rewardDistributors.length();\\n    }\\n\\n    function updateReward(\\n        address _iToken,\\n        address _account,\\n        bool _isBorrow\\n    ) public {\\n        uint256 _length = rewardDistributors.length();\\n\\n        for (uint256 _i; _i < _length; ) {\\n            IRewardDistributor(rewardDistributors.at(_i)).updateReward(\\n                _iToken,\\n                _account,\\n                _isBorrow\\n            );\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function updateDistributionState(address _iToken, bool _isBorrow) public {\\n        uint256 _length = rewardDistributors.length();\\n        for (uint256 _i; _i < _length; ) {\\n            IRewardDistributor(rewardDistributors.at(_i))\\n                .updateDistributionState(_iToken, _isBorrow);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function claimReward(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) external {\\n        uint256 _length = rewardDistributors.length();\\n        for (uint256 _i; _i < _length; ) {\\n            IRewardDistributor(rewardDistributors.at(_i)).claimReward(\\n                _holders,\\n                _iTokens\\n            );\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n\\n        updateEligibleBalances(_holders);\\n    }\\n\\n    /**\\n     * @notice Claim reward accrued in iTokens by the holders\\n     * @param _holders The account to claim for\\n     * @param _suppliediTokens The _suppliediTokens to claim from\\n     * @param _borrowediTokens The _borrowediTokens to claim from\\n     */\\n    function claimRewards(\\n        address[] memory _holders,\\n        address[] memory _suppliediTokens,\\n        address[] memory _borrowediTokens\\n    ) external {\\n        uint256 _length = rewardDistributors.length();\\n        for (uint256 _i; _i < _length; ) {\\n            IRewardDistributor(rewardDistributors.at(_i)).claimRewards(\\n                _holders,\\n                _suppliediTokens,\\n                _borrowediTokens\\n            );\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n\\n        updateEligibleBalances(_holders);\\n    }\\n\\n    /**\\n     * @notice Claim reward accrued in all iTokens by the holders\\n     * @param _holders The account to claim for\\n     */\\n    function claimAllReward(address[] memory _holders) external {\\n        uint256 _length = rewardDistributors.length();\\n        for (uint256 _i; _i < _length; ) {\\n            IRewardDistributor(rewardDistributors.at(_i)).claimAllReward(\\n                _holders\\n            );\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n\\n        updateEligibleBalances(_holders);\\n    }\\n\\n    function _addRecipient(\\n        address /* _iToken */,\\n        uint256 /* _distributionFactor*/\\n    ) external onlyController {}\\n\\n    function eligibleSupply(\\n        address _iToken,\\n        address _account\\n    ) public view returns (uint256 _eligibleSupply) {\\n        if (isEligible[_account]) {\\n            _eligibleSupply = IiToken(_iToken).balanceOf(_account);\\n        }\\n    }\\n\\n    function eligibleBorrow(\\n        address _iToken,\\n        address _account\\n    ) public view returns (uint256 _eligibleBorrow) {\\n        if (isEligible[_account]) {\\n            (uint256 _borrowBalance, uint256 _borrowIndex) = IiToken(_iToken)\\n                .borrowSnapshot(_account);\\n            _eligibleBorrow = _borrowIndex > 0\\n                ? _borrowBalance.rdiv(_borrowIndex)\\n                : 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook function after iToken `mint()`\\n     * Will `revert()` if any operation fails\\n     * @param _iToken The iToken being minted\\n     * @param _minter The account which would get the minted tokens\\n     * @param _mintedAmount The amount of iToken being minted\\n     */\\n    function afterMint(\\n        address _iToken,\\n        address _minter,\\n        uint256 /* _mintAmount */,\\n        uint256 _mintedAmount\\n    ) external onlyController {\\n        if (isEligible[_minter]) {\\n            eligibleTotalSupply[_iToken] += _mintedAmount;\\n            emit EligibleTotalSupplyChanged(_iToken, _mintedAmount.toInt256());\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook function after iToken `redeem()`\\n     * Will `revert()` if any operation fails\\n     * @param _iToken The iToken being redeemed\\n     * @param _redeemer The account which redeemed iToken\\n     * @param _redeemAmount  The amount of iToken being redeemed\\n     */\\n    function afterRedeem(\\n        address _iToken,\\n        address _redeemer,\\n        uint256 _redeemAmount,\\n        uint256 /* _redeemedUnderlying */\\n    ) external onlyController {\\n        if (isEligible[_redeemer]) {\\n            eligibleTotalSupply[_iToken] -= _redeemAmount;\\n            emit EligibleTotalSupplyChanged(\\n                _iToken,\\n                -(_redeemAmount.toInt256())\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook function after iToken `borrow()`\\n     * Will `revert()` if any operation fails\\n     * @param _iToken The iToken being borrewd\\n     * @param _borrower The account which borrowed iToken\\n     * @param _borrowedAmount  The amount of underlying being borrowed\\n     */\\n    function afterBorrow(\\n        address _iToken,\\n        address _borrower,\\n        uint256 _borrowedAmount\\n    ) external onlyController {\\n        if (isEligible[_borrower]) {\\n            uint256 _borrowed = _borrowedAmount.rdiv(\\n                IiToken(_iToken).borrowIndex()\\n            );\\n\\n            eligibleTotalBorrow[_iToken] += _borrowed;\\n            emit EligibleTotalBorrowChanged(_iToken, _borrowed.toInt256());\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook function after iToken `repayBorrow()`\\n     * Will `revert()` if any operation fails\\n     * @param _iToken The iToken being repaid\\n     * #param _payer The account which would repay\\n     * @param _borrower The account which has borrowed\\n     * @param _repayAmount  The amount of underlying being repaied\\n     */\\n    function afterRepayBorrow(\\n        address _iToken,\\n        address /* _payer */,\\n        address _borrower,\\n        uint256 _repayAmount\\n    ) external onlyController {\\n        if (isEligible[_borrower]) {\\n            uint256 _repaid = _repayAmount.rdiv(IiToken(_iToken).borrowIndex());\\n\\n            if (eligibleTotalBorrow[_iToken] > _repaid) {\\n                eligibleTotalBorrow[_iToken] -= _repaid;\\n            } else {\\n                // Rounding errors could leading to mismatch to sum(borrow) and totalBorrow\\n                // Just reset eligibleTotalBorrow\\n                _repaid = eligibleTotalBorrow[_iToken];\\n                eligibleTotalBorrow[_iToken] = 0;\\n            }\\n\\n            emit EligibleTotalBorrowChanged(_iToken, -(_repaid.toInt256()));\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook function after iToken `liquidateBorrow()`\\n     * Will `revert()` if any operation fails\\n     * #param _iTokenBorrowed The iToken was borrowed\\n     * #param _iTokenCollateral The collateral iToken to be seized\\n     * #param _liquidator The account which would repay and seize\\n     * #param _borrower The account which has borrowed\\n     * #param _repaidAmount  The amount of underlying being repaied\\n     * #param _seizedAmount  The amount of collateral being seized\\n     */\\n    function afterLiquidateBorrow(\\n        address /* _iTokenBorrowed */,\\n        address /* _iTokenCollateral */,\\n        address /* _liquidator */,\\n        address /* _borrower */,\\n        uint256 /* _repaidAmount */,\\n        uint256 /* _seizedAmount */\\n    ) external onlyController {}\\n\\n    /**\\n     * @notice Hook function after iToken `seize()`\\n     * Will `revert()` if any operation fails\\n     * @param _iTokenCollateral The collateral iToken to be seized\\n     * #param _iTokenBorrowed The iToken was borrowed\\n     * @param _liquidator The account which has repaid and seized\\n     * @param _borrower The account which has borrowed\\n     * @param _seizedAmount  The amount of collateral being seized\\n     */\\n    function afterSeize(\\n        address _iTokenCollateral,\\n        address /* _iTokenBorrowed */,\\n        address _liquidator,\\n        address _borrower,\\n        uint256 _seizedAmount\\n    ) external onlyController {\\n        if (isEligible[_borrower]) {\\n            eligibleTotalSupply[_iTokenCollateral] -= _seizedAmount;\\n            emit EligibleTotalSupplyChanged(\\n                _iTokenCollateral,\\n                -(_seizedAmount.toInt256())\\n            );\\n        }\\n\\n        if (isEligible[_liquidator]) {\\n            eligibleTotalSupply[_iTokenCollateral] += _seizedAmount;\\n            emit EligibleTotalSupplyChanged(\\n                _iTokenCollateral,\\n                (_seizedAmount.toInt256())\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook function after iToken `transfer()`\\n     * Will `revert()` if any operation fails\\n     * @param _iToken The iToken was transfered\\n     * @param _from The account was transfer from\\n     * @param _to The account was transfer to\\n     * @param _amount  The amount was transfered\\n     */\\n    function afterTransfer(\\n        address _iToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyController {\\n        if (isEligible[_from]) {\\n            eligibleTotalSupply[_iToken] -= _amount;\\n            emit EligibleTotalSupplyChanged(_iToken, -(_amount.toInt256()));\\n        }\\n\\n        if (isEligible[_to]) {\\n            eligibleTotalSupply[_iToken] += _amount;\\n            emit EligibleTotalSupplyChanged(_iToken, (_amount.toInt256()));\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook function after iToken `flashloan()`\\n     * Will `revert()` if any operation fails\\n     * #param _iToken The iToken was flashloaned\\n     * #param _to The account flashloan transfer to\\n     * #param _amount  The amount was flashloaned\\n     */\\n    function afterFlashloan(\\n        address /* _iToken */,\\n        address /* _to */,\\n        uint256 /* _amount */\\n    ) external onlyController {}\\n\\n    function _claimBounty(address _account, address _hunter) internal {\\n        uint256 _length = rewardDistributors.length();\\n        for (uint256 _i; _i < _length; ) {\\n            IRewardDistributor(rewardDistributors.at(_i)).claimBounty(\\n                _account,\\n                _hunter\\n            );\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function for updateEligibleBalance(s)\\n     * @param _account The _account whose Eligibity will be updated\\n     * @param _iTokens The list of iTokens of which eligible balances will be updated\\n     */\\n    function _updateEligibleBalance(\\n        address _account,\\n        address[] memory _iTokens,\\n        address _hunter\\n    ) internal {\\n        (bool _currentEligibility, bool status) = IEligibilityManager(\\n            eligibilityManager\\n        ).isEligible(_account);\\n\\n        if (!status) {\\n            revert RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\\n        }\\n\\n        if (_currentEligibility == isEligible[_account]) return;\\n\\n        uint256 _length = _iTokens.length;\\n        for (uint256 _i; _i < _length; ) {\\n            address _iToken = _iTokens[_i];\\n\\n            uint256 _supply = IiToken(_iToken).balanceOf(_account);\\n            (uint256 _borrowBalance, uint256 _borrowIndex) = IiToken(_iToken)\\n                .borrowSnapshot(_account);\\n            uint256 _borrow = _borrowIndex > 0\\n                ? _borrowBalance.rdiv(_borrowIndex)\\n                : 0;\\n\\n            if (_supply != 0) {\\n                updateDistributionState(_iToken, false);\\n                updateReward(_iToken, _account, false);\\n            }\\n\\n            if (_borrow != 0) {\\n                updateDistributionState(_iToken, true);\\n                updateReward(_iToken, _account, true);\\n            }\\n\\n            if (_currentEligibility) {\\n                // Ineligible => Eligible\\n                if (_supply != 0) {\\n                    eligibleTotalSupply[_iToken] += _supply;\\n\\n                    emit EligibleTotalSupplyChanged(\\n                        _iToken,\\n                        _supply.toInt256()\\n                    );\\n                }\\n\\n                if (_borrow != 0) {\\n                    eligibleTotalBorrow[_iToken] += _borrow;\\n                    emit EligibleTotalBorrowChanged(\\n                        _iToken,\\n                        _borrow.toInt256()\\n                    );\\n                }\\n            } else {\\n                // Eligible => Ineligible\\n                if (_supply != 0) {\\n                    eligibleTotalSupply[_iToken] -= _supply;\\n                    emit EligibleTotalSupplyChanged(\\n                        _iToken,\\n                        -(_supply.toInt256())\\n                    );\\n                }\\n\\n                if (_borrow != 0) {\\n                    if (eligibleTotalBorrow[_iToken] > _borrow) {\\n                        eligibleTotalBorrow[_iToken] -= _borrow;\\n                    } else {\\n                        // Rounding errors could leading to mismatch to sum(borrow) and totalBorrow\\n                        // Just reset eligibleTotalBorrow\\n                        _borrow = eligibleTotalBorrow[_iToken];\\n                        eligibleTotalBorrow[_iToken] = 0;\\n                    }\\n                    emit EligibleTotalBorrowChanged(\\n                        _iToken,\\n                        -(_borrow.toInt256())\\n                    );\\n                }\\n            }\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n\\n        isEligible[_account] = _currentEligibility;\\n        emit EligibilityChanged(_account, _currentEligibility);\\n\\n        if (!_currentEligibility && _hunter != address(0)) {\\n            _claimBounty(_account, _hunter);\\n        }\\n    }\\n\\n    function updateEligibleBalance(address _account) external {\\n        _updateEligibleBalance(\\n            _account,\\n            controller.getAlliTokens(),\\n            address(0)\\n        );\\n    }\\n\\n    function updateEligibleBalances(address[] memory _accounts) public {\\n        address[] memory _iTokens = controller.getAlliTokens();\\n\\n        uint256 _len = _accounts.length;\\n        for (uint256 j = 0; j < _len; j++) {\\n            _updateEligibleBalance(_accounts[j], _iTokens, address(0));\\n        }\\n    }\\n\\n    function claimBounty(address[] calldata _accounts) external {\\n        address[] memory _iTokens = controller.getAlliTokens();\\n\\n        uint256 _len = _accounts.length;\\n        for (uint256 j = 0; j < _len; j++) {\\n            _updateEligibleBalance(_accounts[j], _iTokens, msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc189f007ef95f6f13b13c79a0aefd5c9d90d68684297dea988e3c3796137fa9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002c7838038062002c788339810160408190526200003491620001b9565b6200003f8162000046565b506200020f565b60005460ff1615620000b55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b620000bf62000171565b806001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001249190620001eb565b6200014257604051638da904cb60e01b815260040160405180910390fd5b603680546001600160a01b0319166001600160a01b03929092169190911790556000805460ff19166001179055565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b600060208284031215620001cc57600080fd5b81516001600160a01b0381168114620001e457600080fd5b9392505050565b600060208284031215620001fe57600080fd5b81518015158114620001e457600080fd5b612a59806200021f6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638ffe4f2511610130578063caece2fe116100b8578063efced3851161007c578063efced385146104e3578063f079420a146104f6578063f32b973e14610509578063f77c47911461051c578063fc4d33f91461052f57600080fd5b8063caece2fe14610490578063de65f41b146104a3578063e30c3978146104b6578063e33af48a146104c9578063eb5bf95d146104dc57600080fd5b8063a82e84e9116100ff578063a82e84e914610431578063b2a6df7414610444578063bdfa0c9914610457578063c4d66de81461046a578063ca498ad61461047d57600080fd5b80638ffe4f25146103e5578063990f7fbd146103f85780639c010dcb1461040b578063a2ddeb851461041e57600080fd5b80635f7bc006116101b35780636e96dfd7116101825780636e96dfd714610374578063772fb4f6146103875780637829db011461039a5780637d3572fd146103ba5780638da5cb5b146103cd57600080fd5b80635f7bc0061461030657806361252fd1146103195780636471ffa31461032e57806366e305fd1461034157600080fd5b8063263e0b9c116101fa578063263e0b9c146102a7578063337fbfa8146102ba57806342e77284146102cd5780635658fec3146102e057806359c18a31146102f357600080fd5b8063053f87771461022c5780630d75a31a146102475780630d7f67a21461026757806314c77faa1461027c575b600080fd5b610234610537565b6040519081526020015b60405180910390f35b61023461025536600461219c565b60396020526000908152604090205481565b61027a6102753660046121b9565b610548565b005b60375461028f906001600160a01b031681565b6040516001600160a01b03909116815260200161023e565b61027a6102b536600461219c565b610687565b61027a6102c836600461219c565b610710565b61027a6102db3660046122fc565b610751565b61027a6102ee366004612339565b6107eb565b61027a610301366004612365565b610816565b61027a6103143660046123da565b61088e565b6103216108c1565b60405161023e919061248c565b61023461033c36600461249f565b6108cd565b61036461034f36600461219c565b60386020526000908152604090205460ff1681565b604051901515815260200161023e565b61027a61038236600461219c565b610984565b61023461039536600461249f565b610ab1565b6102346103a836600461219c565b603a6020526000908152604090205481565b61027a6103c83660046124e6565b610b43565b60005461028f9061010090046001600160a01b031681565b61027a6103f3366004612365565b610bdf565b61027a61040636600461219c565b610c51565b61027a610419366004612365565b610d8a565b61027a61042c366004612531565b610e4c565b61027a61043f366004612577565b610f07565b61027a61045236600461219c565b610fa1565b61027a6104653660046125ff565b610fd9565b61027a61047836600461219c565b611076565b61027a61048b366004612663565b611196565b61027a61049e3660046126a4565b6112a4565b61027a6104b1366004612531565b611338565b60015461028f906001600160a01b031681565b61027a6104d73660046126d2565b6113d3565b6001610364565b61027a6104f1366004612663565b6114d2565b61027a6105043660046126d2565b6114fd565b61027a6105173660046122fc565b61162c565b60365461028f906001600160a01b031681565b61027a6116e4565b600061054360346117fa565b905090565b6036546001600160a01b0316331461057357604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03821660009081526038602052604090205460ff16156105fe576001600160a01b038516600090815260396020526040812080548392906105bc908490612739565b90915550506001600160a01b0385166000805160206129e48339815191526105e383611804565b6105ec90612750565b60405190815260200160405180910390a25b6001600160a01b03831660009081526038602052604090205460ff1615610680576001600160a01b0385166000908152603960205260408120805483929061064790849061276d565b90915550506001600160a01b0385166000805160206129e483398151915261066e83611804565b60405190815260200160405180910390a25b5050505050565b61070d81603660009054906101000a90046001600160a01b03166001600160a01b03166360a8a9316040518163ffffffff1660e01b8152600401600060405180830381865afa1580156106de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107069190810190612785565b6000611872565b50565b60005461010090046001600160a01b031633146107485760405162461bcd60e51b815260040161073f9061281f565b60405180910390fd5b61070d81611d2c565b600061075d60346117fa565b905060005b818110156107dd57610775603482611d97565b6001600160a01b03166342e77284846040518263ffffffff1660e01b81526004016107a0919061248c565b600060405180830381600087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b50505050806001019050610762565b506107e78261162c565b5050565b6036546001600160a01b031633146107e757604051633bd4919b60e11b815260040160405180910390fd5b60005461010090046001600160a01b031633146108455760405162461bcd60e51b815260040161073f9061281f565b8060005b818110156108885761088084848381811061086657610866612861565b905060200201602081019061087b919061219c565b611da3565b600101610849565b50505050565b6036546001600160a01b031633146108b957604051633bd4919b60e11b815260040160405180910390fd5b505050505050565b60606105436034611e8d565b6001600160a01b03811660009081526038602052604081205460ff161561097e576040516306fa66c360e31b81526001600160a01b03838116600483015260009182918616906337d33618906024016040805180830381865afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190612877565b915091506000811161096f576000610979565b6109798282611e9a565b925050505b92915050565b60005461010090046001600160a01b031633146109b35760405162461bcd60e51b815260040161073f9061281f565b6001600160a01b038116158015906109d957506001546001600160a01b03828116911614155b610a5f5760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a40161073f565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b6001600160a01b03811660009081526038602052604081205460ff161561097e576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c919061289b565b9392505050565b6000610b4f60346117fa565b905060005b8181101561068057610b67603482611d97565b604051637d3572fd60e01b81526001600160a01b038781166004830152868116602483015285151560448301529190911690637d3572fd90606401600060405180830381600087803b158015610bbc57600080fd5b505af1158015610bd0573d6000803e3d6000fd5b50505050806001019050610b54565b60005461010090046001600160a01b03163314610c0e5760405162461bcd60e51b815260040161073f9061281f565b8060005b8181101561088857610c49848483818110610c2f57610c2f612861565b9050602002016020810190610c44919061219c565b611d2c565b600101610c12565b60005461010090046001600160a01b03163314610c805760405162461bcd60e51b815260040161073f9061281f565b60375460408051634b52d08760e11b815290516001600160a01b03928316928416916396a5a10e9160048083019260209291908290030181865afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf091906128b4565b1580610d0d5750806001600160a01b0316826001600160a01b0316145b15610d2b576040516369f6977760e11b815260040160405180910390fd5b603780546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fdd1b73e02786644d6e9994c9d513f1058320c4ff857e1a76ded4c77f83ab3ea9910160405180910390a15050565b603654604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa158015610dd3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dfb9190810190612785565b90508160005b8181101561068057610e3a858583818110610e1e57610e1e612861565b9050602002016020810190610e33919061219c565b8433611872565b80610e44816128d1565b915050610e01565b6036546001600160a01b03163314610e7757604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526038602052604090205460ff1615610888576001600160a01b03841660009081526039602052604081208054849290610ec0908490612739565b90915550506001600160a01b0384166000805160206129e4833981519152610ee784611804565b610ef090612750565b60405190815260200160405180910390a250505050565b6000610f1360346117fa565b905060005b81811015610f9757610f2b603482611d97565b6001600160a01b031663a82e84e98686866040518463ffffffff1660e01b8152600401610f5a939291906128ec565b600060405180830381600087803b158015610f7457600080fd5b505af1158015610f88573d6000803e3d6000fd5b50505050806001019050610f18565b506108888461162c565b60005461010090046001600160a01b03163314610fd05760405162461bcd60e51b815260040161073f9061281f565b61070d81611da3565b6000610fe560346117fa565b905060005b8181101561106757610ffd603482611d97565b6001600160a01b031663bdfa0c9985856040518363ffffffff1660e01b815260040161102a92919061292f565b600060405180830381600087803b15801561104457600080fd5b505af1158015611058573d6000803e3d6000fd5b50505050806001019050610fea565b506110718361162c565b505050565b60005460ff16156110e05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161073f565b6110e8611eb9565b806001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a91906128b4565b61116757604051638da904cb60e01b815260040160405180910390fd5b603680546001600160a01b0319166001600160a01b03929092169190911790556000805460ff19166001179055565b6036546001600160a01b031633146111c157604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03821660009081526038602052604090205460ff1615611071576000611250846001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611225573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611249919061289b565b8390611e9a565b6001600160a01b0385166000908152603a602052604081208054929350839290919061127d90849061276d565b90915550506001600160a01b038416600080516020612a04833981519152610ef083611804565b60006112b060346117fa565b905060005b81811015610888576112c8603482611d97565b604051636576717f60e11b81526001600160a01b0386811660048301528515156024830152919091169063caece2fe90604401600060405180830381600087803b15801561131557600080fd5b505af1158015611329573d6000803e3d6000fd5b505050508060010190506112b5565b6036546001600160a01b0316331461136357604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526038602052604090205460ff1615610888576001600160a01b038416600090815260396020526040812080548392906113ac90849061276d565b90915550506001600160a01b0384166000805160206129e4833981519152610ef083611804565b6036546001600160a01b031633146113fe57604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526038602052604090205460ff1615611489576001600160a01b03841660009081526039602052604081208054839290611447908490612739565b90915550506001600160a01b0384166000805160206129e483398151915261146e83611804565b61147790612750565b60405190815260200160405180910390a25b6001600160a01b03821660009081526038602052604090205460ff1615610888576001600160a01b038416600090815260396020526040812080548392906113ac90849061276d565b6036546001600160a01b0316331461107157604051633bd4919b60e11b815260040160405180910390fd5b6036546001600160a01b0316331461152857604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03821660009081526038602052604090205460ff161561088857600061158c856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611225573d6000803e3d6000fd5b6001600160a01b0386166000908152603a60205260409020549091508110156115e2576001600160a01b0385166000908152603a6020526040812080548392906115d7908490612739565b909155506116019050565b506001600160a01b0384166000908152603a6020526040812080549190555b846001600160a01b0316600080516020612a0483398151915261162383611804565b61066e90612750565b603654604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa158015611675573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261169d9190810190612785565b825190915060005b81811015610888576116d28482815181106116c2576116c2612861565b6020026020010151846000611872565b806116dc816128d1565b9150506116a5565b6001546001600160a01b0316331461174c5760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b606482015260840161073f565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b600061097e825490565b60006001600160ff1b0382111561186e5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161073f565b5090565b6037546040516366e305fd60e01b81526001600160a01b03858116600483015260009283929116906366e305fd9060240160408051808303816000875af11580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e5919061295d565b91509150806119075760405163f289751b60e01b815260040160405180910390fd5b6001600160a01b03851660009081526038602052604090205460ff1615158215151415611935575050505050565b835160005b81811015611cab57600086828151811061195657611956612861565b60209081029190910101516040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156119ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d1919061289b565b6040516306fa66c360e31b81526001600160a01b038b811660048301529192506000918291908516906337d33618906024016040805180830381865afa158015611a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a439190612877565b915091506000808211611a57576000611a61565b611a618383611e9a565b90508315611a8057611a748560006112a4565b611a80858d6000610b43565b8015611a9d57611a918560016112a4565b611a9d858d6001610b43565b8815611b76578315611b0a576001600160a01b03851660009081526039602052604081208054869290611ad190849061276d565b90915550506001600160a01b0385166000805160206129e4833981519152611af886611804565b60405190815260200160405180910390a25b8015611b71576001600160a01b0385166000908152603a602052604081208054839290611b3890849061276d565b90915550506001600160a01b038516600080516020612a04833981519152611b5f83611804565b60405190815260200160405180910390a25b611c9b565b8315611be6576001600160a01b03851660009081526039602052604081208054869290611ba4908490612739565b90915550506001600160a01b0385166000805160206129e4833981519152611bcb86611804565b611bd490612750565b60405190815260200160405180910390a25b8015611c9b576001600160a01b0385166000908152603a6020526040902054811015611c3f576001600160a01b0385166000908152603a602052604081208054839290611c34908490612739565b90915550611c5e9050565b506001600160a01b0384166000908152603a6020526040812080549190555b846001600160a01b0316600080516020612a04833981519152611c8083611804565b611c8990612750565b60405190815260200160405180910390a25b856001019550505050505061193a565b506001600160a01b038616600081815260386020908152604091829020805460ff191687151590811790915591519182527f6ae14d48df6afe3cad37dc9d491e4040245b769277746a4fbfe211807db71568910160405180910390a282158015611d1d57506001600160a01b03841615155b156108b9576108b98685611f01565b611d37603482611f95565b15611d73576040516001600160a01b038216907f202daff40f5262ad5e95940c6c7a62bc0117d839570a20c66268dc0983ef614390600090a250565b604051632c24396160e21b81526001600160a01b038216600482015260240161073f565b6000610b3c8383611faa565b806001600160a01b031663ff10302a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0591906128b4565b611e2257604051633afc261960e21b815260040160405180910390fd5b611e2d603482611fd4565b15611e69576040516001600160a01b038216907fafd92645c06c0f746b45815ad30af48dfbac17647e860d7be5e8bcaded9498a990600090a250565b6040516372dddcf760e01b81526001600160a01b038216600482015260240161073f565b60606000610b3c83611fe9565b600081611eaf670de0b6b3a76400008561298c565b610b3c91906129ab565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6000611f0d60346117fa565b905060005b8181101561088857611f25603482611d97565b60405163233ac4f560e21b81526001600160a01b03868116600483015285811660248301529190911690638ceb13d490604401600060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b50505050806001019050611f12565b6000610b3c836001600160a01b038416612045565b6000826000018281548110611fc157611fc1612861565b9060005260206000200154905092915050565b6000610b3c836001600160a01b038416612138565b60608160000180548060200260200160405190810160405280929190818152602001828054801561203957602002820191906000526020600020905b815481526020019060010190808311612025575b50505050509050919050565b6000818152600183016020526040812054801561212e576000612069600183612739565b855490915060009061207d90600190612739565b90508181146120e257600086600001828154811061209d5761209d612861565b90600052602060002001549050808760000184815481106120c0576120c0612861565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120f3576120f36129cd565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061097e565b600091505061097e565b600081815260018301602052604081205461217f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561097e565b50600061097e565b6001600160a01b038116811461070d57600080fd5b6000602082840312156121ae57600080fd5b8135610b3c81612187565b600080600080600060a086880312156121d157600080fd5b85356121dc81612187565b945060208601356121ec81612187565b935060408601356121fc81612187565b9250606086013561220c81612187565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561225c5761225c61221d565b604052919050565b600067ffffffffffffffff82111561227e5761227e61221d565b5060051b60200190565b600082601f83011261229957600080fd5b813560206122ae6122a983612264565b612233565b82815260059290921b840181019181810190868411156122cd57600080fd5b8286015b848110156122f15780356122e481612187565b83529183019183016122d1565b509695505050505050565b60006020828403121561230e57600080fd5b813567ffffffffffffffff81111561232557600080fd5b61233184828501612288565b949350505050565b6000806040838503121561234c57600080fd5b823561235781612187565b946020939093013593505050565b6000806020838503121561237857600080fd5b823567ffffffffffffffff8082111561239057600080fd5b818501915085601f8301126123a457600080fd5b8135818111156123b357600080fd5b8660208260051b85010111156123c857600080fd5b60209290920196919550909350505050565b60008060008060008060c087890312156123f357600080fd5b86356123fe81612187565b9550602087013561240e81612187565b9450604087013561241e81612187565b9350606087013561242e81612187565b9598949750929560808101359460a0909101359350915050565b600081518084526020808501945080840160005b838110156124815781516001600160a01b03168752958201959082019060010161245c565b509495945050505050565b602081526000610b3c6020830184612448565b600080604083850312156124b257600080fd5b82356124bd81612187565b915060208301356124cd81612187565b809150509250929050565b801515811461070d57600080fd5b6000806000606084860312156124fb57600080fd5b833561250681612187565b9250602084013561251681612187565b91506040840135612526816124d8565b809150509250925092565b6000806000806080858703121561254757600080fd5b843561255281612187565b9350602085013561256281612187565b93969395505050506040820135916060013590565b60008060006060848603121561258c57600080fd5b833567ffffffffffffffff808211156125a457600080fd5b6125b087838801612288565b945060208601359150808211156125c657600080fd5b6125d287838801612288565b935060408601359150808211156125e857600080fd5b506125f586828701612288565b9150509250925092565b6000806040838503121561261257600080fd5b823567ffffffffffffffff8082111561262a57600080fd5b61263686838701612288565b9350602085013591508082111561264c57600080fd5b5061265985828601612288565b9150509250929050565b60008060006060848603121561267857600080fd5b833561268381612187565b9250602084013561269381612187565b929592945050506040919091013590565b600080604083850312156126b757600080fd5b82356126c281612187565b915060208301356124cd816124d8565b600080600080608085870312156126e857600080fd5b84356126f381612187565b9350602085013561270381612187565b9250604085013561271381612187565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b60008282101561274b5761274b612723565b500390565b6000600160ff1b82141561276657612766612723565b5060000390565b6000821982111561278057612780612723565b500190565b6000602080838503121561279857600080fd5b825167ffffffffffffffff8111156127af57600080fd5b8301601f810185136127c057600080fd5b80516127ce6122a982612264565b81815260059190911b820183019083810190878311156127ed57600080fd5b928401925b8284101561281457835161280581612187565b825292840192908401906127f2565b979650505050505050565b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561288a57600080fd5b505080516020909101519092909150565b6000602082840312156128ad57600080fd5b5051919050565b6000602082840312156128c657600080fd5b8151610b3c816124d8565b60006000198214156128e5576128e5612723565b5060010190565b6060815260006128ff6060830186612448565b82810360208401526129118186612448565b905082810360408401526129258185612448565b9695505050505050565b6040815260006129426040830185612448565b82810360208401526129548185612448565b95945050505050565b6000806040838503121561297057600080fd5b825161297b816124d8565b60208401519092506124cd816124d8565b60008160001904831182151516156129a6576129a6612723565b500290565b6000826129c857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfecd176b67ded217ac36a5e1095012e7ce0d043ca282fa84939737c6c8cada36fd7ffb984b198d913a612f0c4290e127a301b6a5c36b5d6a70c19e26cdd567bec7a26469706673582212203d81e12e64a7badbee2690e260e6fe7ad34fb3c634abe2bec3e09a328af9db3164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80638ffe4f2511610130578063caece2fe116100b8578063efced3851161007c578063efced385146104e3578063f079420a146104f6578063f32b973e14610509578063f77c47911461051c578063fc4d33f91461052f57600080fd5b8063caece2fe14610490578063de65f41b146104a3578063e30c3978146104b6578063e33af48a146104c9578063eb5bf95d146104dc57600080fd5b8063a82e84e9116100ff578063a82e84e914610431578063b2a6df7414610444578063bdfa0c9914610457578063c4d66de81461046a578063ca498ad61461047d57600080fd5b80638ffe4f25146103e5578063990f7fbd146103f85780639c010dcb1461040b578063a2ddeb851461041e57600080fd5b80635f7bc006116101b35780636e96dfd7116101825780636e96dfd714610374578063772fb4f6146103875780637829db011461039a5780637d3572fd146103ba5780638da5cb5b146103cd57600080fd5b80635f7bc0061461030657806361252fd1146103195780636471ffa31461032e57806366e305fd1461034157600080fd5b8063263e0b9c116101fa578063263e0b9c146102a7578063337fbfa8146102ba57806342e77284146102cd5780635658fec3146102e057806359c18a31146102f357600080fd5b8063053f87771461022c5780630d75a31a146102475780630d7f67a21461026757806314c77faa1461027c575b600080fd5b610234610537565b6040519081526020015b60405180910390f35b61023461025536600461219c565b60396020526000908152604090205481565b61027a6102753660046121b9565b610548565b005b60375461028f906001600160a01b031681565b6040516001600160a01b03909116815260200161023e565b61027a6102b536600461219c565b610687565b61027a6102c836600461219c565b610710565b61027a6102db3660046122fc565b610751565b61027a6102ee366004612339565b6107eb565b61027a610301366004612365565b610816565b61027a6103143660046123da565b61088e565b6103216108c1565b60405161023e919061248c565b61023461033c36600461249f565b6108cd565b61036461034f36600461219c565b60386020526000908152604090205460ff1681565b604051901515815260200161023e565b61027a61038236600461219c565b610984565b61023461039536600461249f565b610ab1565b6102346103a836600461219c565b603a6020526000908152604090205481565b61027a6103c83660046124e6565b610b43565b60005461028f9061010090046001600160a01b031681565b61027a6103f3366004612365565b610bdf565b61027a61040636600461219c565b610c51565b61027a610419366004612365565b610d8a565b61027a61042c366004612531565b610e4c565b61027a61043f366004612577565b610f07565b61027a61045236600461219c565b610fa1565b61027a6104653660046125ff565b610fd9565b61027a61047836600461219c565b611076565b61027a61048b366004612663565b611196565b61027a61049e3660046126a4565b6112a4565b61027a6104b1366004612531565b611338565b60015461028f906001600160a01b031681565b61027a6104d73660046126d2565b6113d3565b6001610364565b61027a6104f1366004612663565b6114d2565b61027a6105043660046126d2565b6114fd565b61027a6105173660046122fc565b61162c565b60365461028f906001600160a01b031681565b61027a6116e4565b600061054360346117fa565b905090565b6036546001600160a01b0316331461057357604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03821660009081526038602052604090205460ff16156105fe576001600160a01b038516600090815260396020526040812080548392906105bc908490612739565b90915550506001600160a01b0385166000805160206129e48339815191526105e383611804565b6105ec90612750565b60405190815260200160405180910390a25b6001600160a01b03831660009081526038602052604090205460ff1615610680576001600160a01b0385166000908152603960205260408120805483929061064790849061276d565b90915550506001600160a01b0385166000805160206129e483398151915261066e83611804565b60405190815260200160405180910390a25b5050505050565b61070d81603660009054906101000a90046001600160a01b03166001600160a01b03166360a8a9316040518163ffffffff1660e01b8152600401600060405180830381865afa1580156106de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107069190810190612785565b6000611872565b50565b60005461010090046001600160a01b031633146107485760405162461bcd60e51b815260040161073f9061281f565b60405180910390fd5b61070d81611d2c565b600061075d60346117fa565b905060005b818110156107dd57610775603482611d97565b6001600160a01b03166342e77284846040518263ffffffff1660e01b81526004016107a0919061248c565b600060405180830381600087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b50505050806001019050610762565b506107e78261162c565b5050565b6036546001600160a01b031633146107e757604051633bd4919b60e11b815260040160405180910390fd5b60005461010090046001600160a01b031633146108455760405162461bcd60e51b815260040161073f9061281f565b8060005b818110156108885761088084848381811061086657610866612861565b905060200201602081019061087b919061219c565b611da3565b600101610849565b50505050565b6036546001600160a01b031633146108b957604051633bd4919b60e11b815260040160405180910390fd5b505050505050565b60606105436034611e8d565b6001600160a01b03811660009081526038602052604081205460ff161561097e576040516306fa66c360e31b81526001600160a01b03838116600483015260009182918616906337d33618906024016040805180830381865afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190612877565b915091506000811161096f576000610979565b6109798282611e9a565b925050505b92915050565b60005461010090046001600160a01b031633146109b35760405162461bcd60e51b815260040161073f9061281f565b6001600160a01b038116158015906109d957506001546001600160a01b03828116911614155b610a5f5760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a40161073f565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b6001600160a01b03811660009081526038602052604081205460ff161561097e576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c919061289b565b9392505050565b6000610b4f60346117fa565b905060005b8181101561068057610b67603482611d97565b604051637d3572fd60e01b81526001600160a01b038781166004830152868116602483015285151560448301529190911690637d3572fd90606401600060405180830381600087803b158015610bbc57600080fd5b505af1158015610bd0573d6000803e3d6000fd5b50505050806001019050610b54565b60005461010090046001600160a01b03163314610c0e5760405162461bcd60e51b815260040161073f9061281f565b8060005b8181101561088857610c49848483818110610c2f57610c2f612861565b9050602002016020810190610c44919061219c565b611d2c565b600101610c12565b60005461010090046001600160a01b03163314610c805760405162461bcd60e51b815260040161073f9061281f565b60375460408051634b52d08760e11b815290516001600160a01b03928316928416916396a5a10e9160048083019260209291908290030181865afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf091906128b4565b1580610d0d5750806001600160a01b0316826001600160a01b0316145b15610d2b576040516369f6977760e11b815260040160405180910390fd5b603780546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fdd1b73e02786644d6e9994c9d513f1058320c4ff857e1a76ded4c77f83ab3ea9910160405180910390a15050565b603654604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa158015610dd3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dfb9190810190612785565b90508160005b8181101561068057610e3a858583818110610e1e57610e1e612861565b9050602002016020810190610e33919061219c565b8433611872565b80610e44816128d1565b915050610e01565b6036546001600160a01b03163314610e7757604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526038602052604090205460ff1615610888576001600160a01b03841660009081526039602052604081208054849290610ec0908490612739565b90915550506001600160a01b0384166000805160206129e4833981519152610ee784611804565b610ef090612750565b60405190815260200160405180910390a250505050565b6000610f1360346117fa565b905060005b81811015610f9757610f2b603482611d97565b6001600160a01b031663a82e84e98686866040518463ffffffff1660e01b8152600401610f5a939291906128ec565b600060405180830381600087803b158015610f7457600080fd5b505af1158015610f88573d6000803e3d6000fd5b50505050806001019050610f18565b506108888461162c565b60005461010090046001600160a01b03163314610fd05760405162461bcd60e51b815260040161073f9061281f565b61070d81611da3565b6000610fe560346117fa565b905060005b8181101561106757610ffd603482611d97565b6001600160a01b031663bdfa0c9985856040518363ffffffff1660e01b815260040161102a92919061292f565b600060405180830381600087803b15801561104457600080fd5b505af1158015611058573d6000803e3d6000fd5b50505050806001019050610fea565b506110718361162c565b505050565b60005460ff16156110e05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161073f565b6110e8611eb9565b806001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a91906128b4565b61116757604051638da904cb60e01b815260040160405180910390fd5b603680546001600160a01b0319166001600160a01b03929092169190911790556000805460ff19166001179055565b6036546001600160a01b031633146111c157604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03821660009081526038602052604090205460ff1615611071576000611250846001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611225573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611249919061289b565b8390611e9a565b6001600160a01b0385166000908152603a602052604081208054929350839290919061127d90849061276d565b90915550506001600160a01b038416600080516020612a04833981519152610ef083611804565b60006112b060346117fa565b905060005b81811015610888576112c8603482611d97565b604051636576717f60e11b81526001600160a01b0386811660048301528515156024830152919091169063caece2fe90604401600060405180830381600087803b15801561131557600080fd5b505af1158015611329573d6000803e3d6000fd5b505050508060010190506112b5565b6036546001600160a01b0316331461136357604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526038602052604090205460ff1615610888576001600160a01b038416600090815260396020526040812080548392906113ac90849061276d565b90915550506001600160a01b0384166000805160206129e4833981519152610ef083611804565b6036546001600160a01b031633146113fe57604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526038602052604090205460ff1615611489576001600160a01b03841660009081526039602052604081208054839290611447908490612739565b90915550506001600160a01b0384166000805160206129e483398151915261146e83611804565b61147790612750565b60405190815260200160405180910390a25b6001600160a01b03821660009081526038602052604090205460ff1615610888576001600160a01b038416600090815260396020526040812080548392906113ac90849061276d565b6036546001600160a01b0316331461107157604051633bd4919b60e11b815260040160405180910390fd5b6036546001600160a01b0316331461152857604051633bd4919b60e11b815260040160405180910390fd5b6001600160a01b03821660009081526038602052604090205460ff161561088857600061158c856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611225573d6000803e3d6000fd5b6001600160a01b0386166000908152603a60205260409020549091508110156115e2576001600160a01b0385166000908152603a6020526040812080548392906115d7908490612739565b909155506116019050565b506001600160a01b0384166000908152603a6020526040812080549190555b846001600160a01b0316600080516020612a0483398151915261162383611804565b61066e90612750565b603654604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa158015611675573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261169d9190810190612785565b825190915060005b81811015610888576116d28482815181106116c2576116c2612861565b6020026020010151846000611872565b806116dc816128d1565b9150506116a5565b6001546001600160a01b0316331461174c5760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b606482015260840161073f565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b600061097e825490565b60006001600160ff1b0382111561186e5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161073f565b5090565b6037546040516366e305fd60e01b81526001600160a01b03858116600483015260009283929116906366e305fd9060240160408051808303816000875af11580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e5919061295d565b91509150806119075760405163f289751b60e01b815260040160405180910390fd5b6001600160a01b03851660009081526038602052604090205460ff1615158215151415611935575050505050565b835160005b81811015611cab57600086828151811061195657611956612861565b60209081029190910101516040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156119ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d1919061289b565b6040516306fa66c360e31b81526001600160a01b038b811660048301529192506000918291908516906337d33618906024016040805180830381865afa158015611a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a439190612877565b915091506000808211611a57576000611a61565b611a618383611e9a565b90508315611a8057611a748560006112a4565b611a80858d6000610b43565b8015611a9d57611a918560016112a4565b611a9d858d6001610b43565b8815611b76578315611b0a576001600160a01b03851660009081526039602052604081208054869290611ad190849061276d565b90915550506001600160a01b0385166000805160206129e4833981519152611af886611804565b60405190815260200160405180910390a25b8015611b71576001600160a01b0385166000908152603a602052604081208054839290611b3890849061276d565b90915550506001600160a01b038516600080516020612a04833981519152611b5f83611804565b60405190815260200160405180910390a25b611c9b565b8315611be6576001600160a01b03851660009081526039602052604081208054869290611ba4908490612739565b90915550506001600160a01b0385166000805160206129e4833981519152611bcb86611804565b611bd490612750565b60405190815260200160405180910390a25b8015611c9b576001600160a01b0385166000908152603a6020526040902054811015611c3f576001600160a01b0385166000908152603a602052604081208054839290611c34908490612739565b90915550611c5e9050565b506001600160a01b0384166000908152603a6020526040812080549190555b846001600160a01b0316600080516020612a04833981519152611c8083611804565b611c8990612750565b60405190815260200160405180910390a25b856001019550505050505061193a565b506001600160a01b038616600081815260386020908152604091829020805460ff191687151590811790915591519182527f6ae14d48df6afe3cad37dc9d491e4040245b769277746a4fbfe211807db71568910160405180910390a282158015611d1d57506001600160a01b03841615155b156108b9576108b98685611f01565b611d37603482611f95565b15611d73576040516001600160a01b038216907f202daff40f5262ad5e95940c6c7a62bc0117d839570a20c66268dc0983ef614390600090a250565b604051632c24396160e21b81526001600160a01b038216600482015260240161073f565b6000610b3c8383611faa565b806001600160a01b031663ff10302a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0591906128b4565b611e2257604051633afc261960e21b815260040160405180910390fd5b611e2d603482611fd4565b15611e69576040516001600160a01b038216907fafd92645c06c0f746b45815ad30af48dfbac17647e860d7be5e8bcaded9498a990600090a250565b6040516372dddcf760e01b81526001600160a01b038216600482015260240161073f565b60606000610b3c83611fe9565b600081611eaf670de0b6b3a76400008561298c565b610b3c91906129ab565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6000611f0d60346117fa565b905060005b8181101561088857611f25603482611d97565b60405163233ac4f560e21b81526001600160a01b03868116600483015285811660248301529190911690638ceb13d490604401600060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b50505050806001019050611f12565b6000610b3c836001600160a01b038416612045565b6000826000018281548110611fc157611fc1612861565b9060005260206000200154905092915050565b6000610b3c836001600160a01b038416612138565b60608160000180548060200260200160405190810160405280929190818152602001828054801561203957602002820191906000526020600020905b815481526020019060010190808311612025575b50505050509050919050565b6000818152600183016020526040812054801561212e576000612069600183612739565b855490915060009061207d90600190612739565b90508181146120e257600086600001828154811061209d5761209d612861565b90600052602060002001549050808760000184815481106120c0576120c0612861565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120f3576120f36129cd565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061097e565b600091505061097e565b600081815260018301602052604081205461217f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561097e565b50600061097e565b6001600160a01b038116811461070d57600080fd5b6000602082840312156121ae57600080fd5b8135610b3c81612187565b600080600080600060a086880312156121d157600080fd5b85356121dc81612187565b945060208601356121ec81612187565b935060408601356121fc81612187565b9250606086013561220c81612187565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561225c5761225c61221d565b604052919050565b600067ffffffffffffffff82111561227e5761227e61221d565b5060051b60200190565b600082601f83011261229957600080fd5b813560206122ae6122a983612264565b612233565b82815260059290921b840181019181810190868411156122cd57600080fd5b8286015b848110156122f15780356122e481612187565b83529183019183016122d1565b509695505050505050565b60006020828403121561230e57600080fd5b813567ffffffffffffffff81111561232557600080fd5b61233184828501612288565b949350505050565b6000806040838503121561234c57600080fd5b823561235781612187565b946020939093013593505050565b6000806020838503121561237857600080fd5b823567ffffffffffffffff8082111561239057600080fd5b818501915085601f8301126123a457600080fd5b8135818111156123b357600080fd5b8660208260051b85010111156123c857600080fd5b60209290920196919550909350505050565b60008060008060008060c087890312156123f357600080fd5b86356123fe81612187565b9550602087013561240e81612187565b9450604087013561241e81612187565b9350606087013561242e81612187565b9598949750929560808101359460a0909101359350915050565b600081518084526020808501945080840160005b838110156124815781516001600160a01b03168752958201959082019060010161245c565b509495945050505050565b602081526000610b3c6020830184612448565b600080604083850312156124b257600080fd5b82356124bd81612187565b915060208301356124cd81612187565b809150509250929050565b801515811461070d57600080fd5b6000806000606084860312156124fb57600080fd5b833561250681612187565b9250602084013561251681612187565b91506040840135612526816124d8565b809150509250925092565b6000806000806080858703121561254757600080fd5b843561255281612187565b9350602085013561256281612187565b93969395505050506040820135916060013590565b60008060006060848603121561258c57600080fd5b833567ffffffffffffffff808211156125a457600080fd5b6125b087838801612288565b945060208601359150808211156125c657600080fd5b6125d287838801612288565b935060408601359150808211156125e857600080fd5b506125f586828701612288565b9150509250925092565b6000806040838503121561261257600080fd5b823567ffffffffffffffff8082111561262a57600080fd5b61263686838701612288565b9350602085013591508082111561264c57600080fd5b5061265985828601612288565b9150509250929050565b60008060006060848603121561267857600080fd5b833561268381612187565b9250602084013561269381612187565b929592945050506040919091013590565b600080604083850312156126b757600080fd5b82356126c281612187565b915060208301356124cd816124d8565b600080600080608085870312156126e857600080fd5b84356126f381612187565b9350602085013561270381612187565b9250604085013561271381612187565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b60008282101561274b5761274b612723565b500390565b6000600160ff1b82141561276657612766612723565b5060000390565b6000821982111561278057612780612723565b500190565b6000602080838503121561279857600080fd5b825167ffffffffffffffff8111156127af57600080fd5b8301601f810185136127c057600080fd5b80516127ce6122a982612264565b81815260059190911b820183019083810190878311156127ed57600080fd5b928401925b8284101561281457835161280581612187565b825292840192908401906127f2565b979650505050505050565b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000806040838503121561288a57600080fd5b505080516020909101519092909150565b6000602082840312156128ad57600080fd5b5051919050565b6000602082840312156128c657600080fd5b8151610b3c816124d8565b60006000198214156128e5576128e5612723565b5060010190565b6060815260006128ff6060830186612448565b82810360208401526129118186612448565b905082810360408401526129258185612448565b9695505050505050565b6040815260006129426040830185612448565b82810360208401526129548185612448565b95945050505050565b6000806040838503121561297057600080fd5b825161297b816124d8565b60208401519092506124cd816124d8565b60008160001904831182151516156129a6576129a6612723565b500290565b6000826129c857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfecd176b67ded217ac36a5e1095012e7ce0d043ca282fa84939737c6c8cada36fd7ffb984b198d913a612f0c4290e127a301b6a5c36b5d6a70c19e26cdd567bec7a26469706673582212203d81e12e64a7badbee2690e260e6fe7ad34fb3c634abe2bec3e09a328af9db3164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_acceptOwner()": {
        "details": "Accepts the admin rights, but only for pendingOwenr."
      },
      "_setEligibilityManager(address)": {
        "details": "Admin function, only owner can call this",
        "params": {
          "_newEligibilityManager": "the address of treasury"
        }
      },
      "_setPendingOwner(address)": {
        "details": "Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.",
        "params": {
          "newPendingOwner": "New pending owner."
        }
      },
      "afterBorrow(address,address,uint256)": {
        "params": {
          "_borrowedAmount": "The amount of underlying being borrowed",
          "_borrower": "The account which borrowed iToken",
          "_iToken": "The iToken being borrewd"
        }
      },
      "afterMint(address,address,uint256,uint256)": {
        "params": {
          "_iToken": "The iToken being minted",
          "_mintedAmount": "The amount of iToken being minted",
          "_minter": "The account which would get the minted tokens"
        }
      },
      "afterRedeem(address,address,uint256,uint256)": {
        "params": {
          "_iToken": "The iToken being redeemed",
          "_redeemAmount": "The amount of iToken being redeemed",
          "_redeemer": "The account which redeemed iToken"
        }
      },
      "afterRepayBorrow(address,address,address,uint256)": {
        "params": {
          "_borrower": "The account which has borrowed",
          "_iToken": "The iToken being repaid #param _payer The account which would repay",
          "_repayAmount": "The amount of underlying being repaied"
        }
      },
      "afterSeize(address,address,address,address,uint256)": {
        "params": {
          "_borrower": "The account which has borrowed",
          "_iTokenCollateral": "The collateral iToken to be seized #param _iTokenBorrowed The iToken was borrowed",
          "_liquidator": "The account which has repaid and seized",
          "_seizedAmount": "The amount of collateral being seized"
        }
      },
      "afterTransfer(address,address,address,uint256)": {
        "params": {
          "_amount": "The amount was transfered",
          "_from": "The account was transfer from",
          "_iToken": "The iToken was transfered",
          "_to": "The account was transfer to"
        }
      },
      "claimAllReward(address[])": {
        "params": {
          "_holders": "The account to claim for"
        }
      },
      "claimRewards(address[],address[],address[])": {
        "params": {
          "_borrowediTokens": "The _borrowediTokens to claim from",
          "_holders": "The account to claim for",
          "_suppliediTokens": "The _suppliediTokens to claim from"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "EligibilityChanged(address,bool)": {
        "notice": "Emitted Eligibility is changed"
      },
      "EligibleTotalBorrowChanged(address,int256)": {
        "notice": "Emitted Eligible Total Borrow changed"
      },
      "EligibleTotalSupplyChanged(address,int256)": {
        "notice": "Emitted Eligible Total Supply changed"
      },
      "NewEligibilityManager(address,address)": {
        "notice": "Emitted Eligibility Manager address is changed by admin"
      }
    },
    "kind": "user",
    "methods": {
      "_setEligibilityManager(address)": {
        "notice": "set new eligibility manager address"
      },
      "_setPendingOwner(address)": {
        "notice": "Base on the inputing parameter `newPendingOwner` to check the exact error reason."
      },
      "afterBorrow(address,address,uint256)": {
        "notice": "Hook function after iToken `borrow()` Will `revert()` if any operation fails"
      },
      "afterFlashloan(address,address,uint256)": {
        "notice": "Hook function after iToken `flashloan()` Will `revert()` if any operation fails #param _iToken The iToken was flashloaned #param _to The account flashloan transfer to #param _amount  The amount was flashloaned"
      },
      "afterLiquidateBorrow(address,address,address,address,uint256,uint256)": {
        "notice": "Hook function after iToken `liquidateBorrow()` Will `revert()` if any operation fails #param _iTokenBorrowed The iToken was borrowed #param _iTokenCollateral The collateral iToken to be seized #param _liquidator The account which would repay and seize #param _borrower The account which has borrowed #param _repaidAmount  The amount of underlying being repaied #param _seizedAmount  The amount of collateral being seized"
      },
      "afterMint(address,address,uint256,uint256)": {
        "notice": "Hook function after iToken `mint()` Will `revert()` if any operation fails"
      },
      "afterRedeem(address,address,uint256,uint256)": {
        "notice": "Hook function after iToken `redeem()` Will `revert()` if any operation fails"
      },
      "afterRepayBorrow(address,address,address,uint256)": {
        "notice": "Hook function after iToken `repayBorrow()` Will `revert()` if any operation fails"
      },
      "afterSeize(address,address,address,address,uint256)": {
        "notice": "Hook function after iToken `seize()` Will `revert()` if any operation fails"
      },
      "afterTransfer(address,address,address,uint256)": {
        "notice": "Hook function after iToken `transfer()` Will `revert()` if any operation fails"
      },
      "claimAllReward(address[])": {
        "notice": "Claim reward accrued in all iTokens by the holders"
      },
      "claimRewards(address[],address[],address[])": {
        "notice": "Claim reward accrued in iTokens by the holders"
      },
      "eligibilityManager()": {
        "notice": "the Eligibility Manager address where to query the eligibility of accounts"
      },
      "eligibleTotalBorrow(address)": {
        "notice": "the Eligible Total Borrow Balance of each iToken"
      },
      "eligibleTotalSupply(address)": {
        "notice": "the Eligible Total Supply of each iToken"
      },
      "isEligible(address)": {
        "notice": "the Elibility of each accounts"
      },
      "isRewardDistributorManager()": {
        "notice": "Ensure this is a RewardDistributorManager contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3401,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3423,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 3426,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 3558,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4948,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "rewardDistributors",
        "offset": 0,
        "slot": "52",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 4951,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "controller",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IController)3008"
      },
      {
        "astId": 4955,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "eligibilityManager",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(IEligibilityManager)3032"
      },
      {
        "astId": 4960,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "isEligible",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4965,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "eligibleTotalSupply",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4970,
        "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
        "label": "eligibleTotalBorrow",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IController)3008": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(IEligibilityManager)3032": {
        "encoding": "inplace",
        "label": "contract IEligibilityManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 324,
            "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 5,
            "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9,
            "contract": "src/RewardDistributorManager.sol:RewardDistributorManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}