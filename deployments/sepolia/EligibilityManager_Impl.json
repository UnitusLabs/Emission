{
  "address": "0x61637a66EB7821F7a82f3d745F8Ec76BB524be89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingPool",
          "type": "address"
        }
      ],
      "name": "EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingPool",
          "type": "address"
        }
      ],
      "name": "EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "EligibilityManager_addValidSupplyInternal__InvalidSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EligibilityManager_initialize__InvalidController",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingPool",
          "type": "address"
        }
      ],
      "name": "EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "BLP",
          "type": "address"
        }
      ],
      "name": "AddBLPStakingPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "AddValidSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "NewPendingOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdRatio",
          "type": "uint256"
        }
      ],
      "name": "NewThresholdRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingPool",
          "type": "address"
        }
      ],
      "name": "RemoveBLPStakingPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "RemoveValidSupply",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BLPs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_acceptOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        }
      ],
      "name": "_addBLPStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_stakingPools",
          "type": "address[]"
        }
      ],
      "name": "_addBLPStakingPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_iTokens",
          "type": "address[]"
        }
      ],
      "name": "_addValidSupplies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        }
      ],
      "name": "_addValidSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        }
      ],
      "name": "_removeBLPStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_stakingPools",
          "type": "address[]"
        }
      ],
      "name": "_removeBLPStakingPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_iTokens",
          "type": "address[]"
        }
      ],
      "name": "_removeValidSupplies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        }
      ],
      "name": "_removeValidSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "_setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "_setThresholdRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBLPStakingPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getBLPValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getSupplyValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidSupplies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        }
      ],
      "name": "hasBLPStakingPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEligibilityManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thresholdRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x252de8798aa0f08d4c10cd8329681b08a55b84d503bbb67b481a61e61f34c2ac",
  "receipt": {
    "to": null,
    "from": "0x6b29b8af9AF126170513AE6524395E09025b214E",
    "contractAddress": "0x61637a66EB7821F7a82f3d745F8Ec76BB524be89",
    "transactionIndex": 109,
    "gasUsed": "1676785",
    "logsBloom": "0x
    "blockHash": "0x26735669c6c2aa9172fc43e1be8391f76e51d3bfffcb313f05ccd1d7d682d324",
    "transactionHash": "0x252de8798aa0f08d4c10cd8329681b08a55b84d503bbb67b481a61e61f34c2ac",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 6838038,
        "transactionHash": "0x252de8798aa0f08d4c10cd8329681b08a55b84d503bbb67b481a61e61f34c2ac",
        "address": "0x61637a66EB7821F7a82f3d745F8Ec76BB524be89",
        "topics": [
          "0x70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006b29b8af9af126170513ae6524395e09025b214e"
        ],
        "data": "0x",
        "logIndex": 158,
        "blockHash": "0x26735669c6c2aa9172fc43e1be8391f76e51d3bfffcb313f05ccd1d7d682d324"
      },
      {
        "transactionIndex": 109,
        "blockNumber": 6838038,
        "transactionHash": "0x252de8798aa0f08d4c10cd8329681b08a55b84d503bbb67b481a61e61f34c2ac",
        "address": "0x61637a66EB7821F7a82f3d745F8Ec76BB524be89",
        "topics": [
          "0xc56d375f1c071074fc31fb4fa10030427229b17eb79895b7726242630ef301c5"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 159,
        "blockHash": "0x26735669c6c2aa9172fc43e1be8391f76e51d3bfffcb313f05ccd1d7d682d324"
      }
    ],
    "blockNumber": 6838038,
    "cumulativeGasUsed": "27913410",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1cD0b4aFA81568F967c769d48607796A6A2E8B71",
    "10000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e65e50cc5c17914ebf6a581389e5053",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"}],\"name\":\"EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"}],\"name\":\"EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"EligibilityManager_addValidSupplyInternal__InvalidSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EligibilityManager_initialize__InvalidController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"}],\"name\":\"EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"BLP\",\"type\":\"address\"}],\"name\":\"AddBLPStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"AddValidSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdRatio\",\"type\":\"uint256\"}],\"name\":\"NewThresholdRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"}],\"name\":\"RemoveBLPStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"RemoveValidSupply\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BLPs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"_addBLPStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingPools\",\"type\":\"address[]\"}],\"name\":\"_addBLPStakingPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_iTokens\",\"type\":\"address[]\"}],\"name\":\"_addValidSupplies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"}],\"name\":\"_addValidSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"_removeBLPStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingPools\",\"type\":\"address[]\"}],\"name\":\"_removeBLPStakingPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_iTokens\",\"type\":\"address[]\"}],\"name\":\"_removeValidSupplies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"}],\"name\":\"_removeValidSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"_setThresholdRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLPStakingPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBLPValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getSupplyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidSupplies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"hasBLPStakingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEligibilityManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dForce\",\"kind\":\"dev\",\"methods\":{\"_acceptOwner()\":{\"details\":\"Accepts the admin rights, but only for pendingOwenr.\"},\"_setPendingOwner(address)\":{\"details\":\"Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\",\"params\":{\"newPendingOwner\":\"New pending owner.\"}},\"getBLPValue(address)\":{\"details\":\"For external query value and status\"},\"getSupplyValue(address)\":{\"details\":\"For external query value and status\"}},\"stateVariables\":{\"BLPStakingPools\":{\"details\":\"EnumerableMap of all BLP Staking Pools\"},\"validSupplies\":{\"details\":\"Eligible supplied iToken\"}},\"title\":\"dForce's lending reward distributor Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BLPs(address)\":{\"notice\":\"the blp token of each blp staking pool\"},\"_setPendingOwner(address)\":{\"notice\":\"Base on the inputing parameter `newPendingOwner` to check the exact error reason.\"},\"controller()\":{\"notice\":\"the controller\"},\"initialize(address,uint256)\":{\"notice\":\"Initializes the contract.\"},\"isEligibilityManager()\":{\"notice\":\"Ensure this is a EligibilityManager contract.\"},\"oracle()\":{\"notice\":\"the oracle\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/EligibilityManager.sol\":\"EligibilityManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"src/EligibilityManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"./Interfaces/IiToken.sol\\\";\\nimport \\\"./Interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./Interfaces/IController.sol\\\";\\nimport \\\"./Interfaces/IPriceOracle.sol\\\";\\nimport \\\"./Interfaces/IBLPStakingPool.sol\\\";\\nimport \\\"./Interfaces/Errors.sol\\\";\\nimport \\\"./Libraries/RatioMath.sol\\\";\\nimport \\\"./Libraries/Ownable.sol\\\";\\nimport \\\"./Libraries/Initializable.sol\\\";\\n\\n/**\\n * @title dForce's lending reward distributor Contract\\n * @author dForce\\n */\\ncontract EligibilityManager is Initializable, Ownable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using RatioMath for uint256;\\n\\n    /// @notice the controller\\n    address public controller;\\n\\n    /// @notice the oracle\\n    address public oracle;\\n\\n    uint256 public thresholdRatio;\\n    event NewThresholdRatio(uint256 thresholdRatio);\\n\\n    /// @dev EnumerableMap of all BLP Staking Pools\\n    EnumerableSetUpgradeable.AddressSet internal BLPStakingPools;\\n    event AddBLPStakingPool(address stakingPool, address BLP);\\n    event RemoveBLPStakingPool(address stakingPool);\\n\\n    /// @notice the blp token of each blp staking pool\\n    mapping(address => address) public BLPs;\\n\\n    /// @dev Eligible supplied iToken\\n    EnumerableSetUpgradeable.AddressSet internal validSupplies;\\n\\n    event AddValidSupply(address iToken);\\n    event RemoveValidSupply(address iToken);\\n\\n    constructor(address _controller, uint256 _ratio) {\\n        initialize(_controller, _ratio);\\n    }\\n\\n    /**\\n     * @notice Ensure this is a EligibilityManager contract.\\n     */\\n    function isEligibilityManager() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     */\\n    function initialize(\\n        address _controller,\\n        uint256 _ratio\\n    ) public initializer {\\n        if (!IController(_controller).isController()) {\\n            revert EligibilityManager_initialize__InvalidController();\\n        }\\n\\n        __Ownable_init();\\n        controller = _controller;\\n        oracle = IController(controller).priceOracle();\\n\\n        thresholdRatio = _ratio;\\n        emit NewThresholdRatio(_ratio);\\n    }\\n\\n    function _addBLPStakingPoolInternal(address _stakingPool) internal {\\n        if (!IBLPStakingPool(_stakingPool).isStakingPool()) {\\n            revert EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\\n                _stakingPool\\n            );\\n        }\\n\\n        if (BLPStakingPools.add(_stakingPool)) {\\n            address _blp = IBLPStakingPool(_stakingPool).stakingToken();\\n\\n            BLPs[_stakingPool] = _blp;\\n\\n            emit AddBLPStakingPool(_stakingPool, _blp);\\n        } else {\\n            revert EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\\n                _stakingPool\\n            );\\n        }\\n    }\\n\\n    function _addBLPStakingPool(address _stakingPool) external onlyOwner {\\n        _addBLPStakingPoolInternal(_stakingPool);\\n    }\\n\\n    function _addBLPStakingPools(\\n        address[] calldata _stakingPools\\n    ) external onlyOwner {\\n        uint256 _length = _stakingPools.length;\\n        for (uint256 _i; _i < _length; ) {\\n            _addBLPStakingPoolInternal(_stakingPools[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function _removeBLPStakingPoolInternal(address _stakingPool) internal {\\n        if (BLPStakingPools.remove(_stakingPool)) {\\n            delete BLPs[_stakingPool];\\n\\n            emit RemoveBLPStakingPool(_stakingPool);\\n        } else {\\n            revert EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\\n                _stakingPool\\n            );\\n        }\\n    }\\n\\n    function _removeBLPStakingPool(address _stakingPool) external onlyOwner {\\n        _removeBLPStakingPoolInternal(_stakingPool);\\n    }\\n\\n    function _removeBLPStakingPools(\\n        address[] calldata _stakingPools\\n    ) external onlyOwner {\\n        uint256 _length = _stakingPools.length;\\n        for (uint256 _i; _i < _length; ) {\\n            _removeBLPStakingPoolInternal(_stakingPools[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function _addValidSupplyInternal(address _iToken) internal {\\n        if (!IController(controller).hasiToken(_iToken)) {\\n            revert EligibilityManager_addValidSupplyInternal__InvalidSupply(\\n                _iToken\\n            );\\n        }\\n\\n        if (validSupplies.add(_iToken)) {\\n            emit AddValidSupply(_iToken);\\n        } else {\\n            revert EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\\n                _iToken\\n            );\\n        }\\n    }\\n\\n    function _addValidSupply(address _iToken) external onlyOwner {\\n        _addValidSupplyInternal(_iToken);\\n    }\\n\\n    function _addValidSupplies(address[] calldata _iTokens) external onlyOwner {\\n        uint256 _length = _iTokens.length;\\n        for (uint256 _i; _i < _length; ) {\\n            _addValidSupplyInternal(_iTokens[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function _removeValidSupplyInternal(address _iToken) internal {\\n        if (validSupplies.remove(_iToken)) {\\n            emit RemoveValidSupply(_iToken);\\n        } else {\\n            revert EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\\n                _iToken\\n            );\\n        }\\n    }\\n\\n    function _removeValidSupply(address _iToken) external onlyOwner {\\n        _removeValidSupplyInternal(_iToken);\\n    }\\n\\n    function _removeValidSupplies(\\n        address[] calldata _iTokens\\n    ) external onlyOwner {\\n        uint256 _length = _iTokens.length;\\n        for (uint256 _i; _i < _length; ) {\\n            _removeValidSupplyInternal(_iTokens[_i]);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function _setThresholdRatio(uint256 _ratio) external onlyOwner {\\n        thresholdRatio = _ratio;\\n        emit NewThresholdRatio(_ratio);\\n    }\\n\\n    function hasBLPStakingPool(address _stakingPool)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return BLPStakingPools.contains(_stakingPool);\\n    }\\n\\n    function getBLPStakingPools() external view returns (address[] memory) {\\n        return BLPStakingPools.values();\\n    }\\n\\n    function getValidSupplies() external view returns (address[] memory) {\\n        return validSupplies.values();\\n    }\\n\\n    function _getBLPValue(\\n        address _account\\n    ) internal returns (uint256 value, bool status) {\\n        address[] memory _BLPStakingPools = BLPStakingPools.values();\\n        uint256 _len = _BLPStakingPools.length;\\n        status = true;\\n\\n        for (uint256 _i = 0; _i < _len; ) {\\n            address _blpStaking = _BLPStakingPools[_i];\\n            address _blp = BLPs[_blpStaking];\\n\\n            uint256 _staked = IERC20Upgradeable(_blpStaking).balanceOf(\\n                _account\\n            );\\n            if (_staked != 0) {\\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\\n                    .getUnderlyingPriceAndStatus(_blp);\\n\\n                if (!_priceStatus) {\\n                    return (0, false);\\n                }\\n\\n                value = value + _staked * _price;\\n            }\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function _getSupplyValue(\\n        address _account\\n    ) internal returns (uint256 value, bool status) {\\n        address[] memory _iTokens = validSupplies.values();\\n        uint256 _len = _iTokens.length;\\n        status = true;\\n\\n        for (uint256 _i = 0; _i < _len; ) {\\n            address _iToken = _iTokens[_i];\\n\\n            uint256 _supply = IiToken(_iToken).balanceOf(_account);\\n            if (_supply != 0) {\\n                uint256 _exchangeRate = IiToken(_iToken).exchangeRateStored();\\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\\n                    .getUnderlyingPriceAndStatus(_iToken);\\n\\n                if (!_priceStatus) {\\n                    return (0, false);\\n                }\\n\\n                value = value + _supply.rmul(_exchangeRate) * _price;\\n            }\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    function isEligible(address _account) external returns (bool, bool) {\\n        if (thresholdRatio == 0) {\\n            return (true, true);\\n        }\\n\\n        (uint256 _BLPValue, bool _BLPStatus) = _getBLPValue(_account);\\n        if (!_BLPStatus) {\\n            return (false, false);\\n        }\\n\\n        (uint256 _supplyValue, bool _supplyStatus) = _getSupplyValue(_account);\\n        if (!_supplyStatus) {\\n            return (false, false);\\n        }\\n\\n        return (_BLPValue > _supplyValue.rmul(thresholdRatio), true);\\n    }\\n\\n    /**\\n     * @dev For external query value and status\\n     */\\n    function getBLPValue(\\n        address _account\\n    ) external returns (uint256 value, bool status) {\\n        address[] memory _BLPStakingPools = BLPStakingPools.values();\\n        uint256 _len = _BLPStakingPools.length;\\n        status = true;\\n\\n        for (uint256 _i = 0; _i < _len; ) {\\n            address _blpStaking = _BLPStakingPools[_i];\\n            address _blp = BLPs[_blpStaking];\\n\\n            uint256 _staked = IERC20Upgradeable(_blpStaking).balanceOf(\\n                _account\\n            );\\n            if (_staked != 0) {\\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\\n                    .getUnderlyingPriceAndStatus(_blp);\\n\\n                if (!_priceStatus && status) {\\n                    status = false;\\n                }\\n\\n                value = value + _staked * _price;\\n            }\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev For external query value and status\\n     */\\n    function getSupplyValue(\\n        address _account\\n    ) external returns (uint256 value, bool status) {\\n        address[] memory _iTokens = validSupplies.values();\\n        uint256 _len = _iTokens.length;\\n        status = true;\\n\\n        for (uint256 _i = 0; _i < _len; ) {\\n            address _iToken = _iTokens[_i];\\n\\n            uint256 _supply = IiToken(_iToken).balanceOf(_account);\\n            if (_supply != 0) {\\n                uint256 _exchangeRate = IiToken(_iToken).exchangeRateStored();\\n                (uint256 _price, bool _priceStatus) = IPriceOracle(oracle)\\n                    .getUnderlyingPriceAndStatus(_iToken);\\n\\n                if (!_priceStatus && status) {\\n                    status = false;\\n                }\\n\\n                value = value + _supply.rmul(_exchangeRate) * _price;\\n            }\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd254eaa60190ab4f4af1744d6b3c1b3148ba5df030d6121d3e54b3a8e0a10b\",\"license\":\"MIT\"},\"src/Interfaces/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress();\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist();\\nerror BaseStakingPool_initialize__StakingTokenIsZeroAddress();\\nerror BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist();\\nerror BaseStakingPool_stake__StakeAmountIsZero();\\nerror BaseStakingPool_withdraw__WithdrawAmountIsZero();\\n\\nerror BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager();\\n\\nerror BLPReward_initialize__StakingTokenIsZeroAddress();\\nerror BLPReward_initialize__RewardTokenIsZeroAddress();\\nerror BLPReward_initialize__TreasuryIsZeroAddress();\\nerror BLPReward_setTreasury__TreasuryIsZeroAddress();\\nerror BLPReward_setTreasury__SameTreasuryAddress();\\n\\nerror EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\\n    address stakingPool\\n);\\nerror EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\\n    address stakingPool\\n);\\nerror EligibilityManager_addValidSupplyInternal__InvalidSupply(address iToken);\\nerror EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\\n    address iToken\\n);\\nerror EligibilityManager_initialize__InvalidController();\\nerror EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\\n    address iToken\\n);\\nerror EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\\n    address stakingPool\\n);\\n\\n// Modifier error\\nerror RewardDistributorManager__NotController();\\n// Function errors\\nerror RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\\nerror RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_initialize__InvalidController();\\nerror RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\\nerror RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\\n\\nerror RewardDistributor__CallerIsNotRewardManager();\\nerror RewardDistributor__ContractPaused();\\nerror RewardDistributor_initialize__InvalidController();\\nerror RewardDistributor_initialize__InvalidRewardDistributorManager();\\nerror RewardDistributor_rescueTokens__CallerIsNotTreasury();\\nerror RewardDistributor_setRewardToken__InvalidRewardToken();\\nerror RewardDistributor_setTreasury__InvalidTreasury();\\nerror RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateDistributionState__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateReward__TokenHasNotBeenListed(address iToken);\\nerror RewardDistributor_updateReward__AccountIsZeroAddress();\\nerror RewardDistributor_setBountyRatio__RatioTooHigh();\\n\",\"keccak256\":\"0x8e9a4bbbbc196ddceeb4bd00f3500040bf513e2a32009c358e9103989267842f\",\"license\":\"MIT\"},\"src/Interfaces/IBLPStakingPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IBLPStakingPool {\\n    function stakingToken() external view returns (address);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function isStakingPool() external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x4ab654ddea34c3a70000b968410b7f6bc6f60f9d6269959ecee9fc380fc59632\",\"license\":\"MIT\"},\"src/Interfaces/IController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface IController {\\n    /**\\n     * @notice Security checks when updating the comptroller of a market, always expect to return true.\\n     */\\n    function isController() external view returns (bool);\\n\\n    /**\\n     * @notice Return all of the iTokens\\n     * @return The list of iToken addresses\\n     */\\n    function getAlliTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Check whether a iToken is listed in controller\\n     * @param _iToken The iToken to check for\\n     * @return true if the iToken is listed otherwise false\\n     */\\n    function hasiToken(address _iToken) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n    function rewardDistributor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb64207ac0bc4ef315135c790887897f38eadca384d32e21a480e8e273187a96b\",\"license\":\"MIT\"},\"src/Interfaces/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IPriceOracle {\\n    /**\\n     * @notice Get the price of a underlying asset\\n     * @param _iToken The iToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable and whether the price is valid.\\n     */\\n    function getUnderlyingPriceAndStatus(\\n        address _iToken\\n    ) external returns (uint256, bool);\\n}\\n\",\"keccak256\":\"0xf7eb8b714b559eb284447a3061589c9a920eed6693a046f9d0a499294931e7c0\",\"license\":\"MIT\"},\"src/Interfaces/IRewardDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IController.sol\\\";\\n\\ninterface IRewardDistributor {\\n    function isRewardDistributor() external view returns (bool);\\n\\n    function controller() external view returns (IController);\\n\\n    function rewardToken() external returns (address);\\n\\n    function _setRewardToken(address newRewardToken) external;\\n\\n    /// @notice Emitted reward token address is changed by admin\\n    event NewRewardToken(address oldRewardToken, address newRewardToken);\\n\\n    function treasury() external returns (address);\\n\\n    function _setTreasury(address newTreasury) external;\\n\\n    /// @notice Emitted treasury address is changed by admin\\n    event NewTreasury(address oldTreasury, address newTreasury);\\n\\n    function _addRecipient(\\n        address _iToken,\\n        uint256 _distributionFactor\\n    ) external;\\n\\n    event NewRecipient(address iToken, uint256 distributionFactor);\\n\\n    /// @notice Emitted when mint is paused/unpaused by admin\\n    event PausedChanged(bool paused, uint256 timestamp);\\n\\n    function _pause() external;\\n\\n    function _unpause(\\n        address[] calldata _borrowiTokens,\\n        uint256[] calldata _borrowSpeeds,\\n        address[] calldata _supplyiTokens,\\n        uint256[] calldata _supplySpeeds\\n    ) external;\\n\\n    /// @notice Emitted when Global Distribution speed for both supply and borrow are updated\\n    event GlobalDistributionSpeedsChanged(\\n        uint256 borrowSpeed,\\n        uint256 supplySpeed,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Emitted when iToken's Distribution borrow speed is updated\\n    event DistributionBorrowSpeedChanged(\\n        address iToken,\\n        uint256 borrowSpeed,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Emitted when iToken's Distribution supply speed is updated\\n    event DistributionSupplySpeedChanged(\\n        address iToken,\\n        uint256 supplySpeed,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Emitted when iToken's Distribution factor is changed by admin\\n    event NewDistributionFactor(\\n        address iToken,\\n        uint256 oldDistributionFactorMantissa,\\n        uint256 newDistributionFactorMantissa\\n    );\\n\\n    /// @notice Emitted when bounty ratio is changed by admin\\n    event NewBountyRatio(uint256 oldBountyRatio, uint256 newBountyRatio);\\n\\n    function updateDistributionState(address _iToken, bool _isBorrow) external;\\n\\n    function updateReward(\\n        address _iToken,\\n        address _account,\\n        bool _isBorrow\\n    ) external;\\n\\n    function updateRewardBatch(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) external;\\n\\n    function claimReward(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) external;\\n\\n    function claimAllReward(address[] memory _holders) external;\\n\\n    function claimRewards(\\n        address[] memory _holders,\\n        address[] memory _suppliediTokens,\\n        address[] memory _borrowediTokens\\n    ) external;\\n\\n    /// @notice Emitted when reward of amount is distributed into account\\n    event RewardDistributed(\\n        address iToken,\\n        address account,\\n        uint256 amount,\\n        uint256 accountIndex\\n    );\\n\\n    function claimBounty(address _account, address _hunter) external;\\n\\n    /// @notice Emitted when bounty is claimed by a hunter\\n    event BountyClaimed(\\n        address rewardToken,\\n        address hunter,\\n        address account,\\n        uint256 bounty,\\n        uint256 reward\\n    );\\n}\\n\",\"keccak256\":\"0xfe6a638b069bf4e36a3b58c1831ab9a0c209cffdaeb68252abcf1704f7c832b2\",\"license\":\"MIT\"},\"src/Interfaces/IiToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IiToken {\\n    function name() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function isiToken() external returns (bool);\\n\\n    function borrowBalanceStored(address _user) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function balanceOfUnderlying(address _account) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function borrowSnapshot(\\n        address _account\\n    ) external view returns (uint256, uint256);\\n\\n    function mint(\\n        address _to,\\n        uint256 _amount,\\n        bool _refreshEligibility\\n    ) external;\\n\\n    function redeem(\\n        address _from,\\n        uint256 _redeemiToken,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function redeemUnderlying(\\n        address _from,\\n        uint256 _redeemiToken,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function borrow(uint256 _borrowAmount, bool refreshEligibility) external;\\n\\n    function repayBorrow(\\n        uint256 _repayAmount,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function repayBorrowBehalf(\\n        address _borrower,\\n        uint256 _repayAmount,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function liquidateBorrow(\\n        address _borrower,\\n        uint256 _repayAmount,\\n        address _assetCollateral,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function mintForSelfAndEnterMarket(\\n        uint256 _mintAmount,\\n        bool refreshEligibility\\n    ) external;\\n\\n    function redeemFromSelfAndExitMarket(\\n        uint256 _redeemiToken,\\n        bool refreshEligibility\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd371f7bfb53f7453e217c9c869a502d7dc5f519c967f60a4062c77bbd15e39d5\",\"license\":\"MIT\"},\"src/Libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        _;\\n\\n        _initialized = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcbc7147c62a7be5a7bf4f195ad3dc07ca07f2b1de52b3e010b45ebdf17e9cc50\",\"license\":\"MIT\"},\"src/Libraries/Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\n */\\ncontract Ownable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    address payable public owner;\\n\\n    /**\\n     * @dev Returns the address of the current pending owner.\\n     */\\n    address payable public pendingOwner;\\n\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\n    event NewPendingOwner(\\n        address indexed oldPendingOwner,\\n        address indexed newPendingOwner\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal {\\n        owner = payable(msg.sender);\\n        emit NewOwner(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\n     * @param newPendingOwner New pending owner.\\n     */\\n    function _setPendingOwner(\\n        address payable newPendingOwner\\n    ) external onlyOwner {\\n        require(\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\n        );\\n\\n        // Gets current owner.\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Sets new pending owner.\\n        pendingOwner = newPendingOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n    }\\n\\n    /**\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\n     */\\n    function _acceptOwner() external {\\n        require(\\n            msg.sender == pendingOwner,\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\n        );\\n\\n        // Gets current values for events.\\n        address oldOwner = owner;\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Set the new contract owner.\\n        owner = pendingOwner;\\n\\n        // Clear the pendingOwner.\\n        pendingOwner = payable(address(0));\\n\\n        emit NewOwner(oldOwner, owner);\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x558d48351f76c1d19134d3a686b7ebca79ec9bb4b900f6aa8eaecd951885ca4c\",\"license\":\"MIT\"},\"src/Libraries/RatioMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary RatioMath {\\n    uint256 private constant BASE = 10 ** 18;\\n    uint256 private constant DOUBLE = 10 ** 36;\\n\\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x + (y - 1)) / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * y) / BASE;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * BASE) / y;\\n    }\\n\\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * (BASE) + (y - 1)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x5f2fee3fede7ea0fd09da82256284211cf6431cc40ad4be4055b0792955ac3b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e5538038062001e55833981016040819052620000349162000292565b62000040828262000048565b50506200030a565b60005460ff1615620000b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b816001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c9190620002c1565b6200013a5760405163d232631560e01b815260040160405180910390fd5b620001446200022d565b603480546001600160a01b0319166001600160a01b03841690811790915560408051632630c12f60e01b81529051632630c12f916004808201926020929091908290030181865afa1580156200019e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c49190620002ec565b603580546001600160a01b0319166001600160a01b039290921691909117905560368190556040518181527fc56d375f1c071074fc31fb4fa10030427229b17eb79895b7726242630ef301c59060200160405180910390a150506000805460ff19166001179055565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b80516001600160a01b03811681146200028d57600080fd5b919050565b60008060408385031215620002a657600080fd5b620002b18362000275565b9150602083015190509250929050565b600060208284031215620002d457600080fd5b81518015158114620002e557600080fd5b9392505050565b600060208284031215620002ff57600080fd5b620002e58262000275565b611b3b806200031a6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806396a5a10e116100de578063cbb8abaf11610097578063f181614e11610071578063f181614e14610377578063f60107b51461037f578063f77c479114610392578063fc4d33f9146103a557600080fd5b8063cbb8abaf1461033e578063cd6dc68714610351578063e30c39781461036457600080fd5b806396a5a10e146102d45780639be4cd39146102db578063a6a79c02146102ee578063c0324da114610301578063c1a6008014610318578063c213d2261461032b57600080fd5b80636e96dfd7116101305780636e96dfd71461022f57806372faf61214610242578063749c503a146102555780637755d525146102685780637dc0d1d0146102a95780638da5cb5b146102bc57600080fd5b80630fc7f11c146101785780632af385491461018d5780632bb81ab7146101b5578063579c888a146101dd578063584416e2146101f057806366e305fd14610205575b600080fd5b61018b61018636600461185b565b6103ad565b005b6101a061019b36600461185b565b6103f1565b60405190151581526020015b60405180910390f35b6101c86101c336600461185b565b610404565b604080519283529015156020830152016101ac565b61018b6101eb366004611878565b6105e7565b6101f861065f565b6040516101ac91906118ed565b61021861021336600461185b565b610670565b6040805192151583529015156020830152016101ac565b61018b61023d36600461185b565b6106ed565b61018b61025036600461185b565b61081a565b61018b61026336600461185b565b610852565b61029161027636600461185b565b6039602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101ac565b603554610291906001600160a01b031681565b6000546102919061010090046001600160a01b031681565b60016101a0565b61018b6102e936600461185b565b61088a565b61018b6102fc366004611878565b6108c2565b61030a60365481565b6040519081526020016101ac565b6101c861032636600461185b565b610934565b61018b610339366004611878565b610ab3565b61018b61034c366004611878565b610b25565b61018b61035f36600461193a565b610b97565b600154610291906001600160a01b031681565b6101f8610d6e565b61018b61038d366004611966565b610d7a565b603454610291906001600160a01b031681565b61018b610de5565b60005461010090046001600160a01b031633146103e55760405162461bcd60e51b81526004016103dc9061197f565b60405180910390fd5b6103ee81610efb565b50565b60006103fe603783610f86565b92915050565b6000806000610413603a610fab565b80516001935090915060005b818110156105df57600083828151811061043b5761043b6119c1565b60209081029190910101516040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b691906119d7565b905080156105d5576000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052291906119d7565b603554604051633b573cb760e21b81526001600160a01b0386811660048301529293506000928392169063ed5cf2dc9060240160408051808303816000875af1158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190611a05565b91509150801580156105a65750885b156105b057600098505b816105bb8585610fb8565b6105c59190611a47565b6105cf908b611a66565b99505050505b505060010161041f565b505050915091565b60005461010090046001600160a01b031633146106165760405162461bcd60e51b81526004016103dc9061197f565b8060005b8181101561065957610651848483818110610637576106376119c1565b905060200201602081019061064c919061185b565b610fd7565b60010161061a565b50505050565b606061066b6037610fab565b905090565b6000806036546000141561068957506001928392509050565b60008061069585611044565b91509150806106ab575060009485945092505050565b6000806106b7876111c6565b91509150806106cf5750600096879650945050505050565b6036546106dd908390610fb8565b9093119660019650945050505050565b60005461010090046001600160a01b0316331461071c5760405162461bcd60e51b81526004016103dc9061197f565b6001600160a01b0381161580159061074257506001546001600160a01b03828116911614155b6107c85760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a4016103dc565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b60005461010090046001600160a01b031633146108495760405162461bcd60e51b81526004016103dc9061197f565b6103ee816113a4565b60005461010090046001600160a01b031633146108815760405162461bcd60e51b81526004016103dc9061197f565b6103ee81611534565b60005461010090046001600160a01b031633146108b95760405162461bcd60e51b81526004016103dc9061197f565b6103ee81610fd7565b60005461010090046001600160a01b031633146108f15760405162461bcd60e51b81526004016103dc9061197f565b8060005b818110156106595761092c848483818110610912576109126119c1565b9050602002016020810190610927919061185b565b6113a4565b6001016108f5565b60008060006109436037610fab565b80516001935090915060005b818110156105df57600083828151811061096b5761096b6119c1565b6020908102919091018101516001600160a01b038082166000818152603990945260408085205490516370a0823160e01b81528c8416600482015293955090911692916370a0823190602401602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f891906119d7565b90508015610aa557603554604051633b573cb760e21b81526001600160a01b038481166004830152600092839291169063ed5cf2dc9060240160408051808303816000875af1158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190611a05565b9150915080158015610a825750885b15610a8c57600098505b610a968284611a47565b610aa0908b611a66565b995050505b83600101935050505061094f565b60005461010090046001600160a01b03163314610ae25760405162461bcd60e51b81526004016103dc9061197f565b8060005b8181101561065957610b1d848483818110610b0357610b036119c1565b9050602002016020810190610b18919061185b565b611534565b600101610ae6565b60005461010090046001600160a01b03163314610b545760405162461bcd60e51b81526004016103dc9061197f565b8060005b8181101561065957610b8f848483818110610b7557610b756119c1565b9050602002016020810190610b8a919061185b565b610efb565b600101610b58565b60005460ff1615610c015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103dc565b816001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190611a7e565b610c805760405163d232631560e01b815260040160405180910390fd5b610c88611636565b603480546001600160a01b0319166001600160a01b03841690811790915560408051632630c12f60e01b81529051632630c12f916004808201926020929091908290030181865afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190611a99565b603580546001600160a01b0319166001600160a01b039290921691909117905560368190556040518181527fc56d375f1c071074fc31fb4fa10030427229b17eb79895b7726242630ef301c59060200160405180910390a150506000805460ff19166001179055565b606061066b603a610fab565b60005461010090046001600160a01b03163314610da95760405162461bcd60e51b81526004016103dc9061197f565b60368190556040518181527fc56d375f1c071074fc31fb4fa10030427229b17eb79895b7726242630ef301c5906020015b60405180910390a150565b6001546001600160a01b03163314610e4d5760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b60648201526084016103dc565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b610f0660378261167e565b15610f62576001600160a01b03811660008181526039602090815260409182902080546001600160a01b031916905590519182527f9d4e3f5ce25909675080711e7ecad5ecddf2ce48aac72bce49223ff6988557e89101610dda565b604051635ce91f2f60e11b81526001600160a01b03821660048201526024016103dc565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60606000610fa483611693565b6000670de0b6b3a7640000610fcd8385611a47565b610fa49190611ab6565b610fe2603a8261167e565b15611020576040516001600160a01b03821681527f315a1de4f47e4306856be146b28cb9d5850b132d0a9f2317b33f0dd321ab0db090602001610dda565b60405163a869995760e01b81526001600160a01b03821660048201526024016103dc565b60008060006110536037610fab565b80516001935090915060005b818110156105df57600083828151811061107b5761107b6119c1565b6020908102919091018101516001600160a01b038082166000818152603990945260408085205490516370a0823160e01b81528c8416600482015293955090911692916370a0823190602401602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110891906119d7565b905080156111b857603554604051633b573cb760e21b81526001600160a01b038481166004830152600092839291169063ed5cf2dc9060240160408051808303816000875af115801561115f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111839190611a05565b915091508061119f575060009a8b9a5098505050505050505050565b6111a98284611a47565b6111b3908b611a66565b995050505b83600101935050505061105f565b60008060006111d5603a610fab565b80516001935090915060005b818110156105df5760008382815181106111fd576111fd6119c1565b60209081029190910101516040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127891906119d7565b9050801561139a576000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e491906119d7565b603554604051633b573cb760e21b81526001600160a01b0386811660048301529293506000928392169063ed5cf2dc9060240160408051808303816000875af1158015611335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190611a05565b9150915080611375575060009a8b9a5098505050505050505050565b816113808585610fb8565b61138a9190611a47565b611394908b611a66565b99505050505b50506001016111e1565b806001600160a01b031663aed6d5c06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190611a7e565b61142e57604051635e664f6f60e11b81526001600160a01b03821660048201526024016103dc565b6114396037826116ef565b15611510576000816001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a29190611a99565b6001600160a01b0383811660008181526039602090815260409182902080546001600160a01b031916948616948517905581519283528201929092529192507f959d6e20ded4c3fb8770f88c51caef9f8eeb8eb56d18ea9794b5cb1d24a1667c910160405180910390a15050565b6040516339b7bf2760e21b81526001600160a01b03821660048201526024016103dc565b603454604051632214743160e11b81526001600160a01b03838116600483015290911690634428e86290602401602060405180830381865afa15801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a29190611a7e565b6115ca5760405163266d468960e01b81526001600160a01b03821660048201526024016103dc565b6115d5603a826116ef565b15611613576040516001600160a01b03821681527f860dc5b838cf7720a9ef26722e5343c45274594424def90463f2b155a26a46b290602001610dda565b60405162879b9360e21b81526001600160a01b03821660048201526024016103dc565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6000610fa4836001600160a01b038416611704565b6060816000018054806020026020016040519081016040528092919081815260200182805480156116e357602002820191906000526020600020905b8154815260200190600101908083116116cf575b50505050509050919050565b6000610fa4836001600160a01b0384166117f7565b600081815260018301602052604081205480156117ed576000611728600183611ad8565b855490915060009061173c90600190611ad8565b90508181146117a157600086600001828154811061175c5761175c6119c1565b906000526020600020015490508087600001848154811061177f5761177f6119c1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806117b2576117b2611aef565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103fe565b60009150506103fe565b600081815260018301602052604081205461183e575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103fe565b5060006103fe565b6001600160a01b03811681146103ee57600080fd5b60006020828403121561186d57600080fd5b8135610fa481611846565b6000806020838503121561188b57600080fd5b823567ffffffffffffffff808211156118a357600080fd5b818501915085601f8301126118b757600080fd5b8135818111156118c657600080fd5b8660208260051b85010111156118db57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101561192e5783516001600160a01b031683529284019291840191600101611909565b50909695505050505050565b6000806040838503121561194d57600080fd5b823561195881611846565b946020939093013593505050565b60006020828403121561197857600080fd5b5035919050565b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119e957600080fd5b5051919050565b80518015158114611a0057600080fd5b919050565b60008060408385031215611a1857600080fd5b82519150611a28602084016119f0565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611a6157611a61611a31565b500290565b60008219821115611a7957611a79611a31565b500190565b600060208284031215611a9057600080fd5b610fa4826119f0565b600060208284031215611aab57600080fd5b8151610fa481611846565b600082611ad357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611aea57611aea611a31565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205f50066f5237172180dcf92905f532e7a40bf88202f9cc00b501f1b0df8b79fa64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806396a5a10e116100de578063cbb8abaf11610097578063f181614e11610071578063f181614e14610377578063f60107b51461037f578063f77c479114610392578063fc4d33f9146103a557600080fd5b8063cbb8abaf1461033e578063cd6dc68714610351578063e30c39781461036457600080fd5b806396a5a10e146102d45780639be4cd39146102db578063a6a79c02146102ee578063c0324da114610301578063c1a6008014610318578063c213d2261461032b57600080fd5b80636e96dfd7116101305780636e96dfd71461022f57806372faf61214610242578063749c503a146102555780637755d525146102685780637dc0d1d0146102a95780638da5cb5b146102bc57600080fd5b80630fc7f11c146101785780632af385491461018d5780632bb81ab7146101b5578063579c888a146101dd578063584416e2146101f057806366e305fd14610205575b600080fd5b61018b61018636600461185b565b6103ad565b005b6101a061019b36600461185b565b6103f1565b60405190151581526020015b60405180910390f35b6101c86101c336600461185b565b610404565b604080519283529015156020830152016101ac565b61018b6101eb366004611878565b6105e7565b6101f861065f565b6040516101ac91906118ed565b61021861021336600461185b565b610670565b6040805192151583529015156020830152016101ac565b61018b61023d36600461185b565b6106ed565b61018b61025036600461185b565b61081a565b61018b61026336600461185b565b610852565b61029161027636600461185b565b6039602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101ac565b603554610291906001600160a01b031681565b6000546102919061010090046001600160a01b031681565b60016101a0565b61018b6102e936600461185b565b61088a565b61018b6102fc366004611878565b6108c2565b61030a60365481565b6040519081526020016101ac565b6101c861032636600461185b565b610934565b61018b610339366004611878565b610ab3565b61018b61034c366004611878565b610b25565b61018b61035f36600461193a565b610b97565b600154610291906001600160a01b031681565b6101f8610d6e565b61018b61038d366004611966565b610d7a565b603454610291906001600160a01b031681565b61018b610de5565b60005461010090046001600160a01b031633146103e55760405162461bcd60e51b81526004016103dc9061197f565b60405180910390fd5b6103ee81610efb565b50565b60006103fe603783610f86565b92915050565b6000806000610413603a610fab565b80516001935090915060005b818110156105df57600083828151811061043b5761043b6119c1565b60209081029190910101516040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b691906119d7565b905080156105d5576000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052291906119d7565b603554604051633b573cb760e21b81526001600160a01b0386811660048301529293506000928392169063ed5cf2dc9060240160408051808303816000875af1158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190611a05565b91509150801580156105a65750885b156105b057600098505b816105bb8585610fb8565b6105c59190611a47565b6105cf908b611a66565b99505050505b505060010161041f565b505050915091565b60005461010090046001600160a01b031633146106165760405162461bcd60e51b81526004016103dc9061197f565b8060005b8181101561065957610651848483818110610637576106376119c1565b905060200201602081019061064c919061185b565b610fd7565b60010161061a565b50505050565b606061066b6037610fab565b905090565b6000806036546000141561068957506001928392509050565b60008061069585611044565b91509150806106ab575060009485945092505050565b6000806106b7876111c6565b91509150806106cf5750600096879650945050505050565b6036546106dd908390610fb8565b9093119660019650945050505050565b60005461010090046001600160a01b0316331461071c5760405162461bcd60e51b81526004016103dc9061197f565b6001600160a01b0381161580159061074257506001546001600160a01b03828116911614155b6107c85760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a4016103dc565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b60005461010090046001600160a01b031633146108495760405162461bcd60e51b81526004016103dc9061197f565b6103ee816113a4565b60005461010090046001600160a01b031633146108815760405162461bcd60e51b81526004016103dc9061197f565b6103ee81611534565b60005461010090046001600160a01b031633146108b95760405162461bcd60e51b81526004016103dc9061197f565b6103ee81610fd7565b60005461010090046001600160a01b031633146108f15760405162461bcd60e51b81526004016103dc9061197f565b8060005b818110156106595761092c848483818110610912576109126119c1565b9050602002016020810190610927919061185b565b6113a4565b6001016108f5565b60008060006109436037610fab565b80516001935090915060005b818110156105df57600083828151811061096b5761096b6119c1565b6020908102919091018101516001600160a01b038082166000818152603990945260408085205490516370a0823160e01b81528c8416600482015293955090911692916370a0823190602401602060405180830381865afa1580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f891906119d7565b90508015610aa557603554604051633b573cb760e21b81526001600160a01b038481166004830152600092839291169063ed5cf2dc9060240160408051808303816000875af1158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190611a05565b9150915080158015610a825750885b15610a8c57600098505b610a968284611a47565b610aa0908b611a66565b995050505b83600101935050505061094f565b60005461010090046001600160a01b03163314610ae25760405162461bcd60e51b81526004016103dc9061197f565b8060005b8181101561065957610b1d848483818110610b0357610b036119c1565b9050602002016020810190610b18919061185b565b611534565b600101610ae6565b60005461010090046001600160a01b03163314610b545760405162461bcd60e51b81526004016103dc9061197f565b8060005b8181101561065957610b8f848483818110610b7557610b756119c1565b9050602002016020810190610b8a919061185b565b610efb565b600101610b58565b60005460ff1615610c015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103dc565b816001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190611a7e565b610c805760405163d232631560e01b815260040160405180910390fd5b610c88611636565b603480546001600160a01b0319166001600160a01b03841690811790915560408051632630c12f60e01b81529051632630c12f916004808201926020929091908290030181865afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190611a99565b603580546001600160a01b0319166001600160a01b039290921691909117905560368190556040518181527fc56d375f1c071074fc31fb4fa10030427229b17eb79895b7726242630ef301c59060200160405180910390a150506000805460ff19166001179055565b606061066b603a610fab565b60005461010090046001600160a01b03163314610da95760405162461bcd60e51b81526004016103dc9061197f565b60368190556040518181527fc56d375f1c071074fc31fb4fa10030427229b17eb79895b7726242630ef301c5906020015b60405180910390a150565b6001546001600160a01b03163314610e4d5760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b60648201526084016103dc565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b610f0660378261167e565b15610f62576001600160a01b03811660008181526039602090815260409182902080546001600160a01b031916905590519182527f9d4e3f5ce25909675080711e7ecad5ecddf2ce48aac72bce49223ff6988557e89101610dda565b604051635ce91f2f60e11b81526001600160a01b03821660048201526024016103dc565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60606000610fa483611693565b6000670de0b6b3a7640000610fcd8385611a47565b610fa49190611ab6565b610fe2603a8261167e565b15611020576040516001600160a01b03821681527f315a1de4f47e4306856be146b28cb9d5850b132d0a9f2317b33f0dd321ab0db090602001610dda565b60405163a869995760e01b81526001600160a01b03821660048201526024016103dc565b60008060006110536037610fab565b80516001935090915060005b818110156105df57600083828151811061107b5761107b6119c1565b6020908102919091018101516001600160a01b038082166000818152603990945260408085205490516370a0823160e01b81528c8416600482015293955090911692916370a0823190602401602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110891906119d7565b905080156111b857603554604051633b573cb760e21b81526001600160a01b038481166004830152600092839291169063ed5cf2dc9060240160408051808303816000875af115801561115f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111839190611a05565b915091508061119f575060009a8b9a5098505050505050505050565b6111a98284611a47565b6111b3908b611a66565b995050505b83600101935050505061105f565b60008060006111d5603a610fab565b80516001935090915060005b818110156105df5760008382815181106111fd576111fd6119c1565b60209081029190910101516040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127891906119d7565b9050801561139a576000826001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e491906119d7565b603554604051633b573cb760e21b81526001600160a01b0386811660048301529293506000928392169063ed5cf2dc9060240160408051808303816000875af1158015611335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190611a05565b9150915080611375575060009a8b9a5098505050505050505050565b816113808585610fb8565b61138a9190611a47565b611394908b611a66565b99505050505b50506001016111e1565b806001600160a01b031663aed6d5c06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190611a7e565b61142e57604051635e664f6f60e11b81526001600160a01b03821660048201526024016103dc565b6114396037826116ef565b15611510576000816001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a29190611a99565b6001600160a01b0383811660008181526039602090815260409182902080546001600160a01b031916948616948517905581519283528201929092529192507f959d6e20ded4c3fb8770f88c51caef9f8eeb8eb56d18ea9794b5cb1d24a1667c910160405180910390a15050565b6040516339b7bf2760e21b81526001600160a01b03821660048201526024016103dc565b603454604051632214743160e11b81526001600160a01b03838116600483015290911690634428e86290602401602060405180830381865afa15801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a29190611a7e565b6115ca5760405163266d468960e01b81526001600160a01b03821660048201526024016103dc565b6115d5603a826116ef565b15611613576040516001600160a01b03821681527f860dc5b838cf7720a9ef26722e5343c45274594424def90463f2b155a26a46b290602001610dda565b60405162879b9360e21b81526001600160a01b03821660048201526024016103dc565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6000610fa4836001600160a01b038416611704565b6060816000018054806020026020016040519081016040528092919081815260200182805480156116e357602002820191906000526020600020905b8154815260200190600101908083116116cf575b50505050509050919050565b6000610fa4836001600160a01b0384166117f7565b600081815260018301602052604081205480156117ed576000611728600183611ad8565b855490915060009061173c90600190611ad8565b90508181146117a157600086600001828154811061175c5761175c6119c1565b906000526020600020015490508087600001848154811061177f5761177f6119c1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806117b2576117b2611aef565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103fe565b60009150506103fe565b600081815260018301602052604081205461183e575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103fe565b5060006103fe565b6001600160a01b03811681146103ee57600080fd5b60006020828403121561186d57600080fd5b8135610fa481611846565b6000806020838503121561188b57600080fd5b823567ffffffffffffffff808211156118a357600080fd5b818501915085601f8301126118b757600080fd5b8135818111156118c657600080fd5b8660208260051b85010111156118db57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101561192e5783516001600160a01b031683529284019291840191600101611909565b50909695505050505050565b6000806040838503121561194d57600080fd5b823561195881611846565b946020939093013593505050565b60006020828403121561197857600080fd5b5035919050565b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119e957600080fd5b5051919050565b80518015158114611a0057600080fd5b919050565b60008060408385031215611a1857600080fd5b82519150611a28602084016119f0565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611a6157611a61611a31565b500290565b60008219821115611a7957611a79611a31565b500190565b600060208284031215611a9057600080fd5b610fa4826119f0565b600060208284031215611aab57600080fd5b8151610fa481611846565b600082611ad357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611aea57611aea611a31565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205f50066f5237172180dcf92905f532e7a40bf88202f9cc00b501f1b0df8b79fa64736f6c634300080a0033",
  "devdoc": {
    "author": "dForce",
    "kind": "dev",
    "methods": {
      "_acceptOwner()": {
        "details": "Accepts the admin rights, but only for pendingOwenr."
      },
      "_setPendingOwner(address)": {
        "details": "Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.",
        "params": {
          "newPendingOwner": "New pending owner."
        }
      },
      "getBLPValue(address)": {
        "details": "For external query value and status"
      },
      "getSupplyValue(address)": {
        "details": "For external query value and status"
      }
    },
    "stateVariables": {
      "BLPStakingPools": {
        "details": "EnumerableMap of all BLP Staking Pools"
      },
      "validSupplies": {
        "details": "Eligible supplied iToken"
      }
    },
    "title": "dForce's lending reward distributor Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BLPs(address)": {
        "notice": "the blp token of each blp staking pool"
      },
      "_setPendingOwner(address)": {
        "notice": "Base on the inputing parameter `newPendingOwner` to check the exact error reason."
      },
      "controller()": {
        "notice": "the controller"
      },
      "initialize(address,uint256)": {
        "notice": "Initializes the contract."
      },
      "isEligibilityManager()": {
        "notice": "Ensure this is a EligibilityManager contract."
      },
      "oracle()": {
        "notice": "the oracle"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6023,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6045,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 6048,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 6180,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4455,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "controller",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 4458,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "oracle",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 4460,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "thresholdRatio",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 4468,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "BLPStakingPools",
        "offset": 0,
        "slot": "55",
        "type": "t_struct(AddressSet)1145_storage"
      },
      {
        "astId": 4483,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "BLPs",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4487,
        "contract": "src/EligibilityManager.sol:EligibilityManager",
        "label": "validSupplies",
        "offset": 0,
        "slot": "58",
        "type": "t_struct(AddressSet)1145_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1145_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1144,
            "contract": "src/EligibilityManager.sol:EligibilityManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)830_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)830_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 825,
            "contract": "src/EligibilityManager.sol:EligibilityManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 829,
            "contract": "src/EligibilityManager.sol:EligibilityManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}