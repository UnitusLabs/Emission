{
  "address": "0xA9FAEc051954AA313b84aAC399a89aDe4583C808",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IRewardDistributorManager",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "RewardDistributor__CallerIsNotRewardManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor__ContractPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_initialize__InvalidController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_initialize__InvalidRewardDistributorManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_rescueTokens__CallerIsNotTreasury",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_setBountyRatio__RatioTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_setRewardToken__InvalidRewardToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_setTreasury__InvalidTreasury",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "RewardDistributor_updateDistributionState__TokenHasNotBeenListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributor_updateReward__AccountIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        }
      ],
      "name": "RewardDistributor_updateReward__TokenHasNotBeenListed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "hunter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "BountyClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowSpeed",
          "type": "uint256"
        }
      ],
      "name": "DistributionBorrowSpeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplySpeed",
          "type": "uint256"
        }
      ],
      "name": "DistributionSupplySpeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowSpeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplySpeed",
          "type": "uint256"
        }
      ],
      "name": "GlobalDistributionSpeedsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBountyRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBountyRatio",
          "type": "uint256"
        }
      ],
      "name": "NewBountyRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDistributionFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDistributionFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewDistributionFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "NewPendingOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributionFactor",
          "type": "uint256"
        }
      ],
      "name": "NewRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRewardToken",
          "type": "address"
        }
      ],
      "name": "NewRewardToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PausedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "iToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountIndex",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_acceptOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_distributionFactor",
          "type": "uint256"
        }
      ],
      "name": "_addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bountyRatio",
          "type": "uint256"
        }
      ],
      "name": "_setBountyRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_iTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_borrowSpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_setDistributionBorrowSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_borrowiTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_borrowSpeeds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_supplyiTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_supplySpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_setDistributionSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_iTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_supplySpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_setDistributionSupplySpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "_setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRewardToken",
          "type": "address"
        }
      ],
      "name": "_setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "_setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_borrowiTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_borrowSpeeds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_supplyiTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_supplySpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        }
      ],
      "name": "claimAllReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hunter",
          "type": "address"
        }
      ],
      "name": "claimBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_iTokens",
          "type": "address[]"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_suppliediTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_borrowediTokens",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionBorrowState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionSupplySpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionSupplyState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDistributionSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDistributionSupplySpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IRewardDistributorManager",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRewardDistributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IRewardDistributorManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isBorrow",
          "type": "bool"
        }
      ],
      "name": "updateDistributionState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isBorrow",
          "type": "bool"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_iTokens",
          "type": "address[]"
        }
      ],
      "name": "updateRewardBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5349a9538062e2dfcbec2189febacfc185a4e588e0fc4c08e7cd97ab18fbf850",
  "receipt": {
    "to": null,
    "from": "0x6b29b8af9AF126170513AE6524395E09025b214E",
    "contractAddress": "0xA9FAEc051954AA313b84aAC399a89aDe4583C808",
    "transactionIndex": 31,
    "gasUsed": "2588463",
    "logsBloom": "0x
    "blockHash": "0xabfaa90c12ed0fe19e1d9afa6238299978430da6ff6e5966b49fb29deb72d99c",
    "transactionHash": "0x5349a9538062e2dfcbec2189febacfc185a4e588e0fc4c08e7cd97ab18fbf850",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 6554991,
        "transactionHash": "0x5349a9538062e2dfcbec2189febacfc185a4e588e0fc4c08e7cd97ab18fbf850",
        "address": "0xA9FAEc051954AA313b84aAC399a89aDe4583C808",
        "topics": [
          "0x70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006b29b8af9af126170513ae6524395e09025b214e"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0xabfaa90c12ed0fe19e1d9afa6238299978430da6ff6e5966b49fb29deb72d99c"
      }
    ],
    "blockNumber": 6554991,
    "cumulativeGasUsed": "10035878",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1cD0b4aFA81568F967c769d48607796A6A2E8B71",
    "0x176594654dEe63a269E800635e3f932FE06117C4"
  ],
  "numDeployments": 2,
  "solcInputHash": "948b493f3fdd6ceb86b7f229ce56a022",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IRewardDistributorManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RewardDistributor__CallerIsNotRewardManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor__ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_initialize__InvalidController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_initialize__InvalidRewardDistributorManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_rescueTokens__CallerIsNotTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_setBountyRatio__RatioTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_setRewardToken__InvalidRewardToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_setTreasury__InvalidTreasury\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"RewardDistributor_updateDistributionState__TokenHasNotBeenListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributor_updateReward__AccountIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"}],\"name\":\"RewardDistributor_updateReward__TokenHasNotBeenListed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"BountyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowSpeed\",\"type\":\"uint256\"}],\"name\":\"DistributionBorrowSpeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplySpeed\",\"type\":\"uint256\"}],\"name\":\"DistributionSupplySpeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowSpeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplySpeed\",\"type\":\"uint256\"}],\"name\":\"GlobalDistributionSpeedsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBountyRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBountyRatio\",\"type\":\"uint256\"}],\"name\":\"NewBountyRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDistributionFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributionFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewDistributionFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributionFactor\",\"type\":\"uint256\"}],\"name\":\"NewRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"NewRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_distributionFactor\",\"type\":\"uint256\"}],\"name\":\"_addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bountyRatio\",\"type\":\"uint256\"}],\"name\":\"_setBountyRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_iTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setDistributionBorrowSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_borrowiTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_borrowSpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_supplyiTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplySpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setDistributionSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_iTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplySpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setDistributionSupplySpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardToken\",\"type\":\"address\"}],\"name\":\"_setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"_setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_borrowiTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_borrowSpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_supplyiTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplySpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hunter\",\"type\":\"address\"}],\"name\":\"claimBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_iTokens\",\"type\":\"address[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_suppliediTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_borrowediTokens\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionBorrowState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionSupplySpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionSupplyState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDistributionSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDistributionSupplySpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IRewardDistributorManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRewardDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IRewardDistributorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBorrow\",\"type\":\"bool\"}],\"name\":\"updateDistributionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBorrow\",\"type\":\"bool\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_iTokens\",\"type\":\"address[]\"}],\"name\":\"updateRewardBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dForce\",\"kind\":\"dev\",\"methods\":{\"_acceptOwner()\":{\"details\":\"Accepts the admin rights, but only for pendingOwenr.\"},\"_addRecipient(address,uint256)\":{\"details\":\"Admin function, only controller can call this\",\"params\":{\"_distributionFactor\":\"the distribution factor of the recipient\",\"_iToken\":\"the iToken to add as recipient\"}},\"_pause()\":{\"details\":\"Admin function, pause will set global speed to 0 to stop the accumulation\"},\"_setBountyRatio(uint256)\":{\"params\":{\"_bountyRatio\":\"the ratio in 1e18\"}},\"_setDistributionBorrowSpeeds(address[],uint256[])\":{\"details\":\"Admin function, will fail when paused\",\"params\":{\"_borrowSpeeds\":\"The borrow speed array\",\"_iTokens\":\"The borrow asset array\"}},\"_setDistributionSpeeds(address[],uint256[],address[],uint256[])\":{\"details\":\"Admin function, will fail when paused\",\"params\":{\"_borrowSpeeds\":\"The borrow speed array\",\"_borrowiTokens\":\"The borrow asset array\",\"_supplySpeeds\":\"The supply speed array\",\"_supplyiTokens\":\"The supply asset array\"}},\"_setDistributionSupplySpeeds(address[],uint256[])\":{\"details\":\"Admin function, will fail when paused\",\"params\":{\"_iTokens\":\"The supply asset array\",\"_supplySpeeds\":\"The supply speed array\"}},\"_setPendingOwner(address)\":{\"details\":\"Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\",\"params\":{\"newPendingOwner\":\"New pending owner.\"}},\"_setRewardToken(address)\":{\"details\":\"Admin function, only owner can call this\",\"params\":{\"_newRewardToken\":\"the address of reward token\"}},\"_setTreasury(address)\":{\"details\":\"Admin function, only owner can call this\",\"params\":{\"_newTreasury\":\"the address of treasury\"}},\"_unpause(address[],uint256[],address[],uint256[])\":{\"details\":\"Admin function\",\"params\":{\"_borrowSpeeds\":\"The borrow speed array\",\"_borrowiTokens\":\"The borrow asset array\",\"_supplySpeeds\":\"The supply speed array\",\"_supplyiTokens\":\"The supply asset array\"}},\"claimAllReward(address[])\":{\"params\":{\"_holders\":\"The account to claim for\"}},\"claimReward(address[],address[])\":{\"params\":{\"_holders\":\"The account to claim for\",\"_iTokens\":\"The _iTokens to claim from\"}},\"claimRewards(address[],address[],address[])\":{\"params\":{\"_borrowediTokens\":\"The _borrowediTokens to claim from\",\"_holders\":\"The account to claim for\",\"_suppliediTokens\":\"The _suppliediTokens to claim from\"}},\"rescueTokens(address,uint256,address)\":{\"params\":{\"_amount\":\"The amount of token to rescue\",\"_to\":\"The token to send to\",\"_token\":\"The token to rescue\"}},\"updateDistributionState(address,bool)\":{\"details\":\"Will be called every time when the iToken's supply/borrow changes\",\"params\":{\"_iToken\":\"The iToken to be updated\",\"_isBorrow\":\"whether to update the borrow state\"}},\"updateReward(address,address,bool)\":{\"details\":\"Will be called every time when the account's supply/borrow changes\",\"params\":{\"_account\":\"The account to be updated\",\"_iToken\":\"The iToken to be updated\",\"_isBorrow\":\"whether to update the borrow state\"}},\"updateRewardBatch(address[],address[])\":{\"params\":{\"_holders\":\"The account to update\",\"_iTokens\":\"The _iTokens to update\"}}},\"title\":\"dForce's lending reward distributor Contract\",\"version\":1},\"userdoc\":{\"events\":{\"BountyClaimed(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when bounty is claimed by a hunter\"},\"DistributionBorrowSpeedChanged(address,uint256)\":{\"notice\":\"Emitted when iToken's Distribution borrow speed is updated\"},\"DistributionSupplySpeedChanged(address,uint256)\":{\"notice\":\"Emitted when iToken's Distribution supply speed is updated\"},\"GlobalDistributionSpeedsChanged(uint256,uint256)\":{\"notice\":\"Emitted when Global Distribution speed for both supply and borrow are updated\"},\"NewBountyRatio(uint256,uint256)\":{\"notice\":\"Emitted when bounty ratio is changed by admin\"},\"NewDistributionFactor(address,uint256,uint256)\":{\"notice\":\"Emitted when iToken's Distribution factor is changed by admin\"},\"NewRewardToken(address,address)\":{\"notice\":\"Emitted reward token address is changed by admin\"},\"NewTreasury(address,address)\":{\"notice\":\"Emitted treasury address is changed by admin\"},\"PausedChanged(bool)\":{\"notice\":\"Emitted when mint is paused/unpaused by admin\"},\"RewardDistributed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when reward of amount is distributed into account\"}},\"kind\":\"user\",\"methods\":{\"_addRecipient(address,uint256)\":{\"notice\":\"Add the iToken as receipient\"},\"_pause()\":{\"notice\":\"Pause the reward distribution\"},\"_setBountyRatio(uint256)\":{\"notice\":\"Set bounty ratio by admin\"},\"_setDistributionBorrowSpeeds(address[],uint256[])\":{\"notice\":\"Set borrow distribution speeds\"},\"_setDistributionSpeeds(address[],uint256[],address[],uint256[])\":{\"notice\":\"Set distribution speeds\"},\"_setDistributionSupplySpeeds(address[],uint256[])\":{\"notice\":\"Set supply distribution speeds\"},\"_setPendingOwner(address)\":{\"notice\":\"Base on the inputing parameter `newPendingOwner` to check the exact error reason.\"},\"_setRewardToken(address)\":{\"notice\":\"set reward token address\"},\"_setTreasury(address)\":{\"notice\":\"set new treasury address\"},\"_unpause(address[],uint256[],address[],uint256[])\":{\"notice\":\"Unpause and set distribution speeds\"},\"bountyRatio()\":{\"notice\":\"the ratio of bounty hunter to collect from reward\"},\"claimAllReward(address[])\":{\"notice\":\"Claim reward accrued in all iTokens by the holders\"},\"claimReward(address[],address[])\":{\"notice\":\"Claim reward accrued in iTokens by the holders\"},\"claimRewards(address[],address[],address[])\":{\"notice\":\"Claim reward accrued in iTokens by the holders\"},\"controller()\":{\"notice\":\"the controller\"},\"distributionBorrowState(address)\":{\"notice\":\"the Reward distribution borrow state of each iToken\"},\"distributionBorrowerIndex(address,address)\":{\"notice\":\"the Reward distribution state of each account of each iToken\"},\"distributionFactorMantissa(address)\":{\"notice\":\"the Reward distribution factor of each iToken, 1.0 by default. stored as a mantissa\"},\"distributionSpeed(address)\":{\"notice\":\"the Reward distribution speed of each iToken\"},\"distributionSupplierIndex(address,address)\":{\"notice\":\"the Reward distribution state of each account of each iToken\"},\"distributionSupplySpeed(address)\":{\"notice\":\"the Reward distribution speed supply side of each iToken\"},\"distributionSupplyState(address)\":{\"notice\":\"the Reward distribution supply state of each iToken\"},\"globalDistributionSpeed()\":{\"notice\":\"the global Reward distribution speed\"},\"globalDistributionSupplySpeed()\":{\"notice\":\"the global Reward distribution speed for supply\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract.\"},\"isRewardDistributor()\":{\"notice\":\"Ensure this is a RewardDistributor contract.\"},\"manager()\":{\"notice\":\"the reward distributor manager address where eligible balances is stored\"},\"paused()\":{\"notice\":\"whether the reward distribution is paused\"},\"rescueTokens(address,uint256,address)\":{\"notice\":\"Rescue tokens, can only be called by treasury\"},\"reward(address)\":{\"notice\":\"the Reward distributed into each account\"},\"rewardToken()\":{\"notice\":\"the Reward token address\"},\"treasury()\":{\"notice\":\"the treasury address where the reward is stored\"},\"updateDistributionState(address,bool)\":{\"notice\":\"Update the iToken's  Reward distribution state\"},\"updateReward(address,address,bool)\":{\"notice\":\"Update the account's Reward distribution state\"},\"updateRewardBatch(address[],address[])\":{\"notice\":\"Update reward accrued in iTokens by the holders regardless of paused or not\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RewardDistributor.sol\":\"RewardDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"src/Interfaces/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress();\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist();\\nerror BaseStakingPool_initialize__StakingTokenIsZeroAddress();\\nerror BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist();\\nerror BaseStakingPool_stake__StakeAmountIsZero();\\nerror BaseStakingPool_withdraw__WithdrawAmountIsZero();\\n\\nerror BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager();\\n\\nerror BLPReward_initialize__StakingTokenIsZeroAddress();\\nerror BLPReward_initialize__RewardTokenIsZeroAddress();\\n\\nerror EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\\n    address stakingPool\\n);\\nerror EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\\n    address stakingPool\\n);\\nerror EligibilityManager_addValidSupplyInternal__InvalidSupply(address iToken);\\nerror EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\\n    address iToken\\n);\\nerror EligibilityManager_initialize__InvalidController();\\nerror EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\\n    address iToken\\n);\\nerror EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\\n    address stakingPool\\n);\\n\\n// Modifier error\\nerror RewardDistributorManager__NotController();\\n// Function errors\\nerror RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\\nerror RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_initialize__InvalidController();\\nerror RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\\nerror RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\\n\\nerror RewardDistributor__CallerIsNotRewardManager();\\nerror RewardDistributor__ContractPaused();\\nerror RewardDistributor_initialize__InvalidController();\\nerror RewardDistributor_initialize__InvalidRewardDistributorManager();\\nerror RewardDistributor_rescueTokens__CallerIsNotTreasury();\\nerror RewardDistributor_setRewardToken__InvalidRewardToken();\\nerror RewardDistributor_setTreasury__InvalidTreasury();\\nerror RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateDistributionState__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateReward__TokenHasNotBeenListed(address iToken);\\nerror RewardDistributor_updateReward__AccountIsZeroAddress();\\nerror RewardDistributor_setBountyRatio__RatioTooHigh();\\n\",\"keccak256\":\"0x3c2b854860a9c3b76109fdca02e444e2cebec7f669b6f620073bd32ef119e832\",\"license\":\"MIT\"},\"src/Interfaces/IController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface IController {\\n    /**\\n     * @notice Security checks when updating the comptroller of a market, always expect to return true.\\n     */\\n    function isController() external view returns (bool);\\n\\n    /**\\n     * @notice Return all of the iTokens\\n     * @return The list of iToken addresses\\n     */\\n    function getAlliTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Check whether a iToken is listed in controller\\n     * @param _iToken The iToken to check for\\n     * @return true if the iToken is listed otherwise false\\n     */\\n    function hasiToken(address _iToken) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n    function rewardDistributor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb64207ac0bc4ef315135c790887897f38eadca384d32e21a480e8e273187a96b\",\"license\":\"MIT\"},\"src/Interfaces/IRewardDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IController.sol\\\";\\n\\ninterface IRewardDistributor {\\n    function isRewardDistributor() external view returns (bool);\\n\\n    function controller() external view returns (IController);\\n\\n    function rewardToken() external returns (address);\\n\\n    function _setRewardToken(address newRewardToken) external;\\n\\n    /// @notice Emitted reward token address is changed by admin\\n    event NewRewardToken(address oldRewardToken, address newRewardToken);\\n\\n    function treasury() external returns (address);\\n\\n    function _setTreasury(address newTreasury) external;\\n\\n    /// @notice Emitted treasury address is changed by admin\\n    event NewTreasury(address oldTreasury, address newTreasury);\\n\\n    function _addRecipient(\\n        address _iToken,\\n        uint256 _distributionFactor\\n    ) external;\\n\\n    event NewRecipient(address iToken, uint256 distributionFactor);\\n\\n    /// @notice Emitted when mint is paused/unpaused by admin\\n    event PausedChanged(bool paused);\\n\\n    function _pause() external;\\n\\n    function _unpause(\\n        address[] calldata _borrowiTokens,\\n        uint256[] calldata _borrowSpeeds,\\n        address[] calldata _supplyiTokens,\\n        uint256[] calldata _supplySpeeds\\n    ) external;\\n\\n    /// @notice Emitted when Global Distribution speed for both supply and borrow are updated\\n    event GlobalDistributionSpeedsChanged(\\n        uint256 borrowSpeed,\\n        uint256 supplySpeed\\n    );\\n\\n    /// @notice Emitted when iToken's Distribution borrow speed is updated\\n    event DistributionBorrowSpeedChanged(address iToken, uint256 borrowSpeed);\\n\\n    /// @notice Emitted when iToken's Distribution supply speed is updated\\n    event DistributionSupplySpeedChanged(address iToken, uint256 supplySpeed);\\n\\n    /// @notice Emitted when iToken's Distribution factor is changed by admin\\n    event NewDistributionFactor(\\n        address iToken,\\n        uint256 oldDistributionFactorMantissa,\\n        uint256 newDistributionFactorMantissa\\n    );\\n\\n    /// @notice Emitted when bounty ratio is changed by admin\\n    event NewBountyRatio(uint256 oldBountyRatio, uint256 newBountyRatio);\\n\\n    function updateDistributionState(address _iToken, bool _isBorrow) external;\\n\\n    function updateReward(\\n        address _iToken,\\n        address _account,\\n        bool _isBorrow\\n    ) external;\\n\\n    function updateRewardBatch(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) external;\\n\\n    function claimReward(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) external;\\n\\n    function claimAllReward(address[] memory _holders) external;\\n\\n    function claimRewards(\\n        address[] memory _holders,\\n        address[] memory _suppliediTokens,\\n        address[] memory _borrowediTokens\\n    ) external;\\n\\n    /// @notice Emitted when reward of amount is distributed into account\\n    event RewardDistributed(\\n        address iToken,\\n        address account,\\n        uint256 amount,\\n        uint256 accountIndex\\n    );\\n\\n    function claimBounty(address _account, address _hunter) external;\\n\\n    /// @notice Emitted when bounty is claimed by a hunter\\n    event BountyClaimed(\\n        address rewardToken,\\n        address hunter,\\n        address account,\\n        uint256 bounty,\\n        uint256 reward\\n    );\\n}\\n\",\"keccak256\":\"0xa45623120087492f8006179d50730f0f1d90e7e47eee0ad89d3802f114611574\",\"license\":\"MIT\"},\"src/Interfaces/IRewardDistributorManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IRewardDistributorManager {\\n    function isRewardDistributorManager() external pure returns (bool);\\n\\n    function _addRecipient(\\n        address _iToken,\\n        uint256 _distributionFactor\\n    ) external;\\n\\n    function _setEligibilityManager(address _newEligibilityManager) external;\\n\\n    function eligibleTotalSupply(\\n        address iToken\\n    ) external view returns (uint256);\\n\\n    function eligibleTotalBorrow(\\n        address iToken\\n    ) external view returns (uint256);\\n\\n    function eligibleSupply(\\n        address iToken,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function eligibleBorrow(\\n        address iToken,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function updateEligibleBalance(address _account) external;\\n\\n    function updateEligibleBalances(address[] memory _accounts) external;\\n}\\n\",\"keccak256\":\"0x8187b2274e88fe782f36849c19f043ef03abd575471557be1e5baaecb5071557\",\"license\":\"MIT\"},\"src/Libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        _;\\n\\n        _initialized = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcbc7147c62a7be5a7bf4f195ad3dc07ca07f2b1de52b3e010b45ebdf17e9cc50\",\"license\":\"MIT\"},\"src/Libraries/Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\n */\\ncontract Ownable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    address payable public owner;\\n\\n    /**\\n     * @dev Returns the address of the current pending owner.\\n     */\\n    address payable public pendingOwner;\\n\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\n    event NewPendingOwner(\\n        address indexed oldPendingOwner,\\n        address indexed newPendingOwner\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal {\\n        owner = payable(msg.sender);\\n        emit NewOwner(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\n     * @param newPendingOwner New pending owner.\\n     */\\n    function _setPendingOwner(\\n        address payable newPendingOwner\\n    ) external onlyOwner {\\n        require(\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\n        );\\n\\n        // Gets current owner.\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Sets new pending owner.\\n        pendingOwner = newPendingOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n    }\\n\\n    /**\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\n     */\\n    function _acceptOwner() external {\\n        require(\\n            msg.sender == pendingOwner,\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\n        );\\n\\n        // Gets current values for events.\\n        address oldOwner = owner;\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Set the new contract owner.\\n        owner = pendingOwner;\\n\\n        // Clear the pendingOwner.\\n        pendingOwner = payable(address(0));\\n\\n        emit NewOwner(oldOwner, owner);\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x558d48351f76c1d19134d3a686b7ebca79ec9bb4b900f6aa8eaecd951885ca4c\",\"license\":\"MIT\"},\"src/Libraries/RatioMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nlibrary RatioMath {\\n    uint256 private constant BASE = 10 ** 18;\\n    uint256 private constant DOUBLE = 10 ** 36;\\n\\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x + (y - 1)) / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * y) / BASE;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * BASE) / y;\\n    }\\n\\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * (BASE) + (y - 1)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x5f2fee3fede7ea0fd09da82256284211cf6431cc40ad4be4055b0792955ac3b3\",\"license\":\"MIT\"},\"src/RewardDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./Interfaces/IController.sol\\\";\\nimport \\\"./Interfaces/IRewardDistributorManager.sol\\\";\\nimport \\\"./Libraries/RatioMath.sol\\\";\\nimport \\\"./Libraries/Ownable.sol\\\";\\nimport \\\"./Libraries/Initializable.sol\\\";\\nimport \\\"./Interfaces/Errors.sol\\\";\\n\\n/**\\n * @title dForce's lending reward distributor Contract\\n * @author dForce\\n */\\ncontract RewardDistributor is Initializable, Ownable, IRewardDistributor {\\n    using RatioMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice the controller\\n    IController public override controller;\\n\\n    /// @notice the global Reward distribution speed\\n    uint256 public globalDistributionSpeed;\\n\\n    /// @notice the Reward distribution speed of each iToken\\n    mapping(address => uint256) public distributionSpeed;\\n\\n    /// @notice the Reward distribution factor of each iToken, 1.0 by default. stored as a mantissa\\n    mapping(address => uint256) public distributionFactorMantissa;\\n\\n    struct DistributionState {\\n        // Token's last updated index, stored as a mantissa\\n        uint256 index;\\n        // The block number the index was last updated at\\n        uint256 block;\\n        // The block timestamp the index was last updated at\\n        uint256 timestamp;\\n    }\\n\\n    /// @notice the Reward distribution supply state of each iToken\\n    mapping(address => DistributionState) public distributionSupplyState;\\n    /// @notice the Reward distribution borrow state of each iToken\\n    mapping(address => DistributionState) public distributionBorrowState;\\n\\n    /// @notice the Reward distribution state of each account of each iToken\\n    mapping(address => mapping(address => uint256))\\n        public distributionSupplierIndex;\\n    /// @notice the Reward distribution state of each account of each iToken\\n    mapping(address => mapping(address => uint256))\\n        public distributionBorrowerIndex;\\n\\n    /// @notice the Reward distributed into each account\\n    mapping(address => uint256) public reward;\\n\\n    /// @notice the Reward token address\\n    address public override rewardToken;\\n\\n    /// @notice whether the reward distribution is paused\\n    bool public paused;\\n\\n    /// @notice the Reward distribution speed supply side of each iToken\\n    mapping(address => uint256) public distributionSupplySpeed;\\n\\n    /// @notice the global Reward distribution speed for supply\\n    uint256 public globalDistributionSupplySpeed;\\n\\n    /// @notice the treasury address where the reward is stored\\n    address public override treasury;\\n\\n    /// @notice the reward distributor manager address where eligible balances is stored\\n    IRewardDistributorManager public manager;\\n\\n    /// @notice the ratio of bounty hunter to collect from reward\\n    uint256 public bountyRatio;\\n    uint256 constant BOUNTY_RATIO_MAX = 1e17; // max 10%\\n\\n    constructor(IController _controller, IRewardDistributorManager _manager) {\\n        initialize(_controller, _manager);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the controller.\\n     */\\n    modifier onlyManager() {\\n        if (msg.sender != address(manager)) {\\n            revert RewardDistributor__CallerIsNotRewardManager();\\n        }\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        if (paused) {\\n            revert RewardDistributor__ContractPaused();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     */\\n    function initialize(\\n        IController _controller,\\n        IRewardDistributorManager _manager\\n    ) public initializer {\\n        if (!_controller.isController()) {\\n            revert RewardDistributor_initialize__InvalidController();\\n        }\\n        if (!_manager.isRewardDistributorManager()) {\\n            revert RewardDistributor_initialize__InvalidRewardDistributorManager();\\n        }\\n\\n        __Ownable_init();\\n        controller = _controller;\\n        manager = _manager;\\n        paused = true;\\n    }\\n\\n    /*********************************/\\n    /******** Security Check *********/\\n    /*********************************/\\n\\n    /**\\n     * @notice Ensure this is a RewardDistributor contract.\\n     */\\n    function isRewardDistributor() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice set reward token address\\n     * @dev Admin function, only owner can call this\\n     * @param _newRewardToken the address of reward token\\n     */\\n    function _setRewardToken(\\n        address _newRewardToken\\n    ) external override onlyOwner {\\n        address _oldRewardToken = rewardToken;\\n        if (\\n            _newRewardToken == address(0) || _newRewardToken == _oldRewardToken\\n        ) {\\n            revert RewardDistributor_setRewardToken__InvalidRewardToken();\\n        }\\n\\n        rewardToken = _newRewardToken;\\n        emit NewRewardToken(_oldRewardToken, _newRewardToken);\\n    }\\n\\n    /**\\n     * @notice set new treasury address\\n     * @dev Admin function, only owner can call this\\n     * @param _newTreasury the address of treasury\\n     */\\n    function _setTreasury(address _newTreasury) external override onlyOwner {\\n        address _oldTreasury = treasury;\\n        if (_newTreasury == address(0) || _newTreasury == _oldTreasury) {\\n            revert RewardDistributor_setTreasury__InvalidTreasury();\\n        }\\n\\n        treasury = _newTreasury;\\n        emit NewTreasury(_oldTreasury, _newTreasury);\\n    }\\n\\n    /**\\n     * @notice Add the iToken as receipient\\n     * @dev Admin function, only controller can call this\\n     * @param _iToken the iToken to add as recipient\\n     * @param _distributionFactor the distribution factor of the recipient\\n     */\\n    function _addRecipient(\\n        address _iToken,\\n        uint256 _distributionFactor\\n    ) external override onlyManager {\\n        distributionFactorMantissa[_iToken] = _distributionFactor;\\n        distributionSupplyState[_iToken] = DistributionState({\\n            index: 0,\\n            block: block.number,\\n            timestamp: block.timestamp\\n        });\\n        distributionBorrowState[_iToken] = DistributionState({\\n            index: 0,\\n            block: block.number,\\n            timestamp: block.timestamp\\n        });\\n\\n        emit NewRecipient(_iToken, _distributionFactor);\\n    }\\n\\n    /**\\n     * @notice Pause the reward distribution\\n     * @dev Admin function, pause will set global speed to 0 to stop the accumulation\\n     */\\n    function _pause() external override onlyOwner {\\n        // Set the global distribution speed to 0 to stop accumulation\\n        address[] memory _iTokens = controller.getAlliTokens();\\n        uint256 _len = _iTokens.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _setDistributionBorrowSpeed(_iTokens[i], 0);\\n            _setDistributionSupplySpeed(_iTokens[i], 0);\\n        }\\n\\n        _refreshGlobalDistributionSpeeds();\\n\\n        _setPaused(true);\\n    }\\n\\n    /**\\n     * @notice Unpause and set distribution speeds\\n     * @dev Admin function\\n     * @param _borrowiTokens The borrow asset array\\n     * @param _borrowSpeeds  The borrow speed array\\n     * @param _supplyiTokens The supply asset array\\n     * @param _supplySpeeds  The supply speed array\\n     */\\n    function _unpause(\\n        address[] calldata _borrowiTokens,\\n        uint256[] calldata _borrowSpeeds,\\n        address[] calldata _supplyiTokens,\\n        uint256[] calldata _supplySpeeds\\n    ) external override onlyOwner {\\n        _setPaused(false);\\n\\n        _setDistributionSpeedsInternal(\\n            _borrowiTokens,\\n            _borrowSpeeds,\\n            _supplyiTokens,\\n            _supplySpeeds\\n        );\\n\\n        _refreshGlobalDistributionSpeeds();\\n    }\\n\\n    /**\\n     * @notice Pause/Unpause the reward distribution\\n     * @dev Admin function\\n     * @param _paused whether to pause/unpause the distribution\\n     */\\n    function _setPaused(bool _paused) internal {\\n        paused = _paused;\\n        emit PausedChanged(_paused);\\n    }\\n\\n    /**\\n     * @notice Set distribution speeds\\n     * @dev Admin function, will fail when paused\\n     * @param _borrowiTokens The borrow asset array\\n     * @param _borrowSpeeds  The borrow speed array\\n     * @param _supplyiTokens The supply asset array\\n     * @param _supplySpeeds  The supply speed array\\n     */\\n    function _setDistributionSpeeds(\\n        address[] calldata _borrowiTokens,\\n        uint256[] calldata _borrowSpeeds,\\n        address[] calldata _supplyiTokens,\\n        uint256[] calldata _supplySpeeds\\n    ) external onlyOwner whenNotPaused {\\n        _setDistributionSpeedsInternal(\\n            _borrowiTokens,\\n            _borrowSpeeds,\\n            _supplyiTokens,\\n            _supplySpeeds\\n        );\\n\\n        _refreshGlobalDistributionSpeeds();\\n    }\\n\\n    function _setDistributionSpeedsInternal(\\n        address[] memory _borrowiTokens,\\n        uint256[] memory _borrowSpeeds,\\n        address[] memory _supplyiTokens,\\n        uint256[] memory _supplySpeeds\\n    ) internal {\\n        _setDistributionBorrowSpeedsInternal(_borrowiTokens, _borrowSpeeds);\\n        _setDistributionSupplySpeedsInternal(_supplyiTokens, _supplySpeeds);\\n    }\\n\\n    /**\\n     * @notice Set borrow distribution speeds\\n     * @dev Admin function, will fail when paused\\n     * @param _iTokens The borrow asset array\\n     * @param _borrowSpeeds  The borrow speed array\\n     */\\n    function _setDistributionBorrowSpeeds(\\n        address[] calldata _iTokens,\\n        uint256[] calldata _borrowSpeeds\\n    ) external onlyOwner whenNotPaused {\\n        _setDistributionBorrowSpeedsInternal(_iTokens, _borrowSpeeds);\\n\\n        _refreshGlobalDistributionSpeeds();\\n    }\\n\\n    /**\\n     * @notice Set supply distribution speeds\\n     * @dev Admin function, will fail when paused\\n     * @param _iTokens The supply asset array\\n     * @param _supplySpeeds The supply speed array\\n     */\\n    function _setDistributionSupplySpeeds(\\n        address[] calldata _iTokens,\\n        uint256[] calldata _supplySpeeds\\n    ) external onlyOwner whenNotPaused {\\n        _setDistributionSupplySpeedsInternal(_iTokens, _supplySpeeds);\\n\\n        _refreshGlobalDistributionSpeeds();\\n    }\\n\\n    function _refreshGlobalDistributionSpeeds() internal {\\n        address[] memory _iTokens = controller.getAlliTokens();\\n        uint256 _len = _iTokens.length;\\n        uint256 _borrowSpeed;\\n        uint256 _supplySpeed;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _borrowSpeed = _borrowSpeed + distributionSpeed[_iTokens[i]];\\n            _supplySpeed = _supplySpeed + distributionSupplySpeed[_iTokens[i]];\\n        }\\n\\n        globalDistributionSpeed = _borrowSpeed;\\n        globalDistributionSupplySpeed = _supplySpeed;\\n\\n        emit GlobalDistributionSpeedsChanged(_borrowSpeed, _supplySpeed);\\n    }\\n\\n    function _setDistributionBorrowSpeedsInternal(\\n        address[] memory _iTokens,\\n        uint256[] memory _borrowSpeeds\\n    ) internal {\\n        if (_iTokens.length != _borrowSpeeds.length) {\\n            revert RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch();\\n        }\\n\\n        uint256 _len = _iTokens.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _setDistributionBorrowSpeed(_iTokens[i], _borrowSpeeds[i]);\\n        }\\n    }\\n\\n    function _setDistributionSupplySpeedsInternal(\\n        address[] memory _iTokens,\\n        uint256[] memory _supplySpeeds\\n    ) internal {\\n        if (_iTokens.length != _supplySpeeds.length) {\\n            revert RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch();\\n        }\\n\\n        uint256 _len = _iTokens.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _setDistributionSupplySpeed(_iTokens[i], _supplySpeeds[i]);\\n        }\\n    }\\n\\n    function _setDistributionBorrowSpeed(\\n        address _iToken,\\n        uint256 _borrowSpeed\\n    ) internal {\\n        // iToken must have been listed\\n        if (!controller.hasiToken(_iToken)) {\\n            revert RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed(\\n                _iToken\\n            );\\n        }\\n\\n        // Update borrow state before updating new speed\\n        _updateDistributionState(_iToken, true);\\n\\n        distributionSpeed[_iToken] = _borrowSpeed;\\n        emit DistributionBorrowSpeedChanged(_iToken, _borrowSpeed);\\n    }\\n\\n    function _setDistributionSupplySpeed(\\n        address _iToken,\\n        uint256 _supplySpeed\\n    ) internal {\\n        // iToken must have been listed\\n        if (!controller.hasiToken(_iToken)) {\\n            revert RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed(\\n                _iToken\\n            );\\n        }\\n\\n        // Update supply state before updating new speed\\n        _updateDistributionState(_iToken, false);\\n\\n        distributionSupplySpeed[_iToken] = _supplySpeed;\\n        emit DistributionSupplySpeedChanged(_iToken, _supplySpeed);\\n    }\\n\\n    /**\\n     * @notice Update the iToken's  Reward distribution state\\n     * @dev Will be called every time when the iToken's supply/borrow changes\\n     * @param _iToken The iToken to be updated\\n     * @param _isBorrow whether to update the borrow state\\n     */\\n    function updateDistributionState(\\n        address _iToken,\\n        bool _isBorrow\\n    ) external override {\\n        // Skip all updates if it is paused\\n        if (paused) {\\n            return;\\n        }\\n\\n        _updateDistributionState(_iToken, _isBorrow);\\n    }\\n\\n    function _updateDistributionState(\\n        address _iToken,\\n        bool _isBorrow\\n    ) internal {\\n        if (!controller.hasiToken(_iToken)) {\\n            revert RewardDistributor_updateDistributionState__TokenHasNotBeenListed(\\n                _iToken\\n            );\\n        }\\n\\n        DistributionState storage state = _isBorrow\\n            ? distributionBorrowState[_iToken]\\n            : distributionSupplyState[_iToken];\\n\\n        uint256 _speed = _isBorrow\\n            ? distributionSpeed[_iToken]\\n            : distributionSupplySpeed[_iToken];\\n\\n        uint256 _blockTimestamp = block.timestamp;\\n        uint256 _deltaSecs = _blockTimestamp - state.timestamp;\\n\\n        if (_deltaSecs > 0 && _speed > 0) {\\n            uint256 _totalToken = _isBorrow\\n                ? manager.eligibleTotalBorrow(_iToken)\\n                : manager.eligibleTotalSupply(_iToken);\\n            uint256 _totalDistributed = _speed * _deltaSecs;\\n\\n            // Reward distributed per token since last time\\n            uint256 _distributedPerToken = _totalToken > 0\\n                ? _totalDistributed.rdiv(_totalToken)\\n                : 0;\\n\\n            state.index = state.index + _distributedPerToken;\\n        }\\n\\n        state.timestamp = _blockTimestamp;\\n    }\\n\\n    /**\\n     * @notice Update the account's Reward distribution state\\n     * @dev Will be called every time when the account's supply/borrow changes\\n     * @param _iToken The iToken to be updated\\n     * @param _account The account to be updated\\n     * @param _isBorrow whether to update the borrow state\\n     */\\n    function updateReward(\\n        address _iToken,\\n        address _account,\\n        bool _isBorrow\\n    ) external override {\\n        _updateReward(_iToken, _account, _isBorrow);\\n    }\\n\\n    function _updateReward(\\n        address _iToken,\\n        address _account,\\n        bool _isBorrow\\n    ) internal {\\n        if (_account == address(0)) {\\n            revert RewardDistributor_updateReward__AccountIsZeroAddress();\\n        }\\n        if (!controller.hasiToken(_iToken)) {\\n            revert RewardDistributor_updateReward__TokenHasNotBeenListed(\\n                _iToken\\n            );\\n        }\\n\\n        uint256 _iTokenIndex;\\n        uint256 _accountIndex;\\n        uint256 _accountBalance;\\n        if (_isBorrow) {\\n            _iTokenIndex = distributionBorrowState[_iToken].index;\\n            _accountIndex = distributionBorrowerIndex[_iToken][_account];\\n            _accountBalance = manager.eligibleBorrow(_iToken, _account);\\n\\n            // Update the account state to date\\n            distributionBorrowerIndex[_iToken][_account] = _iTokenIndex;\\n        } else {\\n            _iTokenIndex = distributionSupplyState[_iToken].index;\\n            _accountIndex = distributionSupplierIndex[_iToken][_account];\\n            _accountBalance = manager.eligibleSupply(_iToken, _account);\\n\\n            // Update the account state to date\\n            distributionSupplierIndex[_iToken][_account] = _iTokenIndex;\\n        }\\n\\n        uint256 _deltaIndex = _iTokenIndex - _accountIndex;\\n        uint256 _amount = _accountBalance.rmul(_deltaIndex);\\n\\n        if (_amount > 0) {\\n            reward[_account] = reward[_account] + _amount;\\n\\n            emit RewardDistributed(_iToken, _account, _amount, _accountIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward accrued in iTokens by the holders regardless of paused or not\\n     * @param _holders The account to update\\n     * @param _iTokens The _iTokens to update\\n     */\\n    function updateRewardBatch(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) public override {\\n        // Update rewards for all _iTokens for holders\\n        for (uint256 i = 0; i < _iTokens.length; i++) {\\n            address _iToken = _iTokens[i];\\n            _updateDistributionState(_iToken, false);\\n            _updateDistributionState(_iToken, true);\\n            for (uint256 j = 0; j < _holders.length; j++) {\\n                _updateReward(_iToken, _holders[j], false);\\n                _updateReward(_iToken, _holders[j], true);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward accrued in iTokens by the holders regardless of paused or not\\n     * @param _holders The account to update\\n     * @param _iTokens The _iTokens to update\\n     * @param _isBorrow whether to update the borrow state\\n     */\\n    function _updateRewards(\\n        address[] memory _holders,\\n        address[] memory _iTokens,\\n        bool _isBorrow\\n    ) internal {\\n        // Update rewards for all _iTokens for holders\\n        for (uint256 i = 0; i < _iTokens.length; i++) {\\n            address _iToken = _iTokens[i];\\n            _updateDistributionState(_iToken, _isBorrow);\\n            for (uint256 j = 0; j < _holders.length; j++) {\\n                _updateReward(_iToken, _holders[j], _isBorrow);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim reward accrued in iTokens by the holders\\n     * @param _holders The account to claim for\\n     * @param _iTokens The _iTokens to claim from\\n     */\\n    function claimReward(\\n        address[] memory _holders,\\n        address[] memory _iTokens\\n    ) public override onlyManager {\\n        updateRewardBatch(_holders, _iTokens);\\n\\n        // Withdraw all reward for all holders\\n        for (uint256 j = 0; j < _holders.length; j++) {\\n            address _account = _holders[j];\\n            uint256 _reward = reward[_account];\\n            if (_reward > 0) {\\n                reward[_account] = 0;\\n                IERC20(rewardToken).safeTransferFrom(\\n                    treasury,\\n                    _account,\\n                    _reward\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim reward accrued in iTokens by the holders\\n     * @param _holders The account to claim for\\n     * @param _suppliediTokens The _suppliediTokens to claim from\\n     * @param _borrowediTokens The _borrowediTokens to claim from\\n     */\\n    function claimRewards(\\n        address[] memory _holders,\\n        address[] memory _suppliediTokens,\\n        address[] memory _borrowediTokens\\n    ) external override onlyManager {\\n        _updateRewards(_holders, _suppliediTokens, false);\\n        _updateRewards(_holders, _borrowediTokens, true);\\n\\n        // Withdraw all reward for all holders\\n        for (uint256 j = 0; j < _holders.length; j++) {\\n            address _account = _holders[j];\\n            uint256 _reward = reward[_account];\\n            if (_reward > 0) {\\n                reward[_account] = 0;\\n                IERC20(rewardToken).safeTransferFrom(\\n                    treasury,\\n                    _account,\\n                    _reward\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim reward accrued in all iTokens by the holders\\n     * @param _holders The account to claim for\\n     */\\n    function claimAllReward(\\n        address[] memory _holders\\n    ) external override onlyManager {\\n        claimReward(_holders, controller.getAlliTokens());\\n    }\\n\\n    /**\\n     * @notice Rescue tokens, can only be called by treasury\\n     * @param _token The token to rescue\\n     * @param _amount The amount of token to rescue\\n     * @param _to The token to send to\\n     */\\n    function rescueTokens(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external {\\n        if (msg.sender != treasury) {\\n            revert RewardDistributor_rescueTokens__CallerIsNotTreasury();\\n        }\\n\\n        // transfer _to\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Set bounty ratio by admin\\n     * @param _bountyRatio the ratio in 1e18\\n     */\\n    function _setBountyRatio(uint256 _bountyRatio) external onlyOwner {\\n        if (_bountyRatio > BOUNTY_RATIO_MAX) {\\n            revert RewardDistributor_setBountyRatio__RatioTooHigh();\\n        }\\n\\n        uint256 _oldBountyRatio = bountyRatio;\\n        bountyRatio = _bountyRatio;\\n        emit NewBountyRatio(_oldBountyRatio, _bountyRatio);\\n    }\\n\\n    function claimBounty(\\n        address _account,\\n        address _hunter\\n    ) external onlyManager {\\n        uint256 _reward = reward[_account];\\n\\n        if (_reward > 0) {\\n            reward[_account] = 0;\\n            uint256 _bounty = _reward.rmul(bountyRatio);\\n\\n            IERC20(rewardToken).safeTransferFrom(treasury, _hunter, _bounty);\\n            IERC20(rewardToken).safeTransferFrom(\\n                treasury,\\n                _account,\\n                _reward - _bounty\\n            );\\n\\n            emit BountyClaimed(\\n                rewardToken,\\n                _hunter,\\n                _account,\\n                _bounty,\\n                _reward\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33b47204c51c2b7c412ec3f8b9680d5f0560974758e84eb2fe1d98a24674381e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e8e38038062002e8e833981016040819052620000349162000276565b62000040828262000048565b5050620002e0565b60005460ff1615620000b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b816001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c9190620002b5565b6200013a57604051631ebe9fc760e31b815260040160405180910390fd5b806001600160a01b031663eb5bf95d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000179573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019f9190620002b5565b620001bd5760405163786b8ff960e01b815260040160405180910390fd5b620001c762000215565b603480546001600160a01b039384166001600160a01b03199182161790915560418054929093169116179055603d805460ff60a01b1916600160a01b1790556000805460ff19166001179055565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6001600160a01b03811681146200027357600080fd5b50565b600080604083850312156200028a57600080fd5b825162000297816200025d565b6020840151909250620002aa816200025d565b809150509250929050565b600060208284031215620002c857600080fd5b81518015158114620002d957600080fd5b9392505050565b612b9e80620002f06000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80637d3572fd1161013b578063caece2fe116100b8578063f7d6bdf21161007c578063f7d6bdf21461058c578063fc4d33f91461059f578063fca62699146105a7578063ff0427ca146105ba578063ff10302a146105da57600080fd5b8063caece2fe14610515578063ddcbb24514610528578063e30c397814610553578063f77c479114610566578063f7c618c11461057957600080fd5b8063a82e84e9116100ff578063a82e84e9146104a9578063acea9d4d146104bc578063b37fd190146104dc578063bdfa0c99146104ef578063c88bf5e81461050257600080fd5b80637d3572fd146104425780638ceb13d4146104555780638da5cb5b146104685780638de4821914610480578063a1fcb8fc146104a057600080fd5b806349318865116101c95780635f1c86651161018d5780635f1c8665146103ba57806361d027b3146103cd5780636353586b146103e05780636864e3ea146104005780636e96dfd71461042f57600080fd5b8063493188651461035457806353889535146103675780635658fec31461037a5780635c267f6d1461038d5780635c975abb1461039657600080fd5b806338f1f57f1161021057806338f1f57f146102e75780633f7d00f5146102fa57806342e7728414610303578063481c6a7514610316578063485cc9551461034157600080fd5b806320f18edd146102425780632a08922c14610291578063320b2ad9146102a6578063340c3df8146102ae575b600080fd5b61027161025036600461245a565b60386020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b6102a461029f36600461245a565b6105e1565b005b6102a46106c2565b6102d96102bc366004612477565b603b60209081526000928352604080842090915290825290205481565b604051908152602001610288565b6102a46102f53660046124fc565b6107e3565b6102d960425481565b6102a461031136600461269f565b61091e565b604154610329906001600160a01b031681565b6040516001600160a01b039091168152602001610288565b6102a461034f366004612477565b6109cb565b6102a46103623660046126d4565b610b89565b6102a46103753660046126ed565b610c1f565b6102a4610388366004612759565b610cf4565b6102d9603f5481565b603d546103aa90600160a01b900460ff1681565b6040519015158152602001610288565b6102a46103c8366004612785565b610ddd565b604054610329906001600160a01b031681565b6102d96103ee36600461245a565b603c6020526000908152604090205481565b61027161040e36600461245a565b60396020526000908152604090208054600182015460029092015490919083565b6102a461043d36600461245a565b610e9f565b6102a46104503660046127f7565b610fcc565b6102a4610463366004612477565b610fd7565b6000546103299061010090046001600160a01b031681565b6102d961048e36600461245a565b603e6020526000908152604090205481565b6102d960355481565b6102a46104b7366004612842565b6110ff565b6102d96104ca36600461245a565b60376020526000908152604090205481565b6102a46104ea3660046128ca565b6111d8565b6102a46104fd366004612785565b611217565b6102a46105103660046126ed565b6112e2565b6102a4610523366004612901565b6113a9565b6102d9610536366004612477565b603a60209081526000928352604080842090915290825290205481565b600154610329906001600160a01b031681565b603454610329906001600160a01b031681565b603d54610329906001600160a01b031681565b6102a461059a36600461245a565b6113c9565b6102a461149c565b6102a46105b53660046124fc565b6115b2565b6102d96105c836600461245a565b60366020526000908152604090205481565b60016103aa565b60005461010090046001600160a01b031633146106195760405162461bcd60e51b81526004016106109061292f565b60405180910390fd5b6040546001600160a01b0390811690821615806106475750806001600160a01b0316826001600160a01b0316145b1561066557604051639373097560e01b815260040160405180910390fd5b604080546001600160a01b0319166001600160a01b0384811691821783558251908416815260208101919091527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b22822591015b60405180910390a15050565b60005461010090046001600160a01b031633146106f15760405162461bcd60e51b81526004016106109061292f565b603454604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa15801561073a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107629190810190612971565b805190915060005b818110156107cc5761079683828151811061078757610787612a00565b602002602001015160006115eb565b6107ba8382815181106107ab576107ab612a00565b602002602001015160006116dd565b806107c481612a2c565b91505061076a565b506107d56117cf565b6107df600161193d565b5050565b60005461010090046001600160a01b031633146108125760405162461bcd60e51b81526004016106109061292f565b603d54600160a01b900460ff161561083d57604051639930363560e01b815260040160405180910390fd5b61090c88888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061199592505050565b6109146117cf565b5050505050505050565b6041546001600160a01b0316331461094957604051633a45e5f360e21b815260040160405180910390fd5b6109c881603460009054906101000a90046001600160a01b03166001600160a01b03166360a8a9316040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104fd9190810190612971565b50565b60005460ff1615610a355760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610610565b816001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a979190612a47565b610ab457604051631ebe9fc760e31b815260040160405180910390fd5b806001600160a01b031663eb5bf95d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190612a47565b610b335760405163786b8ff960e01b815260040160405180910390fd5b610b3b6119a9565b603480546001600160a01b039384166001600160a01b03199182161790915560418054929093169116179055603d805460ff60a01b1916600160a01b1790556000805460ff19166001179055565b60005461010090046001600160a01b03163314610bb85760405162461bcd60e51b81526004016106109061292f565b67016345785d8a0000811115610be157604051630c2ee60760e41b815260040160405180910390fd5b604280549082905560408051828152602081018490527f1c455768ccd776125cf627db9acaecb45b00b587a0eecb26d97be99e780efeab91016106b6565b60005461010090046001600160a01b03163314610c4e5760405162461bcd60e51b81526004016106109061292f565b603d54600160a01b900460ff1615610c7957604051639930363560e01b815260040160405180910390fd5b610ce6848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506119f192505050565b610cee6117cf565b50505050565b6041546001600160a01b03163314610d1f57604051633a45e5f360e21b815260040160405180910390fd5b6001600160a01b03821660008181526037602090815260408083208590558051606080820183528482524382850181815242848601818152898952603888528689209551865591516001808701919091559151600295860155855193840186528784528387019283528386019081528888526039875296859020925183559051908201559351930192909255815192835282018390527f182e1c0b34607d1b7c3312ff9a78e613c0a4c045d1460fd236374d04b5c2954f91016106b6565b60005b8151811015610e9a576000828281518110610dfd57610dfd612a00565b60200260200101519050610e12816000611a6e565b610e1d816001611a6e565b60005b8451811015610e8557610e4e82868381518110610e3f57610e3f612a00565b60200260200101516000611ce7565b610e7382868381518110610e6457610e64612a00565b60200260200101516001611ce7565b80610e7d81612a2c565b915050610e20565b50508080610e9290612a2c565b915050610de0565b505050565b60005461010090046001600160a01b03163314610ece5760405162461bcd60e51b81526004016106109061292f565b6001600160a01b03811615801590610ef457506001546001600160a01b03828116911614155b610f7a5760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a401610610565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b610e9a838383611ce7565b6041546001600160a01b0316331461100257604051633a45e5f360e21b815260040160405180910390fd5b6001600160a01b0382166000908152603c60205260409020548015610e9a576001600160a01b0383166000908152603c6020526040812081905560425461104a908390612005565b604054603d5491925061106b916001600160a01b039081169116858461202b565b60405461109a906001600160a01b0316856110868486612a64565b603d546001600160a01b031692919061202b565b603d54604080516001600160a01b03928316815285831660208201529186169082015260608101829052608081018390527fe4ef9b6ca5bc6ad14e41aef6830d82a4728585a30713f7960de7446f5c610f429060a0015b60405180910390a150505050565b6041546001600160a01b0316331461112a57604051633a45e5f360e21b815260040160405180910390fd5b61113683836000612096565b61114283826001612096565b60005b8351811015610cee57600084828151811061116257611162612a00565b6020908102919091018101516001600160a01b0381166000908152603c90925260409091205490915080156111c3576001600160a01b038083166000908152603c60205260408082209190915554603d546111c3929081169116848461202b565b505080806111d090612a2c565b915050611145565b6040546001600160a01b031633146112035760405163095bdd5360e21b815260040160405180910390fd5b610e9a6001600160a01b0384168284612121565b6041546001600160a01b0316331461124257604051633a45e5f360e21b815260040160405180910390fd5b61124c8282610ddd565b60005b8251811015610e9a57600083828151811061126c5761126c612a00565b6020908102919091018101516001600160a01b0381166000908152603c90925260409091205490915080156112cd576001600160a01b038083166000908152603c60205260408082209190915554603d546112cd929081169116848461202b565b505080806112da90612a2c565b91505061124f565b60005461010090046001600160a01b031633146113115760405162461bcd60e51b81526004016106109061292f565b603d54600160a01b900460ff161561133c57604051639930363560e01b815260040160405180910390fd5b610ce68484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061215192505050565b603d54600160a01b900460ff16156113bf575050565b6107df8282611a6e565b60005461010090046001600160a01b031633146113f85760405162461bcd60e51b81526004016106109061292f565b603d546001600160a01b0390811690821615806114265750806001600160a01b0316826001600160a01b0316145b15611444576040516303788dd960e11b815260040160405180910390fd5b603d80546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527f7bdb05f6c3fc55361bbc64ceeb084448a135da92bade17eb83ea386a431aa49291016106b6565b6001546001600160a01b031633146115045760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b6064820152608401610610565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b60005461010090046001600160a01b031633146115e15760405162461bcd60e51b81526004016106109061292f565b61083d600061193d565b603454604051632214743160e11b81526001600160a01b03848116600483015290911690634428e86290602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116599190612a47565b61168157604051635a1896a360e11b81526001600160a01b0383166004820152602401610610565b61168c826001611a6e565b6001600160a01b038216600081815260366020908152604091829020849055815192835282018390527fc166a4ce2a20ceba9db9ef1b63803b25bca50a30d1fae6587eced7cc29366e9891016106b6565b603454604051632214743160e11b81526001600160a01b03848116600483015290911690634428e86290602401602060405180830381865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612a47565b61177357604051630967edbf60e01b81526001600160a01b0383166004820152602401610610565b61177e826000611a6e565b6001600160a01b0382166000818152603e6020908152604091829020849055815192835282018390527f76037bc3f78973da9e019b9d16cf5396ca9d59f32ba6994c4325bdea7e0d5c1191016106b6565b603454604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa158015611818573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118409190810190612971565b8051909150600080805b838110156118fc576036600086838151811061186857611868612a00565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548361189c9190612a7b565b9250603e60008683815181106118b4576118b4612a00565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054826118e89190612a7b565b9150806118f481612a2c565b91505061184a565b506035829055603f81905560408051838152602081018390527fd36b3d23325a889a30950d79f56fc3a25c517ff2956d2273645dca7a727889bb91016110f1565b603d8054821515600160a01b0260ff60a01b199091161790556040517fd83d5281277e107f080e362699d46082adb74e7dc6a9bccbc87d8ae9533add449061198a90831515815260200190565b60405180910390a150565b61199f8484612151565b610cee82826119f1565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b8051825114611a13576040516353df09e960e11b815260040160405180910390fd5b815160005b81811015610cee57611a5c848281518110611a3557611a35612a00565b6020026020010151848381518110611a4f57611a4f612a00565b60200260200101516116dd565b80611a6681612a2c565b915050611a18565b603454604051632214743160e11b81526001600160a01b03848116600483015290911690634428e86290602401602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190612a47565b611b0457604051632be246d160e21b81526001600160a01b0383166004820152602401610610565b600081611b28576001600160a01b0383166000908152603860205260409020611b41565b6001600160a01b03831660009081526039602052604090205b9050600082611b68576001600160a01b0384166000908152603e6020526040902054611b82565b6001600160a01b0384166000908152603660205260409020545b60028301549091504290600090611b999083612a64565b9050600081118015611bab5750600083115b15611cd857600085611c2a576041546040516306bad18d60e11b81526001600160a01b03898116600483015290911690630d75a31a90602401602060405180830381865afa158015611c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c259190612a93565b611c98565b604154604051637829db0160e01b81526001600160a01b03898116600483015290911690637829db0190602401602060405180830381865afa158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c989190612a93565b90506000611ca68386612aac565b90506000808311611cb8576000611cc2565b611cc282846121ce565b8754909150611cd2908290612a7b565b87555050505b50600290920191909155505050565b6001600160a01b038216611d0e576040516398dd2fc360e01b815260040160405180910390fd5b603454604051632214743160e11b81526001600160a01b03858116600483015290911690634428e86290602401602060405180830381865afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190612a47565b611da4576040516378eb36af60e01b81526001600160a01b0384166004820152602401610610565b60008060008315611e81576001600160a01b03868116600081815260396020908152604080832054603b83528184208b8716808652935292819020546041549151636471ffa360e01b815260048101959095526024850192909252919650945090911690636471ffa390604401602060405180830381865afa158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e529190612a93565b6001600160a01b038088166000908152603b60209081526040808320938a168352929052208490559050611f4f565b6001600160a01b03868116600081815260386020908152604080832054603a83528184208b8716808652935292819020546041549151633b97da7b60e11b81526004810195909552602485019290925291965094509091169063772fb4f690604401602060405180830381865afa158015611f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f249190612a93565b6001600160a01b038088166000908152603a60209081526040808320938a1683529290522084905590505b6000611f5b8385612a64565b90506000611f698383612005565b90508015610914576001600160a01b0387166000908152603c6020526040902054611f95908290612a7b565b6001600160a01b038881166000818152603c6020908152604091829020949094558051928c16835292820152908101829052606081018590527fd53ea54cd361f7c49d3ca11bfcb71b4783448ade1b32513783ee19776f2adf319060800160405180910390a15050505050505050565b6000670de0b6b3a764000061201a8385612aac565b6120249190612acb565b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610cee9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121e3565b60005b8251811015610cee5760008382815181106120b6576120b6612a00565b602002602001015190506120ca8184611a6e565b60005b855181101561210c576120fa828783815181106120ec576120ec612a00565b602002602001015186611ce7565b8061210481612a2c565b9150506120cd565b5050808061211990612a2c565b915050612099565b6040516001600160a01b038316602482015260448101829052610e9a90849063a9059cbb60e01b9060640161205f565b80518251146121735760405163c86dd41b60e01b815260040160405180910390fd5b815160005b81811015610cee576121bc84828151811061219557612195612a00565b60200260200101518483815181106121af576121af612a00565b60200260200101516115eb565b806121c681612a2c565b915050612178565b60008161201a670de0b6b3a764000085612aac565b6000612238826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122b89092919063ffffffff16565b90508051600014806122595750808060200190518101906122599190612a47565b610e9a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610610565b60606122c784846000856122cf565b949350505050565b6060824710156123305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610610565b600080866001600160a01b0316858760405161234c9190612b19565b60006040518083038185875af1925050503d8060008114612389576040519150601f19603f3d011682016040523d82523d6000602084013e61238e565b606091505b509150915061239f878383876123aa565b979650505050505050565b6060831561241657825161240f576001600160a01b0385163b61240f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610610565b50816122c7565b6122c7838381511561242b5781518083602001fd5b8060405162461bcd60e51b81526004016106109190612b35565b6001600160a01b03811681146109c857600080fd5b60006020828403121561246c57600080fd5b813561202481612445565b6000806040838503121561248a57600080fd5b823561249581612445565b915060208301356124a581612445565b809150509250929050565b60008083601f8401126124c257600080fd5b50813567ffffffffffffffff8111156124da57600080fd5b6020830191508360208260051b85010111156124f557600080fd5b9250929050565b6000806000806000806000806080898b03121561251857600080fd5b883567ffffffffffffffff8082111561253057600080fd5b61253c8c838d016124b0565b909a50985060208b013591508082111561255557600080fd5b6125618c838d016124b0565b909850965060408b013591508082111561257a57600080fd5b6125868c838d016124b0565b909650945060608b013591508082111561259f57600080fd5b506125ac8b828c016124b0565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125ff576125ff6125c0565b604052919050565b600067ffffffffffffffff821115612621576126216125c0565b5060051b60200190565b600082601f83011261263c57600080fd5b8135602061265161264c83612607565b6125d6565b82815260059290921b8401810191818101908684111561267057600080fd5b8286015b8481101561269457803561268781612445565b8352918301918301612674565b509695505050505050565b6000602082840312156126b157600080fd5b813567ffffffffffffffff8111156126c857600080fd5b6122c78482850161262b565b6000602082840312156126e657600080fd5b5035919050565b6000806000806040858703121561270357600080fd5b843567ffffffffffffffff8082111561271b57600080fd5b612727888389016124b0565b9096509450602087013591508082111561274057600080fd5b5061274d878288016124b0565b95989497509550505050565b6000806040838503121561276c57600080fd5b823561277781612445565b946020939093013593505050565b6000806040838503121561279857600080fd5b823567ffffffffffffffff808211156127b057600080fd5b6127bc8683870161262b565b935060208501359150808211156127d257600080fd5b506127df8582860161262b565b9150509250929050565b80151581146109c857600080fd5b60008060006060848603121561280c57600080fd5b833561281781612445565b9250602084013561282781612445565b91506040840135612837816127e9565b809150509250925092565b60008060006060848603121561285757600080fd5b833567ffffffffffffffff8082111561286f57600080fd5b61287b8783880161262b565b9450602086013591508082111561289157600080fd5b61289d8783880161262b565b935060408601359150808211156128b357600080fd5b506128c08682870161262b565b9150509250925092565b6000806000606084860312156128df57600080fd5b83356128ea81612445565b925060208401359150604084013561283781612445565b6000806040838503121561291457600080fd5b823561291f81612445565b915060208301356124a5816127e9565b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b6000602080838503121561298457600080fd5b825167ffffffffffffffff81111561299b57600080fd5b8301601f810185136129ac57600080fd5b80516129ba61264c82612607565b81815260059190911b820183019083810190878311156129d957600080fd5b928401925b8284101561239f5783516129f181612445565b825292840192908401906129de565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a4057612a40612a16565b5060010190565b600060208284031215612a5957600080fd5b8151612024816127e9565b600082821015612a7657612a76612a16565b500390565b60008219821115612a8e57612a8e612a16565b500190565b600060208284031215612aa557600080fd5b5051919050565b6000816000190483118215151615612ac657612ac6612a16565b500290565b600082612ae857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015612b08578181015183820152602001612af0565b83811115610cee5750506000910152565b60008251612b2b818460208701612aed565b9190910192915050565b6020815260008251806020840152612b54816040850160208701612aed565b601f01601f1916919091016040019291505056fea2646970667358221220070120901c35bc4f565d50ef3a654896440c295f223fcbb7448f9be22f66bd3864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c80637d3572fd1161013b578063caece2fe116100b8578063f7d6bdf21161007c578063f7d6bdf21461058c578063fc4d33f91461059f578063fca62699146105a7578063ff0427ca146105ba578063ff10302a146105da57600080fd5b8063caece2fe14610515578063ddcbb24514610528578063e30c397814610553578063f77c479114610566578063f7c618c11461057957600080fd5b8063a82e84e9116100ff578063a82e84e9146104a9578063acea9d4d146104bc578063b37fd190146104dc578063bdfa0c99146104ef578063c88bf5e81461050257600080fd5b80637d3572fd146104425780638ceb13d4146104555780638da5cb5b146104685780638de4821914610480578063a1fcb8fc146104a057600080fd5b806349318865116101c95780635f1c86651161018d5780635f1c8665146103ba57806361d027b3146103cd5780636353586b146103e05780636864e3ea146104005780636e96dfd71461042f57600080fd5b8063493188651461035457806353889535146103675780635658fec31461037a5780635c267f6d1461038d5780635c975abb1461039657600080fd5b806338f1f57f1161021057806338f1f57f146102e75780633f7d00f5146102fa57806342e7728414610303578063481c6a7514610316578063485cc9551461034157600080fd5b806320f18edd146102425780632a08922c14610291578063320b2ad9146102a6578063340c3df8146102ae575b600080fd5b61027161025036600461245a565b60386020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b6102a461029f36600461245a565b6105e1565b005b6102a46106c2565b6102d96102bc366004612477565b603b60209081526000928352604080842090915290825290205481565b604051908152602001610288565b6102a46102f53660046124fc565b6107e3565b6102d960425481565b6102a461031136600461269f565b61091e565b604154610329906001600160a01b031681565b6040516001600160a01b039091168152602001610288565b6102a461034f366004612477565b6109cb565b6102a46103623660046126d4565b610b89565b6102a46103753660046126ed565b610c1f565b6102a4610388366004612759565b610cf4565b6102d9603f5481565b603d546103aa90600160a01b900460ff1681565b6040519015158152602001610288565b6102a46103c8366004612785565b610ddd565b604054610329906001600160a01b031681565b6102d96103ee36600461245a565b603c6020526000908152604090205481565b61027161040e36600461245a565b60396020526000908152604090208054600182015460029092015490919083565b6102a461043d36600461245a565b610e9f565b6102a46104503660046127f7565b610fcc565b6102a4610463366004612477565b610fd7565b6000546103299061010090046001600160a01b031681565b6102d961048e36600461245a565b603e6020526000908152604090205481565b6102d960355481565b6102a46104b7366004612842565b6110ff565b6102d96104ca36600461245a565b60376020526000908152604090205481565b6102a46104ea3660046128ca565b6111d8565b6102a46104fd366004612785565b611217565b6102a46105103660046126ed565b6112e2565b6102a4610523366004612901565b6113a9565b6102d9610536366004612477565b603a60209081526000928352604080842090915290825290205481565b600154610329906001600160a01b031681565b603454610329906001600160a01b031681565b603d54610329906001600160a01b031681565b6102a461059a36600461245a565b6113c9565b6102a461149c565b6102a46105b53660046124fc565b6115b2565b6102d96105c836600461245a565b60366020526000908152604090205481565b60016103aa565b60005461010090046001600160a01b031633146106195760405162461bcd60e51b81526004016106109061292f565b60405180910390fd5b6040546001600160a01b0390811690821615806106475750806001600160a01b0316826001600160a01b0316145b1561066557604051639373097560e01b815260040160405180910390fd5b604080546001600160a01b0319166001600160a01b0384811691821783558251908416815260208101919091527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b22822591015b60405180910390a15050565b60005461010090046001600160a01b031633146106f15760405162461bcd60e51b81526004016106109061292f565b603454604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa15801561073a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107629190810190612971565b805190915060005b818110156107cc5761079683828151811061078757610787612a00565b602002602001015160006115eb565b6107ba8382815181106107ab576107ab612a00565b602002602001015160006116dd565b806107c481612a2c565b91505061076a565b506107d56117cf565b6107df600161193d565b5050565b60005461010090046001600160a01b031633146108125760405162461bcd60e51b81526004016106109061292f565b603d54600160a01b900460ff161561083d57604051639930363560e01b815260040160405180910390fd5b61090c88888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061199592505050565b6109146117cf565b5050505050505050565b6041546001600160a01b0316331461094957604051633a45e5f360e21b815260040160405180910390fd5b6109c881603460009054906101000a90046001600160a01b03166001600160a01b03166360a8a9316040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104fd9190810190612971565b50565b60005460ff1615610a355760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610610565b816001600160a01b0316634e1647fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a979190612a47565b610ab457604051631ebe9fc760e31b815260040160405180910390fd5b806001600160a01b031663eb5bf95d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190612a47565b610b335760405163786b8ff960e01b815260040160405180910390fd5b610b3b6119a9565b603480546001600160a01b039384166001600160a01b03199182161790915560418054929093169116179055603d805460ff60a01b1916600160a01b1790556000805460ff19166001179055565b60005461010090046001600160a01b03163314610bb85760405162461bcd60e51b81526004016106109061292f565b67016345785d8a0000811115610be157604051630c2ee60760e41b815260040160405180910390fd5b604280549082905560408051828152602081018490527f1c455768ccd776125cf627db9acaecb45b00b587a0eecb26d97be99e780efeab91016106b6565b60005461010090046001600160a01b03163314610c4e5760405162461bcd60e51b81526004016106109061292f565b603d54600160a01b900460ff1615610c7957604051639930363560e01b815260040160405180910390fd5b610ce6848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506119f192505050565b610cee6117cf565b50505050565b6041546001600160a01b03163314610d1f57604051633a45e5f360e21b815260040160405180910390fd5b6001600160a01b03821660008181526037602090815260408083208590558051606080820183528482524382850181815242848601818152898952603888528689209551865591516001808701919091559151600295860155855193840186528784528387019283528386019081528888526039875296859020925183559051908201559351930192909255815192835282018390527f182e1c0b34607d1b7c3312ff9a78e613c0a4c045d1460fd236374d04b5c2954f91016106b6565b60005b8151811015610e9a576000828281518110610dfd57610dfd612a00565b60200260200101519050610e12816000611a6e565b610e1d816001611a6e565b60005b8451811015610e8557610e4e82868381518110610e3f57610e3f612a00565b60200260200101516000611ce7565b610e7382868381518110610e6457610e64612a00565b60200260200101516001611ce7565b80610e7d81612a2c565b915050610e20565b50508080610e9290612a2c565b915050610de0565b505050565b60005461010090046001600160a01b03163314610ece5760405162461bcd60e51b81526004016106109061292f565b6001600160a01b03811615801590610ef457506001546001600160a01b03828116911614155b610f7a5760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a401610610565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b610e9a838383611ce7565b6041546001600160a01b0316331461100257604051633a45e5f360e21b815260040160405180910390fd5b6001600160a01b0382166000908152603c60205260409020548015610e9a576001600160a01b0383166000908152603c6020526040812081905560425461104a908390612005565b604054603d5491925061106b916001600160a01b039081169116858461202b565b60405461109a906001600160a01b0316856110868486612a64565b603d546001600160a01b031692919061202b565b603d54604080516001600160a01b03928316815285831660208201529186169082015260608101829052608081018390527fe4ef9b6ca5bc6ad14e41aef6830d82a4728585a30713f7960de7446f5c610f429060a0015b60405180910390a150505050565b6041546001600160a01b0316331461112a57604051633a45e5f360e21b815260040160405180910390fd5b61113683836000612096565b61114283826001612096565b60005b8351811015610cee57600084828151811061116257611162612a00565b6020908102919091018101516001600160a01b0381166000908152603c90925260409091205490915080156111c3576001600160a01b038083166000908152603c60205260408082209190915554603d546111c3929081169116848461202b565b505080806111d090612a2c565b915050611145565b6040546001600160a01b031633146112035760405163095bdd5360e21b815260040160405180910390fd5b610e9a6001600160a01b0384168284612121565b6041546001600160a01b0316331461124257604051633a45e5f360e21b815260040160405180910390fd5b61124c8282610ddd565b60005b8251811015610e9a57600083828151811061126c5761126c612a00565b6020908102919091018101516001600160a01b0381166000908152603c90925260409091205490915080156112cd576001600160a01b038083166000908152603c60205260408082209190915554603d546112cd929081169116848461202b565b505080806112da90612a2c565b91505061124f565b60005461010090046001600160a01b031633146113115760405162461bcd60e51b81526004016106109061292f565b603d54600160a01b900460ff161561133c57604051639930363560e01b815260040160405180910390fd5b610ce68484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061215192505050565b603d54600160a01b900460ff16156113bf575050565b6107df8282611a6e565b60005461010090046001600160a01b031633146113f85760405162461bcd60e51b81526004016106109061292f565b603d546001600160a01b0390811690821615806114265750806001600160a01b0316826001600160a01b0316145b15611444576040516303788dd960e11b815260040160405180910390fd5b603d80546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527f7bdb05f6c3fc55361bbc64ceeb084448a135da92bade17eb83ea386a431aa49291016106b6565b6001546001600160a01b031633146115045760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b6064820152608401610610565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b60005461010090046001600160a01b031633146115e15760405162461bcd60e51b81526004016106109061292f565b61083d600061193d565b603454604051632214743160e11b81526001600160a01b03848116600483015290911690634428e86290602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116599190612a47565b61168157604051635a1896a360e11b81526001600160a01b0383166004820152602401610610565b61168c826001611a6e565b6001600160a01b038216600081815260366020908152604091829020849055815192835282018390527fc166a4ce2a20ceba9db9ef1b63803b25bca50a30d1fae6587eced7cc29366e9891016106b6565b603454604051632214743160e11b81526001600160a01b03848116600483015290911690634428e86290602401602060405180830381865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612a47565b61177357604051630967edbf60e01b81526001600160a01b0383166004820152602401610610565b61177e826000611a6e565b6001600160a01b0382166000818152603e6020908152604091829020849055815192835282018390527f76037bc3f78973da9e019b9d16cf5396ca9d59f32ba6994c4325bdea7e0d5c1191016106b6565b603454604080516360a8a93160e01b815290516000926001600160a01b0316916360a8a93191600480830192869291908290030181865afa158015611818573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118409190810190612971565b8051909150600080805b838110156118fc576036600086838151811061186857611868612a00565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548361189c9190612a7b565b9250603e60008683815181106118b4576118b4612a00565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054826118e89190612a7b565b9150806118f481612a2c565b91505061184a565b506035829055603f81905560408051838152602081018390527fd36b3d23325a889a30950d79f56fc3a25c517ff2956d2273645dca7a727889bb91016110f1565b603d8054821515600160a01b0260ff60a01b199091161790556040517fd83d5281277e107f080e362699d46082adb74e7dc6a9bccbc87d8ae9533add449061198a90831515815260200190565b60405180910390a150565b61199f8484612151565b610cee82826119f1565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b8051825114611a13576040516353df09e960e11b815260040160405180910390fd5b815160005b81811015610cee57611a5c848281518110611a3557611a35612a00565b6020026020010151848381518110611a4f57611a4f612a00565b60200260200101516116dd565b80611a6681612a2c565b915050611a18565b603454604051632214743160e11b81526001600160a01b03848116600483015290911690634428e86290602401602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190612a47565b611b0457604051632be246d160e21b81526001600160a01b0383166004820152602401610610565b600081611b28576001600160a01b0383166000908152603860205260409020611b41565b6001600160a01b03831660009081526039602052604090205b9050600082611b68576001600160a01b0384166000908152603e6020526040902054611b82565b6001600160a01b0384166000908152603660205260409020545b60028301549091504290600090611b999083612a64565b9050600081118015611bab5750600083115b15611cd857600085611c2a576041546040516306bad18d60e11b81526001600160a01b03898116600483015290911690630d75a31a90602401602060405180830381865afa158015611c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c259190612a93565b611c98565b604154604051637829db0160e01b81526001600160a01b03898116600483015290911690637829db0190602401602060405180830381865afa158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c989190612a93565b90506000611ca68386612aac565b90506000808311611cb8576000611cc2565b611cc282846121ce565b8754909150611cd2908290612a7b565b87555050505b50600290920191909155505050565b6001600160a01b038216611d0e576040516398dd2fc360e01b815260040160405180910390fd5b603454604051632214743160e11b81526001600160a01b03858116600483015290911690634428e86290602401602060405180830381865afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190612a47565b611da4576040516378eb36af60e01b81526001600160a01b0384166004820152602401610610565b60008060008315611e81576001600160a01b03868116600081815260396020908152604080832054603b83528184208b8716808652935292819020546041549151636471ffa360e01b815260048101959095526024850192909252919650945090911690636471ffa390604401602060405180830381865afa158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e529190612a93565b6001600160a01b038088166000908152603b60209081526040808320938a168352929052208490559050611f4f565b6001600160a01b03868116600081815260386020908152604080832054603a83528184208b8716808652935292819020546041549151633b97da7b60e11b81526004810195909552602485019290925291965094509091169063772fb4f690604401602060405180830381865afa158015611f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f249190612a93565b6001600160a01b038088166000908152603a60209081526040808320938a1683529290522084905590505b6000611f5b8385612a64565b90506000611f698383612005565b90508015610914576001600160a01b0387166000908152603c6020526040902054611f95908290612a7b565b6001600160a01b038881166000818152603c6020908152604091829020949094558051928c16835292820152908101829052606081018590527fd53ea54cd361f7c49d3ca11bfcb71b4783448ade1b32513783ee19776f2adf319060800160405180910390a15050505050505050565b6000670de0b6b3a764000061201a8385612aac565b6120249190612acb565b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610cee9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121e3565b60005b8251811015610cee5760008382815181106120b6576120b6612a00565b602002602001015190506120ca8184611a6e565b60005b855181101561210c576120fa828783815181106120ec576120ec612a00565b602002602001015186611ce7565b8061210481612a2c565b9150506120cd565b5050808061211990612a2c565b915050612099565b6040516001600160a01b038316602482015260448101829052610e9a90849063a9059cbb60e01b9060640161205f565b80518251146121735760405163c86dd41b60e01b815260040160405180910390fd5b815160005b81811015610cee576121bc84828151811061219557612195612a00565b60200260200101518483815181106121af576121af612a00565b60200260200101516115eb565b806121c681612a2c565b915050612178565b60008161201a670de0b6b3a764000085612aac565b6000612238826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122b89092919063ffffffff16565b90508051600014806122595750808060200190518101906122599190612a47565b610e9a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610610565b60606122c784846000856122cf565b949350505050565b6060824710156123305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610610565b600080866001600160a01b0316858760405161234c9190612b19565b60006040518083038185875af1925050503d8060008114612389576040519150601f19603f3d011682016040523d82523d6000602084013e61238e565b606091505b509150915061239f878383876123aa565b979650505050505050565b6060831561241657825161240f576001600160a01b0385163b61240f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610610565b50816122c7565b6122c7838381511561242b5781518083602001fd5b8060405162461bcd60e51b81526004016106109190612b35565b6001600160a01b03811681146109c857600080fd5b60006020828403121561246c57600080fd5b813561202481612445565b6000806040838503121561248a57600080fd5b823561249581612445565b915060208301356124a581612445565b809150509250929050565b60008083601f8401126124c257600080fd5b50813567ffffffffffffffff8111156124da57600080fd5b6020830191508360208260051b85010111156124f557600080fd5b9250929050565b6000806000806000806000806080898b03121561251857600080fd5b883567ffffffffffffffff8082111561253057600080fd5b61253c8c838d016124b0565b909a50985060208b013591508082111561255557600080fd5b6125618c838d016124b0565b909850965060408b013591508082111561257a57600080fd5b6125868c838d016124b0565b909650945060608b013591508082111561259f57600080fd5b506125ac8b828c016124b0565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125ff576125ff6125c0565b604052919050565b600067ffffffffffffffff821115612621576126216125c0565b5060051b60200190565b600082601f83011261263c57600080fd5b8135602061265161264c83612607565b6125d6565b82815260059290921b8401810191818101908684111561267057600080fd5b8286015b8481101561269457803561268781612445565b8352918301918301612674565b509695505050505050565b6000602082840312156126b157600080fd5b813567ffffffffffffffff8111156126c857600080fd5b6122c78482850161262b565b6000602082840312156126e657600080fd5b5035919050565b6000806000806040858703121561270357600080fd5b843567ffffffffffffffff8082111561271b57600080fd5b612727888389016124b0565b9096509450602087013591508082111561274057600080fd5b5061274d878288016124b0565b95989497509550505050565b6000806040838503121561276c57600080fd5b823561277781612445565b946020939093013593505050565b6000806040838503121561279857600080fd5b823567ffffffffffffffff808211156127b057600080fd5b6127bc8683870161262b565b935060208501359150808211156127d257600080fd5b506127df8582860161262b565b9150509250929050565b80151581146109c857600080fd5b60008060006060848603121561280c57600080fd5b833561281781612445565b9250602084013561282781612445565b91506040840135612837816127e9565b809150509250925092565b60008060006060848603121561285757600080fd5b833567ffffffffffffffff8082111561286f57600080fd5b61287b8783880161262b565b9450602086013591508082111561289157600080fd5b61289d8783880161262b565b935060408601359150808211156128b357600080fd5b506128c08682870161262b565b9150509250925092565b6000806000606084860312156128df57600080fd5b83356128ea81612445565b925060208401359150604084013561283781612445565b6000806040838503121561291457600080fd5b823561291f81612445565b915060208301356124a5816127e9565b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b6000602080838503121561298457600080fd5b825167ffffffffffffffff81111561299b57600080fd5b8301601f810185136129ac57600080fd5b80516129ba61264c82612607565b81815260059190911b820183019083810190878311156129d957600080fd5b928401925b8284101561239f5783516129f181612445565b825292840192908401906129de565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a4057612a40612a16565b5060010190565b600060208284031215612a5957600080fd5b8151612024816127e9565b600082821015612a7657612a76612a16565b500390565b60008219821115612a8e57612a8e612a16565b500190565b600060208284031215612aa557600080fd5b5051919050565b6000816000190483118215151615612ac657612ac6612a16565b500290565b600082612ae857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015612b08578181015183820152602001612af0565b83811115610cee5750506000910152565b60008251612b2b818460208701612aed565b9190910192915050565b6020815260008251806020840152612b54816040850160208701612aed565b601f01601f1916919091016040019291505056fea2646970667358221220070120901c35bc4f565d50ef3a654896440c295f223fcbb7448f9be22f66bd3864736f6c634300080a0033",
  "devdoc": {
    "author": "dForce",
    "kind": "dev",
    "methods": {
      "_acceptOwner()": {
        "details": "Accepts the admin rights, but only for pendingOwenr."
      },
      "_addRecipient(address,uint256)": {
        "details": "Admin function, only controller can call this",
        "params": {
          "_distributionFactor": "the distribution factor of the recipient",
          "_iToken": "the iToken to add as recipient"
        }
      },
      "_pause()": {
        "details": "Admin function, pause will set global speed to 0 to stop the accumulation"
      },
      "_setBountyRatio(uint256)": {
        "params": {
          "_bountyRatio": "the ratio in 1e18"
        }
      },
      "_setDistributionBorrowSpeeds(address[],uint256[])": {
        "details": "Admin function, will fail when paused",
        "params": {
          "_borrowSpeeds": "The borrow speed array",
          "_iTokens": "The borrow asset array"
        }
      },
      "_setDistributionSpeeds(address[],uint256[],address[],uint256[])": {
        "details": "Admin function, will fail when paused",
        "params": {
          "_borrowSpeeds": "The borrow speed array",
          "_borrowiTokens": "The borrow asset array",
          "_supplySpeeds": "The supply speed array",
          "_supplyiTokens": "The supply asset array"
        }
      },
      "_setDistributionSupplySpeeds(address[],uint256[])": {
        "details": "Admin function, will fail when paused",
        "params": {
          "_iTokens": "The supply asset array",
          "_supplySpeeds": "The supply speed array"
        }
      },
      "_setPendingOwner(address)": {
        "details": "Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.",
        "params": {
          "newPendingOwner": "New pending owner."
        }
      },
      "_setRewardToken(address)": {
        "details": "Admin function, only owner can call this",
        "params": {
          "_newRewardToken": "the address of reward token"
        }
      },
      "_setTreasury(address)": {
        "details": "Admin function, only owner can call this",
        "params": {
          "_newTreasury": "the address of treasury"
        }
      },
      "_unpause(address[],uint256[],address[],uint256[])": {
        "details": "Admin function",
        "params": {
          "_borrowSpeeds": "The borrow speed array",
          "_borrowiTokens": "The borrow asset array",
          "_supplySpeeds": "The supply speed array",
          "_supplyiTokens": "The supply asset array"
        }
      },
      "claimAllReward(address[])": {
        "params": {
          "_holders": "The account to claim for"
        }
      },
      "claimReward(address[],address[])": {
        "params": {
          "_holders": "The account to claim for",
          "_iTokens": "The _iTokens to claim from"
        }
      },
      "claimRewards(address[],address[],address[])": {
        "params": {
          "_borrowediTokens": "The _borrowediTokens to claim from",
          "_holders": "The account to claim for",
          "_suppliediTokens": "The _suppliediTokens to claim from"
        }
      },
      "rescueTokens(address,uint256,address)": {
        "params": {
          "_amount": "The amount of token to rescue",
          "_to": "The token to send to",
          "_token": "The token to rescue"
        }
      },
      "updateDistributionState(address,bool)": {
        "details": "Will be called every time when the iToken's supply/borrow changes",
        "params": {
          "_iToken": "The iToken to be updated",
          "_isBorrow": "whether to update the borrow state"
        }
      },
      "updateReward(address,address,bool)": {
        "details": "Will be called every time when the account's supply/borrow changes",
        "params": {
          "_account": "The account to be updated",
          "_iToken": "The iToken to be updated",
          "_isBorrow": "whether to update the borrow state"
        }
      },
      "updateRewardBatch(address[],address[])": {
        "params": {
          "_holders": "The account to update",
          "_iTokens": "The _iTokens to update"
        }
      }
    },
    "title": "dForce's lending reward distributor Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BountyClaimed(address,address,address,uint256,uint256)": {
        "notice": "Emitted when bounty is claimed by a hunter"
      },
      "DistributionBorrowSpeedChanged(address,uint256)": {
        "notice": "Emitted when iToken's Distribution borrow speed is updated"
      },
      "DistributionSupplySpeedChanged(address,uint256)": {
        "notice": "Emitted when iToken's Distribution supply speed is updated"
      },
      "GlobalDistributionSpeedsChanged(uint256,uint256)": {
        "notice": "Emitted when Global Distribution speed for both supply and borrow are updated"
      },
      "NewBountyRatio(uint256,uint256)": {
        "notice": "Emitted when bounty ratio is changed by admin"
      },
      "NewDistributionFactor(address,uint256,uint256)": {
        "notice": "Emitted when iToken's Distribution factor is changed by admin"
      },
      "NewRewardToken(address,address)": {
        "notice": "Emitted reward token address is changed by admin"
      },
      "NewTreasury(address,address)": {
        "notice": "Emitted treasury address is changed by admin"
      },
      "PausedChanged(bool)": {
        "notice": "Emitted when mint is paused/unpaused by admin"
      },
      "RewardDistributed(address,address,uint256,uint256)": {
        "notice": "Emitted when reward of amount is distributed into account"
      }
    },
    "kind": "user",
    "methods": {
      "_addRecipient(address,uint256)": {
        "notice": "Add the iToken as receipient"
      },
      "_pause()": {
        "notice": "Pause the reward distribution"
      },
      "_setBountyRatio(uint256)": {
        "notice": "Set bounty ratio by admin"
      },
      "_setDistributionBorrowSpeeds(address[],uint256[])": {
        "notice": "Set borrow distribution speeds"
      },
      "_setDistributionSpeeds(address[],uint256[],address[],uint256[])": {
        "notice": "Set distribution speeds"
      },
      "_setDistributionSupplySpeeds(address[],uint256[])": {
        "notice": "Set supply distribution speeds"
      },
      "_setPendingOwner(address)": {
        "notice": "Base on the inputing parameter `newPendingOwner` to check the exact error reason."
      },
      "_setRewardToken(address)": {
        "notice": "set reward token address"
      },
      "_setTreasury(address)": {
        "notice": "set new treasury address"
      },
      "_unpause(address[],uint256[],address[],uint256[])": {
        "notice": "Unpause and set distribution speeds"
      },
      "bountyRatio()": {
        "notice": "the ratio of bounty hunter to collect from reward"
      },
      "claimAllReward(address[])": {
        "notice": "Claim reward accrued in all iTokens by the holders"
      },
      "claimReward(address[],address[])": {
        "notice": "Claim reward accrued in iTokens by the holders"
      },
      "claimRewards(address[],address[],address[])": {
        "notice": "Claim reward accrued in iTokens by the holders"
      },
      "controller()": {
        "notice": "the controller"
      },
      "distributionBorrowState(address)": {
        "notice": "the Reward distribution borrow state of each iToken"
      },
      "distributionBorrowerIndex(address,address)": {
        "notice": "the Reward distribution state of each account of each iToken"
      },
      "distributionFactorMantissa(address)": {
        "notice": "the Reward distribution factor of each iToken, 1.0 by default. stored as a mantissa"
      },
      "distributionSpeed(address)": {
        "notice": "the Reward distribution speed of each iToken"
      },
      "distributionSupplierIndex(address,address)": {
        "notice": "the Reward distribution state of each account of each iToken"
      },
      "distributionSupplySpeed(address)": {
        "notice": "the Reward distribution speed supply side of each iToken"
      },
      "distributionSupplyState(address)": {
        "notice": "the Reward distribution supply state of each iToken"
      },
      "globalDistributionSpeed()": {
        "notice": "the global Reward distribution speed"
      },
      "globalDistributionSupplySpeed()": {
        "notice": "the global Reward distribution speed for supply"
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract."
      },
      "isRewardDistributor()": {
        "notice": "Ensure this is a RewardDistributor contract."
      },
      "manager()": {
        "notice": "the reward distributor manager address where eligible balances is stored"
      },
      "paused()": {
        "notice": "whether the reward distribution is paused"
      },
      "rescueTokens(address,uint256,address)": {
        "notice": "Rescue tokens, can only be called by treasury"
      },
      "reward(address)": {
        "notice": "the Reward distributed into each account"
      },
      "rewardToken()": {
        "notice": "the Reward token address"
      },
      "treasury()": {
        "notice": "the treasury address where the reward is stored"
      },
      "updateDistributionState(address,bool)": {
        "notice": "Update the iToken's  Reward distribution state"
      },
      "updateReward(address,address,bool)": {
        "notice": "Update the account's Reward distribution state"
      },
      "updateRewardBatch(address[],address[])": {
        "notice": "Update reward accrued in iTokens by the holders regardless of paused or not"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11241,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11263,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 11266,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 11398,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13074,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "controller",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IController)10855"
      },
      {
        "astId": 13077,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "globalDistributionSpeed",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 13082,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "distributionSpeed",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13087,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "distributionFactorMantissa",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13100,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "distributionSupplyState",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_struct(DistributionState)13094_storage)"
      },
      {
        "astId": 13106,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "distributionBorrowState",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_struct(DistributionState)13094_storage)"
      },
      {
        "astId": 13113,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "distributionSupplierIndex",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13120,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "distributionBorrowerIndex",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13125,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "reward",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13129,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "rewardToken",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 13132,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "paused",
        "offset": 20,
        "slot": "61",
        "type": "t_bool"
      },
      {
        "astId": 13137,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "distributionSupplySpeed",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13140,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "globalDistributionSupplySpeed",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 13144,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "treasury",
        "offset": 0,
        "slot": "64",
        "type": "t_address"
      },
      {
        "astId": 13148,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "manager",
        "offset": 0,
        "slot": "65",
        "type": "t_contract(IRewardDistributorManager)11172"
      },
      {
        "astId": 13151,
        "contract": "src/RewardDistributor.sol:RewardDistributor",
        "label": "bountyRatio",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IController)10855": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardDistributorManager)11172": {
        "encoding": "inplace",
        "label": "contract IRewardDistributorManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DistributionState)13094_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardDistributor.DistributionState)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributionState)13094_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DistributionState)13094_storage": {
        "encoding": "inplace",
        "label": "struct RewardDistributor.DistributionState",
        "members": [
          {
            "astId": 13089,
            "contract": "src/RewardDistributor.sol:RewardDistributor",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13091,
            "contract": "src/RewardDistributor.sol:RewardDistributor",
            "label": "block",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13093,
            "contract": "src/RewardDistributor.sol:RewardDistributor",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}