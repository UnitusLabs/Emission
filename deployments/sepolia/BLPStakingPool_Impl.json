{
  "address": "0x74fE112170Bf2bf009f6D4DddDdCFE4CC5A34BA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseStakingPool_initialize__StakingTokenIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseStakingPool_stake__StakeAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseStakingPool_withdraw__WithdrawAmountIsZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newRewardDistributor",
          "type": "address"
        }
      ],
      "name": "AddRewardDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "NewPendingOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRewardDistributorManager",
          "type": "address"
        }
      ],
      "name": "NewRewardDistributorManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldRewardDistributor",
          "type": "address"
        }
      ],
      "name": "RemoveRewardDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_acceptOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRewardDistributor",
          "type": "address"
        }
      ],
      "name": "_addRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldRewardDistributor",
          "type": "address"
        }
      ],
      "name": "_removeRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "_setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardDistributorManager",
          "name": "_rewardDistributorManager",
          "type": "address"
        }
      ],
      "name": "_setRewardDistributorManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardDistributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isStakingPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributorManager",
      "outputs": [
        {
          "internalType": "contract IRewardDistributorManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ecd870fea1b5bef644310ecf9200fbd9f4b2a096d60494f1769deb07aa9d15e",
  "receipt": {
    "to": null,
    "from": "0x6b29b8af9AF126170513AE6524395E09025b214E",
    "contractAddress": "0x74fE112170Bf2bf009f6D4DddDdCFE4CC5A34BA6",
    "transactionIndex": 27,
    "gasUsed": "1264648",
    "logsBloom": "0x
    "blockHash": "0x9426775098bae5c2e3ae74650e0d21d31663da6b65ea5f2ce3075039fe1e415c",
    "transactionHash": "0x7ecd870fea1b5bef644310ecf9200fbd9f4b2a096d60494f1769deb07aa9d15e",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 6835825,
        "transactionHash": "0x7ecd870fea1b5bef644310ecf9200fbd9f4b2a096d60494f1769deb07aa9d15e",
        "address": "0x74fE112170Bf2bf009f6D4DddDdCFE4CC5A34BA6",
        "topics": [
          "0x70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006b29b8af9af126170513ae6524395e09025b214e"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x9426775098bae5c2e3ae74650e0d21d31663da6b65ea5f2ce3075039fe1e415c"
      }
    ],
    "blockNumber": 6835825,
    "cumulativeGasUsed": "3465504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1281Ce90FBF71c984d5A4c497824FFBD5431497A"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e65e50cc5c17914ebf6a581389e5053",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseStakingPool_initialize__StakingTokenIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseStakingPool_stake__StakeAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseStakingPool_withdraw__WithdrawAmountIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newRewardDistributor\",\"type\":\"address\"}],\"name\":\"AddRewardDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardDistributorManager\",\"type\":\"address\"}],\"name\":\"NewRewardDistributorManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldRewardDistributor\",\"type\":\"address\"}],\"name\":\"RemoveRewardDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardDistributor\",\"type\":\"address\"}],\"name\":\"_addRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldRewardDistributor\",\"type\":\"address\"}],\"name\":\"_removeRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardDistributorManager\",\"name\":\"_rewardDistributorManager\",\"type\":\"address\"}],\"name\":\"_setRewardDistributorManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributorManager\",\"outputs\":[{\"internalType\":\"contract IRewardDistributorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_acceptOwner()\":{\"details\":\"Accepts the admin rights, but only for pendingOwenr.\"},\"_setPendingOwner(address)\":{\"details\":\"Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\",\"params\":{\"newPendingOwner\":\"New pending owner.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_setPendingOwner(address)\":{\"notice\":\"Base on the inputing parameter `newPendingOwner` to check the exact error reason.\"},\"isStakingPool()\":{\"notice\":\"Ensure this is a Staking Pool contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Stake/BLPStakingPool.sol\":\"BLPStakingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"src/Interfaces/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress();\\nerror BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist();\\nerror BaseStakingPool_initialize__StakingTokenIsZeroAddress();\\nerror BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist();\\nerror BaseStakingPool_stake__StakeAmountIsZero();\\nerror BaseStakingPool_withdraw__WithdrawAmountIsZero();\\n\\nerror BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager();\\n\\nerror BLPReward_initialize__StakingTokenIsZeroAddress();\\nerror BLPReward_initialize__RewardTokenIsZeroAddress();\\nerror BLPReward_initialize__TreasuryIsZeroAddress();\\nerror BLPReward_setTreasury__TreasuryIsZeroAddress();\\nerror BLPReward_setTreasury__SameTreasuryAddress();\\n\\nerror EligibilityManager_addBLPStakingPoolInternal__InvalidStakingPool(\\n    address stakingPool\\n);\\nerror EligibilityManager_addBLPStakingPoolInternal__StakingPoolAlreadyExist(\\n    address stakingPool\\n);\\nerror EligibilityManager_addValidSupplyInternal__InvalidSupply(address iToken);\\nerror EligibilityManager_addValidSupplyInternal__ValidSupplyAlreadyExist(\\n    address iToken\\n);\\nerror EligibilityManager_initialize__InvalidController();\\nerror EligibilityManager_removeValidSupplyInternal__ValidSupplyDoesNotExist(\\n    address iToken\\n);\\nerror EligibilityManager_removeBLPStakingPoolInternal__StakingPoolDoesNotExist(\\n    address stakingPool\\n);\\n\\n// Modifier error\\nerror RewardDistributorManager__NotController();\\n// Function errors\\nerror RewardDistributorManager_addRewardDistributorInternal__InvalidRewardDistributor();\\nerror RewardDistributorManager_addRewardDistributorInternal__RewardDistributorAlreadyExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_initialize__InvalidController();\\nerror RewardDistributorManager_removeRewardDistributorInternal__RewardDistributorDoesNotExist(\\n    address rewardDistributor\\n);\\nerror RewardDistributorManager_setEligibilityManager_InvalidEligibilityManager();\\nerror RewardDistributorManager_updateEligibleBalance__InvalidEligibility();\\n\\nerror RewardDistributor__CallerIsNotRewardManager();\\nerror RewardDistributor__ContractPaused();\\nerror RewardDistributor_initialize__InvalidController();\\nerror RewardDistributor_initialize__InvalidRewardDistributorManager();\\nerror RewardDistributor_rescueTokens__CallerIsNotTreasury();\\nerror RewardDistributor_setRewardToken__InvalidRewardToken();\\nerror RewardDistributor_setTreasury__InvalidTreasury();\\nerror RewardDistributor_setDistributionBorrowSpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionSupplySpeedsInternal__ArrayLengthMismatch();\\nerror RewardDistributor_setDistributionBorrowSpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_setDistributionSupplySpeed__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateDistributionState__TokenHasNotBeenListed(\\n    address iToken\\n);\\nerror RewardDistributor_updateReward__TokenHasNotBeenListed(address iToken);\\nerror RewardDistributor_updateReward__AccountIsZeroAddress();\\nerror RewardDistributor_setBountyRatio__RatioTooHigh();\\n\",\"keccak256\":\"0x8e9a4bbbbc196ddceeb4bd00f3500040bf513e2a32009c358e9103989267842f\",\"license\":\"MIT\"},\"src/Interfaces/IBLPReward.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IBLPReward {\\n    function updateReward(address _account) external;\\n}\\n\",\"keccak256\":\"0x671d4e2a7f09a5cd2e08c16a1f11e2117746696802aaff231544483e8d8f0453\",\"license\":\"MIT\"},\"src/Interfaces/IEligibilityManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IEligibilityManager {\\n    function isEligibilityManager() external pure returns (bool);\\n    function isEligible(address _account) external returns (bool, bool);\\n    function hasBLPStakingPool(address _stakingPool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x299d78a109590773f810702595259a2282551ade58f2eec53bbf69c05408c30e\",\"license\":\"MIT\"},\"src/Interfaces/IRewardDistributorManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport \\\"./IEligibilityManager.sol\\\";\\ninterface IRewardDistributorManager {\\n    function isRewardDistributorManager() external pure returns (bool);\\n\\n    function eligibilityManager() external view returns (IEligibilityManager);\\n\\n    function _addRecipient(\\n        address _iToken,\\n        uint256 _distributionFactor\\n    ) external;\\n\\n    function _setEligibilityManager(address _newEligibilityManager) external;\\n\\n    function eligibleTotalSupply(\\n        address iToken\\n    ) external view returns (uint256);\\n\\n    function eligibleTotalBorrow(\\n        address iToken\\n    ) external view returns (uint256);\\n\\n    function eligibleSupply(\\n        address iToken,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function eligibleBorrow(\\n        address iToken,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function updateEligibleBalance(address _account) external;\\n\\n    function updateEligibleBalances(address[] memory _accounts) external;\\n}\\n\",\"keccak256\":\"0xf10770889fd71db1575ca7088539d810952b8f023c8470f70e1671bb7180f84e\",\"license\":\"MIT\"},\"src/Libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        _;\\n\\n        _initialized = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcbc7147c62a7be5a7bf4f195ad3dc07ca07f2b1de52b3e010b45ebdf17e9cc50\",\"license\":\"MIT\"},\"src/Libraries/Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\n */\\ncontract Ownable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    address payable public owner;\\n\\n    /**\\n     * @dev Returns the address of the current pending owner.\\n     */\\n    address payable public pendingOwner;\\n\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\n    event NewPendingOwner(\\n        address indexed oldPendingOwner,\\n        address indexed newPendingOwner\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal {\\n        owner = payable(msg.sender);\\n        emit NewOwner(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\n     * @param newPendingOwner New pending owner.\\n     */\\n    function _setPendingOwner(\\n        address payable newPendingOwner\\n    ) external onlyOwner {\\n        require(\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\n        );\\n\\n        // Gets current owner.\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Sets new pending owner.\\n        pendingOwner = newPendingOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n    }\\n\\n    /**\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\n     */\\n    function _acceptOwner() external {\\n        require(\\n            msg.sender == pendingOwner,\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\n        );\\n\\n        // Gets current values for events.\\n        address oldOwner = owner;\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Set the new contract owner.\\n        owner = pendingOwner;\\n\\n        // Clear the pendingOwner.\\n        pendingOwner = payable(address(0));\\n\\n        emit NewOwner(oldOwner, owner);\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x558d48351f76c1d19134d3a686b7ebca79ec9bb4b900f6aa8eaecd951885ca4c\",\"license\":\"MIT\"},\"src/Stake/BLPStakingPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./BaseStakingPool.sol\\\";\\nimport \\\"../Interfaces/Errors.sol\\\";\\nimport \\\"../Interfaces/IRewardDistributorManager.sol\\\";\\nimport \\\"../Interfaces/IEligibilityManager.sol\\\";\\nimport \\\"../Libraries/Initializable.sol\\\";\\n\\ncontract BLPStakingPool is Initializable, BaseStakingPool {\\n    IRewardDistributorManager public rewardDistributorManager;\\n\\n    event NewRewardDistributorManager(address newRewardDistributorManager);\\n\\n    constructor(\\n        IERC20Upgradeable _stakingToken\\n    ) BaseStakingPool(_stakingToken) {}\\n\\n    function _setRewardDistributorManager(\\n        IRewardDistributorManager _rewardDistributorManager\\n    ) external onlyOwner {\\n        if (!_rewardDistributorManager.isRewardDistributorManager()) {\\n            revert BLPStakingPool_setRewardDistributorManager__InvalidRewardDistributorManager();\\n        }\\n\\n        rewardDistributorManager = _rewardDistributorManager;\\n        emit NewRewardDistributorManager(address(_rewardDistributorManager));\\n    }\\n\\n    function stake(address _recipient, uint256 _amount) public virtual override {\\n        super.stake(_recipient, _amount);\\n\\n        IEligibilityManager _eligibilityManager = rewardDistributorManager.eligibilityManager();\\n        bool _hasBLPStakingPool = _eligibilityManager.hasBLPStakingPool(address(this));\\n        if (_hasBLPStakingPool) {\\n            rewardDistributorManager.updateEligibleBalance(_recipient);\\n        }\\n    }\\n\\n    function withdraw(uint256 _amount) public virtual override {\\n        super.withdraw(_amount);\\n\\n        IEligibilityManager _eligibilityManager = rewardDistributorManager.eligibilityManager();\\n        bool _hasBLPStakingPool = _eligibilityManager.hasBLPStakingPool(address(this));\\n        if (_hasBLPStakingPool) {\\n            rewardDistributorManager.updateEligibleBalance(msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b3de0be90e29b5e3d1e0e048a73bd8cee21294df03dfa507d63134c09e4742a\",\"license\":\"MIT\"},\"src/Stake/BaseStakingPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../Interfaces/Errors.sol\\\";\\nimport \\\"../Interfaces/IBLPReward.sol\\\";\\nimport \\\"../Libraries/Initializable.sol\\\";\\nimport \\\"../Libraries/Ownable.sol\\\";\\n\\n\\ncontract BaseStakingPool is Initializable, Ownable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    IERC20Upgradeable public stakingToken;\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n    EnumerableSetUpgradeable.AddressSet internal _rewardDistributors;\\n\\n    event AddRewardDistributor(address _newRewardDistributor);\\n    event RemoveRewardDistributor(address _oldRewardDistributor);\\n    event Staked(address spender, address indexed recipient, uint256 indexed stakeAmount, uint256 indexed stakedAmount);\\n    event Withdrawn(address indexed user, uint256 indexed stakeAmount, uint256 indexed stakedAmount);\\n\\n    modifier updateReward(address _account) {\\n        uint256 _length = _rewardDistributors.length();\\n        for (uint256 _i; _i < _length; ) {\\n            IBLPReward(_rewardDistributors.at(_i)).updateReward(_account);\\n\\n            unchecked {\\n                ++_i;\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor(IERC20Upgradeable _stakingToken) {\\n        initialize(_stakingToken);\\n    }\\n\\n    /*********************************/\\n    /******** Security Check *********/\\n    /*********************************/\\n\\n    /**\\n     * @notice Ensure this is a Staking Pool contract.\\n     */\\n    function isStakingPool() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function initialize(IERC20Upgradeable _stakingToken) public virtual initializer {\\n        if (address(_stakingToken) == address(0)) {\\n            revert BaseStakingPool_initialize__StakingTokenIsZeroAddress();\\n        }\\n\\n        __Ownable_init();\\n\\n        stakingToken = _stakingToken;\\n    }\\n\\n    function _addRewardDistributor(\\n        address _newRewardDistributor\\n    ) external onlyOwner {\\n        if (_newRewardDistributor == address(0)) {\\n            revert BaseStakingPool_addRewardDistributor__RewardDistributorIsZeroAddress();\\n        }\\n\\n        if (_rewardDistributors.add(_newRewardDistributor)) {\\n            emit AddRewardDistributor(_newRewardDistributor);\\n        } else {\\n            revert BaseStakingPool_addRewardDistributor__RewardDistributorAlreadyExist();\\n        }\\n    }\\n\\n    function _removeRewardDistributor(\\n        address _oldRewardDistributor\\n    ) external onlyOwner {\\n        if (_rewardDistributors.remove(_oldRewardDistributor)) {\\n            emit RemoveRewardDistributor(_oldRewardDistributor);\\n        } else {\\n            revert BaseStakingPool_removeRewardDistributor__RewardDistributorDoesNotExist();\\n        }\\n    }\\n\\n    function getRewardDistributors() external view returns (address[] memory) {\\n        return _rewardDistributors.values();\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(address _recipient, uint256 amount) public virtual updateReward(_recipient) {\\n        if (amount == 0) {\\n            revert BaseStakingPool_stake__StakeAmountIsZero();\\n        }\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[_recipient] = _balances[_recipient] + amount;\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Staked(msg.sender, _recipient, amount, _balances[_recipient]);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual updateReward(msg.sender) {\\n        if (amount == 0) {\\n            revert BaseStakingPool_withdraw__WithdrawAmountIsZero();\\n        }\\n\\n        _totalSupply = _totalSupply - amount;\\n        _balances[msg.sender] = _balances[msg.sender] - amount;\\n        stakingToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount, _balances[msg.sender]);\\n    }\\n}\\n\",\"keccak256\":\"0xee9e0f2e44242b9cc0cc76d8769742261ccd39f7f4ca93f403374159bf0d017f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016963803806200169683398101604081905262000034916200015f565b80620000408162000048565b505062000191565b60005460ff1615620000b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6001600160a01b038116620000de57604051625f83fb60e41b815260040160405180910390fd5b620000e862000117565b603480546001600160a01b0319166001600160a01b03929092169190911790556000805460ff19166001179055565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6000602082840312156200017257600080fd5b81516001600160a01b03811681146200018a57600080fd5b9392505050565b6114f580620001a16000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063c4d66de811610066578063c4d66de814610220578063d933ac6714610233578063e30c397814610246578063fc4d33f91461025957600080fd5b80638da5cb5b146101d3578063adc9772e146101eb578063aed6d5c0146101fe578063b2a6df741461020d57600080fd5b806361252fd1116100d357806361252fd11461016f5780636e96dfd71461018457806370a082311461019757806372f702f3146101c057600080fd5b806318160ddd146101055780632e1a7d4d1461011c578063337fbfa814610131578063415985c114610144575b600080fd5b6035545b6040519081526020015b60405180910390f35b61012f61012a36600461128e565b610261565b005b61012f61013f3660046112bc565b6103b1565b603954610157906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b610177610455565b60405161011391906112d9565b61012f6101923660046112bc565b610466565b6101096101a53660046112bc565b6001600160a01b031660009081526036602052604090205490565b603454610157906001600160a01b031681565b6000546101579061010090046001600160a01b031681565b61012f6101f9366004611326565b610593565b60405160018152602001610113565b61012f61021b3660046112bc565b6106e7565b61012f61022e3660046112bc565b61079f565b61012f6102413660046112bc565b610866565b600154610157906001600160a01b031681565b61012f610962565b61026a81610a78565b60395460408051630a63bfd560e11b815290516000926001600160a01b0316916314c77faa9160048083019260209291908290030181865afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190611352565b604051632af3854960e01b81523060048201529091506000906001600160a01b03831690632af3854990602401602060405180830381865afa158015610322573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610346919061136f565b905080156103ac5760395460405163098f82e760e21b81523360048201526001600160a01b039091169063263e0b9c90602401600060405180830381600087803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050505b505050565b60005461010090046001600160a01b031633146103e95760405162461bcd60e51b81526004016103e090611391565b60405180910390fd5b6103f4603782610bbe565b15610439576040516001600160a01b03821681527f202daff40f5262ad5e95940c6c7a62bc0117d839570a20c66268dc0983ef6143906020015b60405180910390a150565b604051630242c2a560e51b815260040160405180910390fd5b50565b60606104616037610bdc565b905090565b60005461010090046001600160a01b031633146104955760405162461bcd60e51b81526004016103e090611391565b6001600160a01b038116158015906104bb57506001546001600160a01b03828116911614155b6105415760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a4016103e0565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b61059d8282610bf0565b60395460408051630a63bfd560e11b815290516000926001600160a01b0316916314c77faa9160048083019260209291908290030181865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611352565b604051632af3854960e01b81523060048201529091506000906001600160a01b03831690632af3854990602401602060405180830381865afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610679919061136f565b905080156106e15760395460405163098f82e760e21b81526001600160a01b0386811660048301529091169063263e0b9c90602401600060405180830381600087803b1580156106c857600080fd5b505af11580156106dc573d6000803e3d6000fd5b505050505b50505050565b60005461010090046001600160a01b031633146107165760405162461bcd60e51b81526004016103e090611391565b6001600160a01b03811661073d57604051633f03113560e21b815260040160405180910390fd5b610748603782610d56565b15610786576040516001600160a01b03821681527fafd92645c06c0f746b45815ad30af48dfbac17647e860d7be5e8bcaded9498a99060200161042e565b604051630217a53560e21b815260040160405180910390fd5b60005460ff16156108095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103e0565b6001600160a01b03811661082f57604051625f83fb60e41b815260040160405180910390fd5b610837610d6b565b603480546001600160a01b0319166001600160a01b03929092169190911790556000805460ff19166001179055565b60005461010090046001600160a01b031633146108955760405162461bcd60e51b81526004016103e090611391565b806001600160a01b031663eb5bf95d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f7919061136f565b6109145760405163d83931ad60e01b815260040160405180910390fd5b603980546001600160a01b0319166001600160a01b0383169081179091556040519081527f69df209622c88250230a5fe484d1fe30a9fea87c4aa276f20ac505761cac54929060200161042e565b6001546001600160a01b031633146109ca5760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b60648201526084016103e0565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b336000610a856037610db3565b905060005b81811015610b0557610a9d603782610dbd565b60405163632447c960e01b81526001600160a01b038581166004830152919091169063632447c990602401600060405180830381600087803b158015610ae257600080fd5b505af1158015610af6573d6000803e3d6000fd5b50505050806001019050610a8a565b5082610b2457604051636602e2a160e11b815260040160405180910390fd5b82603554610b3291906113e9565b60355533600090815260366020526040902054610b509084906113e9565b33600081815260366020526040902091909155603454610b7c916001600160a01b039091169085610dc9565b336000818152603660205260408082205490519092869290917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc69190a4505050565b6000610bd3836001600160a01b038416610e2c565b90505b92915050565b60606000610be983610f1f565b9392505050565b816000610bfd6037610db3565b905060005b81811015610c7d57610c15603782610dbd565b60405163632447c960e01b81526001600160a01b038581166004830152919091169063632447c990602401600060405180830381600087803b158015610c5a57600080fd5b505af1158015610c6e573d6000803e3d6000fd5b50505050806001019050610c02565b5082610c9b576040516206d0c960e51b815260040160405180910390fd5b82603554610ca99190611400565b6035556001600160a01b038416600090815260366020526040902054610cd0908490611400565b6001600160a01b03808616600090815260366020526040902091909155603454610cfd9116333086610f7b565b6001600160a01b0384166000818152603660209081526040918290205491513381529192869290917f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc910160405180910390a450505050565b6000610bd3836001600160a01b038416610fb3565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6000610bd6825490565b6000610bd38383611002565b6040516001600160a01b0383166024820152604481018290526103ac90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261102c565b60008181526001830160205260408120548015610f15576000610e506001836113e9565b8554909150600090610e64906001906113e9565b9050818114610ec9576000866000018281548110610e8457610e84611418565b9060005260206000200154905080876000018481548110610ea757610ea7611418565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610eda57610eda61142e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610bd6565b6000915050610bd6565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f6f57602002820191906000526020600020905b815481526020019060010190808311610f5b575b50505050509050919050565b6040516001600160a01b03808516602483015283166044820152606481018290526106e19085906323b872dd60e01b90608401610df5565b6000818152600183016020526040812054610ffa57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bd6565b506000610bd6565b600082600001828154811061101957611019611418565b9060005260206000200154905092915050565b6000611081826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111019092919063ffffffff16565b90508051600014806110a25750808060200190518101906110a2919061136f565b6103ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e0565b60606111108484600085611118565b949350505050565b6060824710156111795760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e0565b600080866001600160a01b031685876040516111959190611470565b60006040518083038185875af1925050503d80600081146111d2576040519150601f19603f3d011682016040523d82523d6000602084013e6111d7565b606091505b50915091506111e8878383876111f3565b979650505050505050565b6060831561125f578251611258576001600160a01b0385163b6112585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e0565b5081611110565b61111083838151156112745781518083602001fd5b8060405162461bcd60e51b81526004016103e0919061148c565b6000602082840312156112a057600080fd5b5035919050565b6001600160a01b038116811461045257600080fd5b6000602082840312156112ce57600080fd5b8135610be9816112a7565b6020808252825182820181905260009190848201906040850190845b8181101561131a5783516001600160a01b0316835292840192918401916001016112f5565b50909695505050505050565b6000806040838503121561133957600080fd5b8235611344816112a7565b946020939093013593505050565b60006020828403121561136457600080fd5b8151610be9816112a7565b60006020828403121561138157600080fd5b81518015158114610be957600080fd5b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156113fb576113fb6113d3565b500390565b60008219821115611413576114136113d3565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60005b8381101561145f578181015183820152602001611447565b838111156106e15750506000910152565b60008251611482818460208701611444565b9190910192915050565b60208152600082518060208401526114ab816040850160208701611444565b601f01601f1916919091016040019291505056fea2646970667358221220492414a81ee0015756f01ef535b0dee2677352097ff6582f146baf25bdce536864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063c4d66de811610066578063c4d66de814610220578063d933ac6714610233578063e30c397814610246578063fc4d33f91461025957600080fd5b80638da5cb5b146101d3578063adc9772e146101eb578063aed6d5c0146101fe578063b2a6df741461020d57600080fd5b806361252fd1116100d357806361252fd11461016f5780636e96dfd71461018457806370a082311461019757806372f702f3146101c057600080fd5b806318160ddd146101055780632e1a7d4d1461011c578063337fbfa814610131578063415985c114610144575b600080fd5b6035545b6040519081526020015b60405180910390f35b61012f61012a36600461128e565b610261565b005b61012f61013f3660046112bc565b6103b1565b603954610157906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b610177610455565b60405161011391906112d9565b61012f6101923660046112bc565b610466565b6101096101a53660046112bc565b6001600160a01b031660009081526036602052604090205490565b603454610157906001600160a01b031681565b6000546101579061010090046001600160a01b031681565b61012f6101f9366004611326565b610593565b60405160018152602001610113565b61012f61021b3660046112bc565b6106e7565b61012f61022e3660046112bc565b61079f565b61012f6102413660046112bc565b610866565b600154610157906001600160a01b031681565b61012f610962565b61026a81610a78565b60395460408051630a63bfd560e11b815290516000926001600160a01b0316916314c77faa9160048083019260209291908290030181865afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190611352565b604051632af3854960e01b81523060048201529091506000906001600160a01b03831690632af3854990602401602060405180830381865afa158015610322573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610346919061136f565b905080156103ac5760395460405163098f82e760e21b81523360048201526001600160a01b039091169063263e0b9c90602401600060405180830381600087803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050505b505050565b60005461010090046001600160a01b031633146103e95760405162461bcd60e51b81526004016103e090611391565b60405180910390fd5b6103f4603782610bbe565b15610439576040516001600160a01b03821681527f202daff40f5262ad5e95940c6c7a62bc0117d839570a20c66268dc0983ef6143906020015b60405180910390a150565b604051630242c2a560e51b815260040160405180910390fd5b50565b60606104616037610bdc565b905090565b60005461010090046001600160a01b031633146104955760405162461bcd60e51b81526004016103e090611391565b6001600160a01b038116158015906104bb57506001546001600160a01b03828116911614155b6105415760405162461bcd60e51b815260206004820152604b60248201527f5f73657450656e64696e674f776e65723a204e6577206f77656e722063616e2060448201527f6e6f74206265207a65726f206164647265737320616e64206f776e657220686160648201526a73206265656e207365742160a81b608482015260a4016103e0565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b61059d8282610bf0565b60395460408051630a63bfd560e11b815290516000926001600160a01b0316916314c77faa9160048083019260209291908290030181865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611352565b604051632af3854960e01b81523060048201529091506000906001600160a01b03831690632af3854990602401602060405180830381865afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610679919061136f565b905080156106e15760395460405163098f82e760e21b81526001600160a01b0386811660048301529091169063263e0b9c90602401600060405180830381600087803b1580156106c857600080fd5b505af11580156106dc573d6000803e3d6000fd5b505050505b50505050565b60005461010090046001600160a01b031633146107165760405162461bcd60e51b81526004016103e090611391565b6001600160a01b03811661073d57604051633f03113560e21b815260040160405180910390fd5b610748603782610d56565b15610786576040516001600160a01b03821681527fafd92645c06c0f746b45815ad30af48dfbac17647e860d7be5e8bcaded9498a99060200161042e565b604051630217a53560e21b815260040160405180910390fd5b60005460ff16156108095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103e0565b6001600160a01b03811661082f57604051625f83fb60e41b815260040160405180910390fd5b610837610d6b565b603480546001600160a01b0319166001600160a01b03929092169190911790556000805460ff19166001179055565b60005461010090046001600160a01b031633146108955760405162461bcd60e51b81526004016103e090611391565b806001600160a01b031663eb5bf95d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f7919061136f565b6109145760405163d83931ad60e01b815260040160405180910390fd5b603980546001600160a01b0319166001600160a01b0383169081179091556040519081527f69df209622c88250230a5fe484d1fe30a9fea87c4aa276f20ac505761cac54929060200161042e565b6001546001600160a01b031633146109ca5760405162461bcd60e51b815260206004820152602560248201527f5f6163636570744f776e65723a204f6e6c7920666f722070656e64696e67206f604482015264776e65722160d81b60648201526084016103e0565b60008054600180546001600160a01b03818116610100818102610100600160a81b03198716178088556001600160a01b031990941690945560405194849004821695909493909204169184917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236491a36001546040516001600160a01b03918216918316907fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b90600090a35050565b336000610a856037610db3565b905060005b81811015610b0557610a9d603782610dbd565b60405163632447c960e01b81526001600160a01b038581166004830152919091169063632447c990602401600060405180830381600087803b158015610ae257600080fd5b505af1158015610af6573d6000803e3d6000fd5b50505050806001019050610a8a565b5082610b2457604051636602e2a160e11b815260040160405180910390fd5b82603554610b3291906113e9565b60355533600090815260366020526040902054610b509084906113e9565b33600081815260366020526040902091909155603454610b7c916001600160a01b039091169085610dc9565b336000818152603660205260408082205490519092869290917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc69190a4505050565b6000610bd3836001600160a01b038416610e2c565b90505b92915050565b60606000610be983610f1f565b9392505050565b816000610bfd6037610db3565b905060005b81811015610c7d57610c15603782610dbd565b60405163632447c960e01b81526001600160a01b038581166004830152919091169063632447c990602401600060405180830381600087803b158015610c5a57600080fd5b505af1158015610c6e573d6000803e3d6000fd5b50505050806001019050610c02565b5082610c9b576040516206d0c960e51b815260040160405180910390fd5b82603554610ca99190611400565b6035556001600160a01b038416600090815260366020526040902054610cd0908490611400565b6001600160a01b03808616600090815260366020526040902091909155603454610cfd9116333086610f7b565b6001600160a01b0384166000818152603660209081526040918290205491513381529192869290917f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc910160405180910390a450505050565b6000610bd3836001600160a01b038416610fb3565b60008054610100600160a81b0319163361010081029190911782556040519091907f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364908290a3565b6000610bd6825490565b6000610bd38383611002565b6040516001600160a01b0383166024820152604481018290526103ac90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261102c565b60008181526001830160205260408120548015610f15576000610e506001836113e9565b8554909150600090610e64906001906113e9565b9050818114610ec9576000866000018281548110610e8457610e84611418565b9060005260206000200154905080876000018481548110610ea757610ea7611418565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610eda57610eda61142e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610bd6565b6000915050610bd6565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f6f57602002820191906000526020600020905b815481526020019060010190808311610f5b575b50505050509050919050565b6040516001600160a01b03808516602483015283166044820152606481018290526106e19085906323b872dd60e01b90608401610df5565b6000818152600183016020526040812054610ffa57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bd6565b506000610bd6565b600082600001828154811061101957611019611418565b9060005260206000200154905092915050565b6000611081826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111019092919063ffffffff16565b90508051600014806110a25750808060200190518101906110a2919061136f565b6103ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e0565b60606111108484600085611118565b949350505050565b6060824710156111795760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e0565b600080866001600160a01b031685876040516111959190611470565b60006040518083038185875af1925050503d80600081146111d2576040519150601f19603f3d011682016040523d82523d6000602084013e6111d7565b606091505b50915091506111e8878383876111f3565b979650505050505050565b6060831561125f578251611258576001600160a01b0385163b6112585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e0565b5081611110565b61111083838151156112745781518083602001fd5b8060405162461bcd60e51b81526004016103e0919061148c565b6000602082840312156112a057600080fd5b5035919050565b6001600160a01b038116811461045257600080fd5b6000602082840312156112ce57600080fd5b8135610be9816112a7565b6020808252825182820181905260009190848201906040850190845b8181101561131a5783516001600160a01b0316835292840192918401916001016112f5565b50909695505050505050565b6000806040838503121561133957600080fd5b8235611344816112a7565b946020939093013593505050565b60006020828403121561136457600080fd5b8151610be9816112a7565b60006020828403121561138157600080fd5b81518015158114610be957600080fd5b60208082526022908201527f6f6e6c794f776e65723a2063616c6c6572206973206e6f7420746865206f776e60408201526132b960f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156113fb576113fb6113d3565b500390565b60008219821115611413576114136113d3565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60005b8381101561145f578181015183820152602001611447565b838111156106e15750506000910152565b60008251611482818460208701611444565b9190910192915050565b60208152600082518060208401526114ab816040850160208701611444565b601f01601f1916919091016040019291505056fea2646970667358221220492414a81ee0015756f01ef535b0dee2677352097ff6582f146baf25bdce536864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_acceptOwner()": {
        "details": "Accepts the admin rights, but only for pendingOwenr."
      },
      "_setPendingOwner(address)": {
        "details": "Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.",
        "params": {
          "newPendingOwner": "New pending owner."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_setPendingOwner(address)": {
        "notice": "Base on the inputing parameter `newPendingOwner` to check the exact error reason."
      },
      "isStakingPool()": {
        "notice": "Ensure this is a Staking Pool contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6023,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6045,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 6048,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 6180,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10525,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "stakingToken",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20Upgradeable)77"
      },
      {
        "astId": 10527,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 10531,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "_balances",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10534,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "_rewardDistributors",
        "offset": 0,
        "slot": "55",
        "type": "t_struct(AddressSet)1145_storage"
      },
      {
        "astId": 10375,
        "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
        "label": "rewardDistributorManager",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IRewardDistributorManager)5867"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)77": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardDistributorManager)5867": {
        "encoding": "inplace",
        "label": "contract IRewardDistributorManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1145_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1144,
            "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)830_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)830_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 825,
            "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 829,
            "contract": "src/Stake/BLPStakingPool.sol:BLPStakingPool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}